CCS PCH C Compiler, Version 5.112, 5967               06-Nov-24 19:40

               Filename:   C:\Users\Ganji\Documents\------TEMUULEL------\CODE\TML_OBC.X\dist\default\production\TML_OBC.X.production.lst

               ROM used:   11032 bytes (8%)
                           Largest free fragment is 65520
               RAM used:   1251 (35%) at main() level
                           1580 (44%) worst case
               Stack used: 3 locations
               Stack size: 30

*
00000:  NOP   
00002:  GOTO   28D4
.................... #import(file="build/default/production/main.o")
.................... /* 
.................... /* 
....................  * File:   main.c
....................  * Author: Ganji
....................  *  ____    _    _   _     _ ___ 
....................    / ___|  / \  | \ | |   | |_ _|
....................   | |  _  / _ \ |  \| |_  | || | 
....................   | |_| |/ ___ \| |\  | |_| || | 
....................    \____/_/   \_\_| \_|\___/|___| 
....................  *
....................  * Created on September 12, 2024, 7:31 AM
....................  */
.................... 
.................... #include <main.h>
.................... /* 
....................  * File:   main.h
....................  * Author: Ganji
....................  *
....................  * Created on October 22, 2024, 3:31 PM
....................  */
.................... 
.................... #ifndef MAIN_H
.................... #define	MAIN_H
.................... 
.................... #ifdef	__cplusplus
.................... extern "C" {
.................... #endif
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
00006:  DATA 57,52
00008:  DATA 49,54
0000A:  DATA 45,20
0000C:  DATA 41,44
0000E:  DATA 44,52
00010:  DATA 45,53
00012:  DATA 53,3A
00014:  DATA 20,30
00016:  DATA 78,25
00018:  DATA 30,38
0001A:  DATA 6C,78
0001C:  DATA 0A,00
0001E:  DATA 0A,25
00020:  DATA 64,20
00022:  DATA 42,59
00024:  DATA 54,45
00026:  DATA 53,20
00028:  DATA 57,52
0002A:  DATA 49,54
0002C:  DATA 54,45
0002E:  DATA 4E,20
00030:  DATA 49,4E
00032:  DATA 20,4D
00034:  DATA 41,49
00036:  DATA 4E,21
00038:  DATA 0A,00
0003A:  DATA 57,52
0003C:  DATA 49,54
0003E:  DATA 45,20
00040:  DATA 41,44
00042:  DATA 44,52
00044:  DATA 45,53
00046:  DATA 53,20
00048:  DATA 49,4E
0004A:  DATA 20,43
0004C:  DATA 4F,4D
0004E:  DATA 3A,20
00050:  DATA 30,78
00052:  DATA 25,30
00054:  DATA 38,6C
00056:  DATA 78,0A
00058:  DATA 00,00
0005A:  DATA 0A,25
0005C:  DATA 64,20
0005E:  DATA 42,59
00060:  DATA 54,45
00062:  DATA 53,20
00064:  DATA 57,52
00066:  DATA 49,54
00068:  DATA 54,45
0006A:  DATA 4E,20
0006C:  DATA 49,4E
0006E:  DATA 20,43
00070:  DATA 4F,4D
00072:  DATA 21,0A
00074:  DATA 00,00
00076:  DATA 57,52
00078:  DATA 49,54
0007A:  DATA 45,20
0007C:  DATA 41,44
0007E:  DATA 44,52
00080:  DATA 45,53
00082:  DATA 53,20
00084:  DATA 49,4E
00086:  DATA 20,41
00088:  DATA 44,43
0008A:  DATA 53,3A
0008C:  DATA 20,30
0008E:  DATA 78,25
00090:  DATA 30,38
00092:  DATA 6C,78
00094:  DATA 0A,00
00096:  DATA 0A,25
00098:  DATA 64,20
0009A:  DATA 42,59
0009C:  DATA 54,45
0009E:  DATA 53,20
000A0:  DATA 57,52
000A2:  DATA 49,54
000A4:  DATA 54,45
000A6:  DATA 4E,20
000A8:  DATA 49,4E
000AA:  DATA 20,41
000AC:  DATA 44,43
000AE:  DATA 53,21
000B0:  DATA 0A,00
000B2:  DATA 50,4F
000B4:  DATA 57,45
000B6:  DATA 52,20
000B8:  DATA 4F,4E
000BA:  DATA 21,0A
000BC:  DATA 00,00
000BE:  DATA 44,69
000C0:  DATA 67,69
000C2:  DATA 74,61
000C4:  DATA 6C,20
000C6:  DATA 70,69
000C8:  DATA 6E,20
000CA:  DATA 6F,75
000CC:  DATA 74,20
000CE:  DATA 63,6F
000D0:  DATA 6E,66
000D2:  DATA 69,67
000D4:  DATA 75,72
000D6:  DATA 65,64
000D8:  DATA 20,0A
000DA:  DATA 00,00
000DC:  DATA 52,54
000DE:  DATA 43,43
000E0:  DATA 20,73
000E2:  DATA 65,74
000E4:  DATA 75,70
000E6:  DATA 20,66
000E8:  DATA 69,6E
000EA:  DATA 69,73
000EC:  DATA 68,65
000EE:  DATA 64,21
000F0:  DATA 0A,00
000F2:  DATA 53,68
000F4:  DATA 75,74
000F6:  DATA 64,6F
000F8:  DATA 77,6E
000FA:  DATA 20,63
000FC:  DATA 6F,75
000FE:  DATA 6E,74
00100:  DATA 20,73
00102:  DATA 74,61
00104:  DATA 72,74
00106:  DATA 65,64
00108:  DATA 0A,00
0010A:  DATA 52,65
0010C:  DATA 61,64
0010E:  DATA 20,73
00110:  DATA 68,75
00112:  DATA 74,64
00114:  DATA 6F,77
00116:  DATA 6E,20
00118:  DATA 63,6F
0011A:  DATA 75,6E
0011C:  DATA 74,3A
0011E:  DATA 20,25
00120:  DATA 75,0A
00122:  DATA 00,00
00124:  DATA 49,6E
00126:  DATA 63,72
00128:  DATA 65,6D
0012A:  DATA 65,6E
0012C:  DATA 74,65
0012E:  DATA 64,20
00130:  DATA 73,68
00132:  DATA 75,74
00134:  DATA 64,6F
00136:  DATA 77,6E
00138:  DATA 20,63
0013A:  DATA 6F,75
0013C:  DATA 6E,74
0013E:  DATA 3A,20
00140:  DATA 25,75
00142:  DATA 0A,00
00144:  DATA 4E,6F
00146:  DATA 77,20
00148:  DATA 73,68
0014A:  DATA 75,74
0014C:  DATA 64,6F
0014E:  DATA 77,6E
00150:  DATA 20,63
00152:  DATA 6F,75
00154:  DATA 6E,74
00156:  DATA 20,69
00158:  DATA 73,20
0015A:  DATA 3A,20
0015C:  DATA 25,75
0015E:  DATA 0A,0A
00160:  DATA 00,00
00162:  DATA 0A,45
00164:  DATA 6E,74
00166:  DATA 65,72
00168:  DATA 20,41
0016A:  DATA 64,64
0016C:  DATA 72,65
0016E:  DATA 73,73
00170:  DATA 20,28
00172:  DATA 68,65
00174:  DATA 78,2C
00176:  DATA 20,30
00178:  DATA 78,31
0017A:  DATA 32,33
0017C:  DATA 34,29
0017E:  DATA 3A,20
00180:  DATA 30,78
00182:  DATA 00,00
00184:  DATA 0A,45
00186:  DATA 6E,74
00188:  DATA 65,72
0018A:  DATA 20,6E
0018C:  DATA 75,6D
0018E:  DATA 62,65
00190:  DATA 72,20
00192:  DATA 6F,66
00194:  DATA 20,62
00196:  DATA 79,74
00198:  DATA 65,73
0019A:  DATA 20,74
0019C:  DATA 6F,20
0019E:  DATA 77,72
001A0:  DATA 69,74
001A2:  DATA 65,20
001A4:  DATA 28,6D
001A6:  DATA 61,78
001A8:  DATA 20,32
001AA:  DATA 35,36
001AC:  DATA 29,3A
001AE:  DATA 20,00
001B0:  DATA 45,72
001B2:  DATA 72,6F
001B4:  DATA 72,3A
001B6:  DATA 20,4D
001B8:  DATA 61,78
001BA:  DATA 69,6D
001BC:  DATA 75,6D
001BE:  DATA 20,64
001C0:  DATA 61,74
001C2:  DATA 61,20
001C4:  DATA 6C,65
001C6:  DATA 6E,67
001C8:  DATA 74,68
001CA:  DATA 20,69
001CC:  DATA 73,20
001CE:  DATA 32,35
001D0:  DATA 36,20
001D2:  DATA 62,79
001D4:  DATA 74,65
001D6:  DATA 73,2E
001D8:  DATA 0A,00
001DA:  DATA 45,6E
001DC:  DATA 74,65
001DE:  DATA 72,20
001E0:  DATA 25,64
001E2:  DATA 20,62
001E4:  DATA 79,74
001E6:  DATA 65,73
001E8:  DATA 20,6F
001EA:  DATA 66,20
001EC:  DATA 64,61
001EE:  DATA 74,61
001F0:  DATA 20,28
001F2:  DATA 69,6E
001F4:  DATA 20,68
001F6:  DATA 65,78
001F8:  DATA 29,3A
001FA:  DATA 0A,00
001FC:  DATA 42,79
001FE:  DATA 74,65
00200:  DATA 20,25
00202:  DATA 64,3A
00204:  DATA 20,30
00206:  DATA 78,00
00208:  DATA 0A,44
0020A:  DATA 61,74
0020C:  DATA 61,20
0020E:  DATA 73,75
00210:  DATA 63,63
00212:  DATA 65,73
00214:  DATA 73,66
00216:  DATA 75,6C
00218:  DATA 6C,79
0021A:  DATA 20,77
0021C:  DATA 72,69
0021E:  DATA 74,74
00220:  DATA 65,6E
00222:  DATA 2E,0A
00224:  DATA 00,00
00226:  DATA 4D,41
00228:  DATA 49,4E
0022A:  DATA 20,66
0022C:  DATA 6C,61
0022E:  DATA 73,68
00230:  DATA 20,6D
00232:  DATA 65,6D
00234:  DATA 6F,72
00236:  DATA 79,20
00238:  DATA 63,68
0023A:  DATA 6F,73
0023C:  DATA 65,6E
0023E:  DATA 0A,00
00240:  DATA 70,72
00242:  DATA 65,73
00244:  DATA 73,20
00246:  DATA 61,3A
00248:  DATA 20,52
0024A:  DATA 65,61
0024C:  DATA 64,20
0024E:  DATA 49,44
00250:  DATA 20,6F
00252:  DATA 66,20
00254:  DATA 74,68
00256:  DATA 65,20
00258:  DATA 63,68
0025A:  DATA 69,70
0025C:  DATA 0A,00
0025E:  DATA 70,72
00260:  DATA 65,73
00262:  DATA 73,20
00264:  DATA 62,3A
00266:  DATA 20,57
00268:  DATA 72,69
0026A:  DATA 74,65
0026C:  DATA 20,64
0026E:  DATA 61,74
00270:  DATA 61,20
00272:  DATA 73,65
00274:  DATA 74,20
00276:  DATA 69,6E
00278:  DATA 20,73
0027A:  DATA 70,65
0027C:  DATA 63,69
0027E:  DATA 66,69
00280:  DATA 65,64
00282:  DATA 20,61
00284:  DATA 64,64
00286:  DATA 72,65
00288:  DATA 73,73
0028A:  DATA 0A,00
0028C:  DATA 70,72
0028E:  DATA 65,73
00290:  DATA 73,20
00292:  DATA 63,3A
00294:  DATA 20,52
00296:  DATA 65,61
00298:  DATA 64,20
0029A:  DATA 64,61
0029C:  DATA 74,61
0029E:  DATA 20,73
002A0:  DATA 65,74
002A2:  DATA 20,69
002A4:  DATA 6E,20
002A6:  DATA 73,70
002A8:  DATA 65,63
002AA:  DATA 69,66
002AC:  DATA 69,65
002AE:  DATA 64,20
002B0:  DATA 61,64
002B2:  DATA 64,72
002B4:  DATA 65,73
002B6:  DATA 73,0A
002B8:  DATA 00,00
002BA:  DATA 70,72
002BC:  DATA 65,73
002BE:  DATA 73,20
002C0:  DATA 78,3A
002C2:  DATA 20,52
002C4:  DATA 65,74
002C6:  DATA 75,72
002C8:  DATA 6E,20
002CA:  DATA 74,6F
002CC:  DATA 20,4D
002CE:  DATA 41,49
002D0:  DATA 4E,20
002D2:  DATA 4D,45
002D4:  DATA 4E,55
002D6:  DATA 0A,00
002D8:  DATA 53,74
002DA:  DATA 61,72
002DC:  DATA 74,65
002DE:  DATA 64,20
002E0:  DATA 72,65
002E2:  DATA 61,64
002E4:  DATA 69,6E
002E6:  DATA 67,20
002E8:  DATA 63,68
002EA:  DATA 69,70
002EC:  DATA 20,49
002EE:  DATA 44,20
002F0:  DATA 6F,66
002F2:  DATA 20,4D
002F4:  DATA 41,49
002F6:  DATA 4E,20
002F8:  DATA 66,6C
002FA:  DATA 61,73
002FC:  DATA 68,20
002FE:  DATA 6D,65
00300:  DATA 6D,6F
00302:  DATA 72,79
00304:  DATA 0A,00
00306:  DATA 52,65
00308:  DATA 61,64
0030A:  DATA 20,64
0030C:  DATA 61,74
0030E:  DATA 61,20
00310:  DATA 73,65
00312:  DATA 74,20
00314:  DATA 69,6E
00316:  DATA 20,73
00318:  DATA 70,65
0031A:  DATA 63,69
0031C:  DATA 66,69
0031E:  DATA 65,64
00320:  DATA 20,61
00322:  DATA 64,64
00324:  DATA 72,65
00326:  DATA 73,73
00328:  DATA 0A,00
0032A:  DATA 45,6E
0032C:  DATA 74,65
0032E:  DATA 72,20
00330:  DATA 79,6F
00332:  DATA 75,72
00334:  DATA 20,73
00336:  DATA 70,65
00338:  DATA 63,69
0033A:  DATA 66,69
0033C:  DATA 65,64
0033E:  DATA 20,61
00340:  DATA 64,64
00342:  DATA 72,65
00344:  DATA 73,73
00346:  DATA 3A,20
00348:  DATA 00,00
0034A:  DATA 45,6E
0034C:  DATA 74,65
0034E:  DATA 72,20
00350:  DATA 79,6F
00352:  DATA 75,72
00354:  DATA 20,73
00356:  DATA 70,65
00358:  DATA 63,69
0035A:  DATA 66,69
0035C:  DATA 65,64
0035E:  DATA 20,61
00360:  DATA 64,64
00362:  DATA 72,65
00364:  DATA 73,73
00366:  DATA 20,6C
00368:  DATA 65,6E
0036A:  DATA 67,74
0036C:  DATA 68,20
0036E:  DATA 3A,20
00370:  DATA 00,00
00372:  DATA 49,6E
00374:  DATA 76,61
00376:  DATA 6C,69
00378:  DATA 64,20
0037A:  DATA 4D,41
0037C:  DATA 49,4E
0037E:  DATA 20,66
00380:  DATA 6C,61
00382:  DATA 73,68
00384:  DATA 20,6D
00386:  DATA 65,6D
00388:  DATA 6F,72
0038A:  DATA 79,20
0038C:  DATA 6F,70
0038E:  DATA 74,69
00390:  DATA 6F,6E
00392:  DATA 2E,20
00394:  DATA 50,6C
00396:  DATA 65,61
00398:  DATA 73,65
0039A:  DATA 20,74
0039C:  DATA 72,79
0039E:  DATA 20,61
003A0:  DATA 67,61
003A2:  DATA 69,6E
003A4:  DATA 2E,0A
003A6:  DATA 00,00
003A8:  DATA 70,72
003AA:  DATA 65,73
003AC:  DATA 73,65
003AE:  DATA 64,20
003B0:  DATA 6F,70
003B2:  DATA 74,69
003B4:  DATA 6F,6E
003B6:  DATA 20,64
003B8:  DATA 3A,20
003BA:  DATA 43,68
003BC:  DATA 65,63
003BE:  DATA 6B,20
003C0:  DATA 46,6C
003C2:  DATA 61,73
003C4:  DATA 68,20
003C6:  DATA 4D,65
003C8:  DATA 6D,6F
003CA:  DATA 72,69
003CC:  DATA 65,73
003CE:  DATA 0A,0A
003D0:  DATA 00,00
003D2:  DATA 50,6C
003D4:  DATA 65,61
003D6:  DATA 73,65
003D8:  DATA 20,63
003DA:  DATA 68,6F
003DC:  DATA 6F,73
003DE:  DATA 65,20
003E0:  DATA 77,68
003E2:  DATA 69,63
003E4:  DATA 68,20
003E6:  DATA 66,6C
003E8:  DATA 61,73
003EA:  DATA 68,20
003EC:  DATA 6D,65
003EE:  DATA 6D,6F
003F0:  DATA 72,79
003F2:  DATA 20,74
003F4:  DATA 6F,20
003F6:  DATA 77,6F
003F8:  DATA 72,6B
003FA:  DATA 20,6F
003FC:  DATA 6E,20
003FE:  DATA 28,61
00400:  DATA 2C,20
00402:  DATA 62,2C
00404:  DATA 20,63
00406:  DATA 29,3A
00408:  DATA 0A,00
0040A:  DATA 70,72
0040C:  DATA 65,73
0040E:  DATA 73,20
00410:  DATA 61,3A
00412:  DATA 20,4D
00414:  DATA 41,49
00416:  DATA 4E,20
00418:  DATA 66,6C
0041A:  DATA 61,73
0041C:  DATA 68,20
0041E:  DATA 6D,65
00420:  DATA 6D,6F
00422:  DATA 72,79
00424:  DATA 0A,00
00426:  DATA 70,72
00428:  DATA 65,73
0042A:  DATA 73,20
0042C:  DATA 62,3A
0042E:  DATA 20,43
00430:  DATA 4F,4D
00432:  DATA 20,73
00434:  DATA 68,61
00436:  DATA 72,65
00438:  DATA 64,20
0043A:  DATA 66,6C
0043C:  DATA 61,73
0043E:  DATA 68,20
00440:  DATA 6D,65
00442:  DATA 6D,6F
00444:  DATA 72,79
00446:  DATA 0A,00
00448:  DATA 70,72
0044A:  DATA 65,73
0044C:  DATA 73,20
0044E:  DATA 63,3A
00450:  DATA 20,41
00452:  DATA 44,43
00454:  DATA 53,20
00456:  DATA 73,68
00458:  DATA 61,72
0045A:  DATA 65,64
0045C:  DATA 20,66
0045E:  DATA 6C,61
00460:  DATA 73,68
00462:  DATA 20,6D
00464:  DATA 65,6D
00466:  DATA 6F,72
00468:  DATA 79,0A
0046A:  DATA 00,00
0046C:  DATA 70,72
0046E:  DATA 65,73
00470:  DATA 73,20
00472:  DATA 64,3A
00474:  DATA 20,4F
00476:  DATA 56,43
00478:  DATA 41,4D
0047A:  DATA 20,73
0047C:  DATA 68,61
0047E:  DATA 72,65
00480:  DATA 64,20
00482:  DATA 66,6C
00484:  DATA 61,73
00486:  DATA 68,20
00488:  DATA 6D,65
0048A:  DATA 6D,6F
0048C:  DATA 72,79
0048E:  DATA 0A,00
00490:  DATA 70,72
00492:  DATA 65,73
00494:  DATA 73,20
00496:  DATA 65,3A
00498:  DATA 20,4D
0049A:  DATA 56,43
0049C:  DATA 41,4D
0049E:  DATA 20,73
004A0:  DATA 68,61
004A2:  DATA 72,65
004A4:  DATA 64,20
004A6:  DATA 66,6C
004A8:  DATA 61,73
004AA:  DATA 68,20
004AC:  DATA 6D,65
004AE:  DATA 6D,6F
004B0:  DATA 72,79
004B2:  DATA 0A,00
004B4:  DATA 70,72
004B6:  DATA 65,73
004B8:  DATA 73,20
004BA:  DATA 78,3A
004BC:  DATA 20,52
004BE:  DATA 65,74
004C0:  DATA 75,72
004C2:  DATA 6E,20
004C4:  DATA 74,6F
004C6:  DATA 20,4D
004C8:  DATA 41,49
004CA:  DATA 4E,20
004CC:  DATA 4D,45
004CE:  DATA 4E,55
004D0:  DATA 0A,00
004D2:  DATA 4D,41
004D4:  DATA 49,4E
004D6:  DATA 20,73
004D8:  DATA 68,61
004DA:  DATA 72,65
004DC:  DATA 64,20
004DE:  DATA 66,6C
004E0:  DATA 61,73
004E2:  DATA 68,20
004E4:  DATA 6D,65
004E6:  DATA 6D,6F
004E8:  DATA 72,79
004EA:  DATA 20,63
004EC:  DATA 68,6F
004EE:  DATA 73,65
004F0:  DATA 6E,0A
004F2:  DATA 00,00
004F4:  DATA 43,4F
004F6:  DATA 4D,20
004F8:  DATA 73,68
004FA:  DATA 61,72
004FC:  DATA 65,64
004FE:  DATA 20,66
00500:  DATA 6C,61
00502:  DATA 73,68
00504:  DATA 20,6D
00506:  DATA 65,6D
00508:  DATA 6F,72
0050A:  DATA 79,20
0050C:  DATA 63,68
0050E:  DATA 6F,73
00510:  DATA 65,6E
00512:  DATA 0A,00
00514:  DATA 41,44
00516:  DATA 43,53
00518:  DATA 20,73
0051A:  DATA 68,61
0051C:  DATA 72,65
0051E:  DATA 64,20
00520:  DATA 66,6C
00522:  DATA 61,73
00524:  DATA 68,20
00526:  DATA 6D,65
00528:  DATA 6D,6F
0052A:  DATA 72,79
0052C:  DATA 20,63
0052E:  DATA 68,6F
00530:  DATA 73,65
00532:  DATA 6E,0A
00534:  DATA 00,00
00536:  DATA 4F,56
00538:  DATA 43,41
0053A:  DATA 4D,20
0053C:  DATA 73,68
0053E:  DATA 61,72
00540:  DATA 65,64
00542:  DATA 20,66
00544:  DATA 6C,61
00546:  DATA 73,68
00548:  DATA 20,6D
0054A:  DATA 65,6D
0054C:  DATA 6F,72
0054E:  DATA 79,20
00550:  DATA 63,68
00552:  DATA 6F,73
00554:  DATA 65,6E
00556:  DATA 0A,00
00558:  DATA 4D,56
0055A:  DATA 43,41
0055C:  DATA 4D,20
0055E:  DATA 73,68
00560:  DATA 61,72
00562:  DATA 65,64
00564:  DATA 20,66
00566:  DATA 6C,61
00568:  DATA 73,68
0056A:  DATA 20,6D
0056C:  DATA 65,6D
0056E:  DATA 6F,72
00570:  DATA 79,20
00572:  DATA 63,68
00574:  DATA 6F,73
00576:  DATA 65,6E
00578:  DATA 0A,00
0057A:  DATA 49,6E
0057C:  DATA 76,61
0057E:  DATA 6C,69
00580:  DATA 64,20
00582:  DATA 66,6C
00584:  DATA 61,73
00586:  DATA 68,20
00588:  DATA 6D,65
0058A:  DATA 6D,6F
0058C:  DATA 72,79
0058E:  DATA 20,6F
00590:  DATA 70,74
00592:  DATA 69,6F
00594:  DATA 6E,2E
00596:  DATA 20,50
00598:  DATA 6C,65
0059A:  DATA 61,73
0059C:  DATA 65,20
0059E:  DATA 74,72
005A0:  DATA 79,20
005A2:  DATA 61,67
005A4:  DATA 61,69
005A6:  DATA 6E,2E
005A8:  DATA 0A,00
005AA:  DATA 53,65
005AC:  DATA 74,74
005AE:  DATA 69,6E
005B0:  DATA 67,73
005B2:  DATA 20,6F
005B4:  DATA 66,20
005B6:  DATA 52,54
005B8:  DATA 43,20
005BA:  DATA 63,68
005BC:  DATA 6F,73
005BE:  DATA 65,6E
005C0:  DATA 0A,00
005C2:  DATA 20,20
005C4:  DATA 20,20
005C6:  DATA 70,72
005C8:  DATA 65,73
005CA:  DATA 73,20
005CC:  DATA 61,3A
005CE:  DATA 20,74
005D0:  DATA 6F,20
005D2:  DATA 72,65
005D4:  DATA 73,65
005D6:  DATA 74,20
005D8:  DATA 74,68
005DA:  DATA 65,20
005DC:  DATA 52,54
005DE:  DATA 43,20
005E0:  DATA 2F,61
005E2:  DATA 6C,6C
005E4:  DATA 20,63
005E6:  DATA 75,72
005E8:  DATA 72,65
005EA:  DATA 6E,74
005EC:  DATA 20,74
005EE:  DATA 69,6D
005F0:  DATA 65,20
005F2:  DATA 77,69
005F4:  DATA 6C,6C
005F6:  DATA 20,62
005F8:  DATA 65,20
005FA:  DATA 73,65
005FC:  DATA 74,20
005FE:  DATA 7A,65
00600:  DATA 72,6F
00602:  DATA 2F,0A
00604:  DATA 00,00
00606:  DATA 20,20
00608:  DATA 20,20
0060A:  DATA 70,72
0060C:  DATA 65,73
0060E:  DATA 73,20
00610:  DATA 62,3A
00612:  DATA 20,64
00614:  DATA 69,73
00616:  DATA 70,6C
00618:  DATA 61,79
0061A:  DATA 20,63
0061C:  DATA 75,72
0061E:  DATA 72,65
00620:  DATA 6E,74
00622:  DATA 20,74
00624:  DATA 69,6D
00626:  DATA 65,0A
00628:  DATA 00,00
0062A:  DATA 4E,6F
0062C:  DATA 77,20
0062E:  DATA 74,69
00630:  DATA 6D,65
00632:  DATA 20,69
00634:  DATA 73,0A
00636:  DATA 00,00
00638:  DATA 0D,25
0063A:  DATA 30,32
0063C:  DATA 75,2F
0063E:  DATA 25,30
00640:  DATA 32,75
00642:  DATA 2F,32
00644:  DATA 30,25
00646:  DATA 30,32
00648:  DATA 75,20
0064A:  DATA 25,30
0064C:  DATA 32,75
0064E:  DATA 3A,25
00650:  DATA 30,32
00652:  DATA 75,3A
00654:  DATA 25,30
00656:  DATA 32,75
00658:  DATA 00,00
0065A:  DATA 54,69
0065C:  DATA 6D,65
0065E:  DATA 20,63
00660:  DATA 68,61
00662:  DATA 6E,67
00664:  DATA 69,6E
00666:  DATA 67,20
00668:  DATA 66,75
0066A:  DATA 6E,63
0066C:  DATA 74,69
0066E:  DATA 6F,6E
00670:  DATA 20,61
00672:  DATA 63,74
00674:  DATA 69,76
00676:  DATA 61,74
00678:  DATA 65,64
0067A:  DATA 0A,00
0067C:  DATA 54,69
0067E:  DATA 6D,65
00680:  DATA 20,73
00682:  DATA 75,63
00684:  DATA 63,65
00686:  DATA 73,73
00688:  DATA 66,75
0068A:  DATA 6C,6C
0068C:  DATA 79,20
0068E:  DATA 63,68
00690:  DATA 61,6E
00692:  DATA 67,65
00694:  DATA 64,2E
00696:  DATA 20,43
00698:  DATA 75,72
0069A:  DATA 72,65
0069C:  DATA 6E,74
0069E:  DATA 20,74
006A0:  DATA 69,6D
006A2:  DATA 65,20
006A4:  DATA 69,73
006A6:  DATA 3A,0A
006A8:  DATA 00,00
006AA:  DATA 0D,25
006AC:  DATA 30,32
006AE:  DATA 75,2F
006B0:  DATA 25,30
006B2:  DATA 32,75
006B4:  DATA 2F,32
006B6:  DATA 30,25
006B8:  DATA 30,32
006BA:  DATA 75,20
006BC:  DATA 25,30
006BE:  DATA 32,75
006C0:  DATA 3A,25
006C2:  DATA 30,32
006C4:  DATA 75,3A
006C6:  DATA 25,30
006C8:  DATA 32,75
006CA:  DATA 00,00
006CC:  DATA 0D,25
006CE:  DATA 30,32
006D0:  DATA 75,2F
006D2:  DATA 25,30
006D4:  DATA 32,75
006D6:  DATA 2F,32
006D8:  DATA 30,25
006DA:  DATA 30,32
006DC:  DATA 75,20
006DE:  DATA 25,30
006E0:  DATA 32,75
006E2:  DATA 3A,25
006E4:  DATA 30,32
006E6:  DATA 75,3A
006E8:  DATA 25,30
006EA:  DATA 32,75
006EC:  DATA 00,00
006EE:  DATA 49,6E
006F0:  DATA 76,61
006F2:  DATA 6C,69
006F4:  DATA 64,20
006F6:  DATA 49,4F
006F8:  DATA 20,6F
006FA:  DATA 70,74
006FC:  DATA 69,6F
006FE:  DATA 6E,2E
00700:  DATA 20,50
00702:  DATA 6C,65
00704:  DATA 61,73
00706:  DATA 65,20
00708:  DATA 74,72
0070A:  DATA 79,20
0070C:  DATA 61,67
0070E:  DATA 61,69
00710:  DATA 6E,2E
00712:  DATA 0A,00
00714:  DATA 49,4F
00716:  DATA 20,63
00718:  DATA 6F,6E
0071A:  DATA 74,72
0071C:  DATA 6F,6C
0071E:  DATA 20,63
00720:  DATA 68,6F
00722:  DATA 73,65
00724:  DATA 6E,0A
00726:  DATA 00,00
00728:  DATA 20,20
0072A:  DATA 20,20
0072C:  DATA 70,72
0072E:  DATA 65,73
00730:  DATA 73,20
00732:  DATA 61,3A
00734:  DATA 20,54
00736:  DATA 6F,67
00738:  DATA 67,6C
0073A:  DATA 65,20
0073C:  DATA 45,4E
0073E:  DATA 5F,53
00740:  DATA 55,50
00742:  DATA 5F,33
00744:  DATA 56,33
00746:  DATA 5F,31
00748:  DATA 20,2F
0074A:  DATA 69,73
0074C:  DATA 20,63
0074E:  DATA 75,72
00750:  DATA 72,65
00752:  DATA 6E,74
00754:  DATA 6C,79
00756:  DATA 2F,00
00758:  DATA 48,49
0075A:  DATA 47,48
0075C:  DATA 0A,00
0075E:  DATA 4C,4F
00760:  DATA 57,0A
00762:  DATA 00,00
00764:  DATA 49,6E
00766:  DATA 76,61
00768:  DATA 6C,69
0076A:  DATA 64,0A
0076C:  DATA 00,00
0076E:  DATA 20,20
00770:  DATA 20,20
00772:  DATA 70,72
00774:  DATA 65,73
00776:  DATA 73,20
00778:  DATA 62,3A
0077A:  DATA 20,54
0077C:  DATA 6F,67
0077E:  DATA 67,6C
00780:  DATA 65,20
00782:  DATA 45,4E
00784:  DATA 5F,53
00786:  DATA 55,50
00788:  DATA 5F,33
0078A:  DATA 56,33
0078C:  DATA 5F,32
0078E:  DATA 20,2F
00790:  DATA 69,73
00792:  DATA 20,63
00794:  DATA 75,72
00796:  DATA 72,65
00798:  DATA 6E,74
0079A:  DATA 6C,79
0079C:  DATA 2F,00
0079E:  DATA 48,49
007A0:  DATA 47,48
007A2:  DATA 0A,00
007A4:  DATA 4C,4F
007A6:  DATA 57,0A
007A8:  DATA 00,00
007AA:  DATA 49,6E
007AC:  DATA 76,61
007AE:  DATA 6C,69
007B0:  DATA 64,0A
007B2:  DATA 00,00
007B4:  DATA 20,20
007B6:  DATA 20,20
007B8:  DATA 70,72
007BA:  DATA 65,73
007BC:  DATA 73,20
007BE:  DATA 63,3A
007C0:  DATA 20,54
007C2:  DATA 6F,67
007C4:  DATA 67,6C
007C6:  DATA 65,20
007C8:  DATA 45,4E
007CA:  DATA 5F,53
007CC:  DATA 55,50
007CE:  DATA 5F,33
007D0:  DATA 56,33
007D2:  DATA 5F,44
007D4:  DATA 41,51
007D6:  DATA 20,2F
007D8:  DATA 69,73
007DA:  DATA 20,63
007DC:  DATA 75,72
007DE:  DATA 72,65
007E0:  DATA 6E,74
007E2:  DATA 6C,79
007E4:  DATA 2F,00
007E6:  DATA 48,49
007E8:  DATA 47,48
007EA:  DATA 0A,00
007EC:  DATA 4C,4F
007EE:  DATA 57,0A
007F0:  DATA 00,00
007F2:  DATA 49,6E
007F4:  DATA 76,61
007F6:  DATA 6C,69
007F8:  DATA 64,0A
007FA:  DATA 00,00
007FC:  DATA 20,20
007FE:  DATA 20,20
00800:  DATA 70,72
00802:  DATA 65,73
00804:  DATA 73,20
00806:  DATA 64,3A
00808:  DATA 20,54
0080A:  DATA 6F,67
0080C:  DATA 67,6C
0080E:  DATA 65,20
00810:  DATA 45,4E
00812:  DATA 5F,53
00814:  DATA 55,50
00816:  DATA 5F,55
00818:  DATA 4E,52
0081A:  DATA 45,47
0081C:  DATA 20,2F
0081E:  DATA 69,73
00820:  DATA 20,63
00822:  DATA 75,72
00824:  DATA 72,65
00826:  DATA 6E,74
00828:  DATA 6C,79
0082A:  DATA 2F,00
0082C:  DATA 48,49
0082E:  DATA 47,48
00830:  DATA 0A,00
00832:  DATA 4C,4F
00834:  DATA 57,0A
00836:  DATA 00,00
00838:  DATA 49,6E
0083A:  DATA 76,61
0083C:  DATA 6C,69
0083E:  DATA 64,0A
00840:  DATA 00,00
00842:  DATA 20,20
00844:  DATA 20,20
00846:  DATA 70,72
00848:  DATA 65,73
0084A:  DATA 73,20
0084C:  DATA 65,3A
0084E:  DATA 20,54
00850:  DATA 6F,67
00852:  DATA 67,6C
00854:  DATA 65,20
00856:  DATA 45,4E
00858:  DATA 5F,53
0085A:  DATA 55,50
0085C:  DATA 5F,35
0085E:  DATA 56,30
00860:  DATA 20,2F
00862:  DATA 69,73
00864:  DATA 20,63
00866:  DATA 75,72
00868:  DATA 72,65
0086A:  DATA 6E,74
0086C:  DATA 6C,79
0086E:  DATA 2F,00
00870:  DATA 48,49
00872:  DATA 47,48
00874:  DATA 0A,00
00876:  DATA 4C,4F
00878:  DATA 57,0A
0087A:  DATA 00,00
0087C:  DATA 49,6E
0087E:  DATA 76,61
00880:  DATA 6C,69
00882:  DATA 64,0A
00884:  DATA 00,00
00886:  DATA 20,20
00888:  DATA 20,20
0088A:  DATA 70,72
0088C:  DATA 65,73
0088E:  DATA 73,20
00890:  DATA 66,3A
00892:  DATA 20,54
00894:  DATA 6F,67
00896:  DATA 67,6C
00898:  DATA 65,20
0089A:  DATA 4B,49
0089C:  DATA 4C,4C
0089E:  DATA 5F,53
008A0:  DATA 57,49
008A2:  DATA 54,43
008A4:  DATA 48,20
008A6:  DATA 2F,69
008A8:  DATA 73,20
008AA:  DATA 63,75
008AC:  DATA 72,72
008AE:  DATA 65,6E
008B0:  DATA 74,6C
008B2:  DATA 79,2F
008B4:  DATA 00,00
008B6:  DATA 48,49
008B8:  DATA 47,48
008BA:  DATA 0A,00
008BC:  DATA 4C,4F
008BE:  DATA 57,0A
008C0:  DATA 00,00
008C2:  DATA 49,6E
008C4:  DATA 76,61
008C6:  DATA 6C,69
008C8:  DATA 64,0A
008CA:  DATA 00,00
008CC:  DATA 20,20
008CE:  DATA 20,20
008D0:  DATA 70,72
008D2:  DATA 65,73
008D4:  DATA 73,20
008D6:  DATA 67,3A
008D8:  DATA 20,54
008DA:  DATA 6F,67
008DC:  DATA 67,6C
008DE:  DATA 65,20
008E0:  DATA 4D,56
008E2:  DATA 43,41
008E4:  DATA 4D,5F
008E6:  DATA 50,57
008E8:  DATA 52,20
008EA:  DATA 2F,69
008EC:  DATA 73,20
008EE:  DATA 63,75
008F0:  DATA 72,72
008F2:  DATA 65,6E
008F4:  DATA 74,6C
008F6:  DATA 79,2F
008F8:  DATA 00,00
008FA:  DATA 48,49
008FC:  DATA 47,48
008FE:  DATA 0A,00
00900:  DATA 4C,4F
00902:  DATA 57,0A
00904:  DATA 00,00
00906:  DATA 49,6E
00908:  DATA 76,61
0090A:  DATA 6C,69
0090C:  DATA 64,0A
0090E:  DATA 00,00
00910:  DATA 20,20
00912:  DATA 20,20
00914:  DATA 70,72
00916:  DATA 65,73
00918:  DATA 73,20
0091A:  DATA 68,3A
0091C:  DATA 20,54
0091E:  DATA 6F,67
00920:  DATA 67,6C
00922:  DATA 65,20
00924:  DATA 4F,56
00926:  DATA 43,41
00928:  DATA 4D,5F
0092A:  DATA 50,57
0092C:  DATA 52,20
0092E:  DATA 2F,69
00930:  DATA 73,20
00932:  DATA 63,75
00934:  DATA 72,72
00936:  DATA 65,6E
00938:  DATA 74,6C
0093A:  DATA 79,2F
0093C:  DATA 00,00
0093E:  DATA 48,49
00940:  DATA 47,48
00942:  DATA 0A,00
00944:  DATA 4C,4F
00946:  DATA 57,0A
00948:  DATA 00,00
0094A:  DATA 49,6E
0094C:  DATA 76,61
0094E:  DATA 6C,69
00950:  DATA 64,0A
00952:  DATA 00,00
00954:  DATA 20,20
00956:  DATA 20,20
00958:  DATA 70,72
0095A:  DATA 65,73
0095C:  DATA 73,20
0095E:  DATA 69,3A
00960:  DATA 20,54
00962:  DATA 6F,67
00964:  DATA 67,6C
00966:  DATA 65,20
00968:  DATA 41,44
0096A:  DATA 43,53
0096C:  DATA 5F,50
0096E:  DATA 57,52
00970:  DATA 20,2F
00972:  DATA 69,73
00974:  DATA 20,63
00976:  DATA 75,72
00978:  DATA 72,65
0097A:  DATA 6E,74
0097C:  DATA 6C,79
0097E:  DATA 2F,00
00980:  DATA 48,49
00982:  DATA 47,48
00984:  DATA 0A,00
00986:  DATA 4C,4F
00988:  DATA 57,0A
0098A:  DATA 00,00
0098C:  DATA 49,6E
0098E:  DATA 76,61
00990:  DATA 6C,69
00992:  DATA 64,0A
00994:  DATA 00,00
00996:  DATA 20,20
00998:  DATA 20,20
0099A:  DATA 70,72
0099C:  DATA 65,73
0099E:  DATA 73,20
009A0:  DATA 6A,3A
009A2:  DATA 20,54
009A4:  DATA 6F,67
009A6:  DATA 67,6C
009A8:  DATA 65,20
009AA:  DATA 61,6C
009AC:  DATA 6C,20
009AE:  DATA 50,69
009B0:  DATA 6E,73
009B2:  DATA 00,00
009B4:  DATA 49,6E
009B6:  DATA 76,61
009B8:  DATA 6C,69
009BA:  DATA 64,20
009BC:  DATA 49,4F
009BE:  DATA 20,6F
009C0:  DATA 70,74
009C2:  DATA 69,6F
009C4:  DATA 6E,2E
009C6:  DATA 20,50
009C8:  DATA 6C,65
009CA:  DATA 61,73
009CC:  DATA 65,20
009CE:  DATA 74,72
009D0:  DATA 79,20
009D2:  DATA 61,67
009D4:  DATA 61,69
009D6:  DATA 6E,2E
009D8:  DATA 0A,00
009DA:  DATA 20,5F
009DC:  DATA 5F,20
009DE:  DATA 20,5F
009E0:  DATA 5F,20
009E2:  DATA 5F,5F
009E4:  DATA 5F,5F
009E6:  DATA 5F,20
009E8:  DATA 5F,20
009EA:  DATA 20,20
009EC:  DATA 5F,20
009EE:  DATA 5F,20
009F0:  DATA 20,20
009F2:  DATA 5F,20
009F4:  DATA 20,20
009F6:  DATA 5F,5F
009F8:  DATA 5F,5F
009FA:  DATA 5F,20
009FC:  DATA 20,20
009FE:  DATA 20,20
00A00:  DATA 20,20
00A02:  DATA 20,20
00A04:  DATA 20,20
00A06:  DATA 20,20
00A08:  DATA 20,20
00A0A:  DATA 20,20
00A0C:  DATA 5F,20
00A0E:  DATA 20,20
00A10:  DATA 5F,20
00A12:  DATA 20,20
00A14:  DATA 20,20
00A16:  DATA 20,20
00A18:  DATA 20,20
00A1A:  DATA 20,20
00A1C:  DATA 20,20
00A1E:  DATA 0A,00
00A20:  DATA 7C,20
00A22:  DATA 20,5C
00A24:  DATA 2F,20
00A26:  DATA 20,7C
00A28:  DATA 20,5F
00A2A:  DATA 5F,5F
00A2C:  DATA 5F,7C
00A2E:  DATA 20,5C
00A30:  DATA 20,7C
00A32:  DATA 20,7C
00A34:  DATA 20,7C
00A36:  DATA 20,7C
00A38:  DATA 20,7C
00A3A:  DATA 20,7C
00A3C:  DATA 20,20
00A3E:  DATA 5F,5F
00A40:  DATA 5F,7C
00A42:  DATA 20,20
00A44:  DATA 20,5F
00A46:  DATA 20,5F
00A48:  DATA 20,5F
00A4A:  DATA 5F,20
00A4C:  DATA 20,20
00A4E:  DATA 5F,5F
00A50:  DATA 5F,7C
00A52:  DATA 20,7C
00A54:  DATA 5F,28
00A56:  DATA 5F,29
00A58:  DATA 20,5F
00A5A:  DATA 5F,5F
00A5C:  DATA 20,20
00A5E:  DATA 5F,20
00A60:  DATA 5F,5F
00A62:  DATA 20,20
00A64:  DATA 0A,00
00A66:  DATA 7C,20
00A68:  DATA 7C,5C
00A6A:  DATA 2F,7C
00A6C:  DATA 20,7C
00A6E:  DATA 20,20
00A70:  DATA 5F,7C
00A72:  DATA 20,7C
00A74:  DATA 20,20
00A76:  DATA 5C,7C
00A78:  DATA 20,7C
00A7A:  DATA 20,7C
00A7C:  DATA 20,7C
00A7E:  DATA 20,7C
00A80:  DATA 20,7C
00A82:  DATA 20,7C
00A84:  DATA 5F,20
00A86:  DATA 7C,20
00A88:  DATA 7C,20
00A8A:  DATA 7C,20
00A8C:  DATA 7C,20
00A8E:  DATA 27,5F
00A90:  DATA 20,5C
00A92:  DATA 20,2F
00A94:  DATA 20,5F
00A96:  DATA 5F,7C
00A98:  DATA 20,5F
00A9A:  DATA 5F,7C
00A9C:  DATA 20,7C
00A9E:  DATA 2F,20
00AA0:  DATA 5F,20
00AA2:  DATA 5C,7C
00AA4:  DATA 20,27
00AA6:  DATA 5F,20
00AA8:  DATA 5C,20
00AAA:  DATA 0A,00
00AAC:  DATA 7C,20
00AAE:  DATA 7C,20
00AB0:  DATA 20,7C
00AB2:  DATA 20,7C
00AB4:  DATA 20,7C
00AB6:  DATA 5F,5F
00AB8:  DATA 5F,7C
00ABA:  DATA 20,7C
00ABC:  DATA 5C,20
00ABE:  DATA 20,7C
00AC0:  DATA 20,7C
00AC2:  DATA 5F,7C
00AC4:  DATA 20,7C
00AC6:  DATA 20,7C
00AC8:  DATA 20,20
00ACA:  DATA 5F,7C
00ACC:  DATA 7C,20
00ACE:  DATA 7C,5F
00AD0:  DATA 7C,20
00AD2:  DATA 7C,20
00AD4:  DATA 7C,20
00AD6:  DATA 7C,20
00AD8:  DATA 7C,20
00ADA:  DATA 28,5F
00ADC:  DATA 5F,7C
00ADE:  DATA 20,7C
00AE0:  DATA 5F,7C
00AE2:  DATA 20,7C
00AE4:  DATA 20,28
00AE6:  DATA 5F,29
00AE8:  DATA 20,7C
00AEA:  DATA 20,7C
00AEC:  DATA 20,7C
00AEE:  DATA 20,7C
00AF0:  DATA 0A,00
00AF2:  DATA 7C,5F
00AF4:  DATA 7C,20
00AF6:  DATA 5F,7C
00AF8:  DATA 5F,7C
00AFA:  DATA 5F,5F
00AFC:  DATA 5F,5F
00AFE:  DATA 5F,7C
00B00:  DATA 5F,7C
00B02:  DATA 20,5C
00B04:  DATA 5F,7C
00B06:  DATA 5C,5F
00B08:  DATA 5F,5F
00B0A:  DATA 2F,20
00B0C:  DATA 20,7C
00B0E:  DATA 5F,7C
00B10:  DATA 5F,20
00B12:  DATA 20,5C
00B14:  DATA 5F,5F
00B16:  DATA 2C,5F
00B18:  DATA 7C,5F
00B1A:  DATA 7C,20
00B1C:  DATA 7C,5F
00B1E:  DATA 7C,5C
00B20:  DATA 5F,5F
00B22:  DATA 5F,7C
00B24:  DATA 5C,5F
00B26:  DATA 5F,7C
00B28:  DATA 5F,7C
00B2A:  DATA 5C,5F
00B2C:  DATA 5F,5F
00B2E:  DATA 2F,7C
00B30:  DATA 5F,7C
00B32:  DATA 20,7C
00B34:  DATA 5F,7C
00B36:  DATA 0A,00
00B38:  DATA 20,20
00B3A:  DATA 20,2F
00B3C:  DATA 20,5C
00B3E:  DATA 20,20
00B40:  DATA 20,5F
00B42:  DATA 5F,5F
00B44:  DATA 7C,20
00B46:  DATA 7C,5F
00B48:  DATA 28,5F
00B4A:  DATA 29,5F
00B4C:  DATA 20,20
00B4E:  DATA 20,5F
00B50:  DATA 5F,5F
00B52:  DATA 5F,20
00B54:  DATA 5F,7C
00B56:  DATA 20,7C
00B58:  DATA 5F,20
00B5A:  DATA 5F,5F
00B5C:  DATA 5F,20
00B5E:  DATA 20,5F
00B60:  DATA 5F,7C
00B62:  DATA 20,7C
00B64:  DATA 20,7C
00B66:  DATA 20,20
00B68:  DATA 20,20
00B6A:  DATA 20,20
00B6C:  DATA 20,20
00B6E:  DATA 20,20
00B70:  DATA 20,20
00B72:  DATA 20,20
00B74:  DATA 20,20
00B76:  DATA 20,20
00B78:  DATA 20,20
00B7A:  DATA 20,20
00B7C:  DATA 0A,00
00B7E:  DATA 20,20
00B80:  DATA 2F,20
00B82:  DATA 5F,20
00B84:  DATA 5C,20
00B86:  DATA 2F,20
00B88:  DATA 5F,5F
00B8A:  DATA 7C,20
00B8C:  DATA 5F,5F
00B8E:  DATA 7C,20
00B90:  DATA 5C,20
00B92:  DATA 5C,20
00B94:  DATA 2F,20
00B96:  DATA 2F,20
00B98:  DATA 5F,60
00B9A:  DATA 20,7C
00B9C:  DATA 20,5F
00B9E:  DATA 5F,2F
00BA0:  DATA 20,5F
00BA2:  DATA 20,5C
00BA4:  DATA 2F,20
00BA6:  DATA 5F,60
00BA8:  DATA 20,7C
00BAA:  DATA 20,7C
00BAC:  DATA 20,20
00BAE:  DATA 20,20
00BB0:  DATA 20,20
00BB2:  DATA 20,20
00BB4:  DATA 20,20
00BB6:  DATA 20,20
00BB8:  DATA 20,20
00BBA:  DATA 20,20
00BBC:  DATA 20,20
00BBE:  DATA 20,20
00BC0:  DATA 20,20
00BC2:  DATA 0A,00
00BC4:  DATA 20,2F
00BC6:  DATA 20,5F
00BC8:  DATA 5F,5F
00BCA:  DATA 20,5C
00BCC:  DATA 20,28
00BCE:  DATA 5F,5F
00BD0:  DATA 7C,20
00BD2:  DATA 7C,5F
00BD4:  DATA 7C,20
00BD6:  DATA 7C,5C
00BD8:  DATA 20,56
00BDA:  DATA 20,2F
00BDC:  DATA 20,28
00BDE:  DATA 5F,7C
00BE0:  DATA 20,7C
00BE2:  DATA 20,7C
00BE4:  DATA 7C,20
00BE6:  DATA 20,5F
00BE8:  DATA 5F,2F
00BEA:  DATA 20,28
00BEC:  DATA 5F,7C
00BEE:  DATA 20,7C
00BF0:  DATA 5F,7C
00BF2:  DATA 20,20
00BF4:  DATA 20,20
00BF6:  DATA 20,20
00BF8:  DATA 20,20
00BFA:  DATA 20,20
00BFC:  DATA 20,20
00BFE:  DATA 20,20
00C00:  DATA 20,20
00C02:  DATA 20,20
00C04:  DATA 20,20
00C06:  DATA 20,20
00C08:  DATA 0A,00
00C0A:  DATA 2F,5F
00C0C:  DATA 2F,20
00C0E:  DATA 20,20
00C10:  DATA 5C,5F
00C12:  DATA 5C,5F
00C14:  DATA 5F,5F
00C16:  DATA 7C,5C
00C18:  DATA 5F,5F
00C1A:  DATA 7C,5F
00C1C:  DATA 7C,20
00C1E:  DATA 5C,5F
00C20:  DATA 2F,20
00C22:  DATA 5C,5F
00C24:  DATA 5F,2C
00C26:  DATA 5F,7C
00C28:  DATA 5C,5F
00C2A:  DATA 5F,5C
00C2C:  DATA 5F,5F
00C2E:  DATA 5F,7C
00C30:  DATA 5C,5F
00C32:  DATA 5F,2C
00C34:  DATA 5F,28
00C36:  DATA 5F,29
00C38:  DATA 20,20
00C3A:  DATA 20,20
00C3C:  DATA 20,20
00C3E:  DATA 20,20
00C40:  DATA 20,20
00C42:  DATA 20,20
00C44:  DATA 20,20
00C46:  DATA 20,20
00C48:  DATA 20,20
00C4A:  DATA 20,20
00C4C:  DATA 20,20
00C4E:  DATA 0A,00
00C50:  DATA 0A,2D
00C52:  DATA 2D,2D
00C54:  DATA 2D,2D
00C56:  DATA 2D,2D
00C58:  DATA 2D,2D
00C5A:  DATA 2D,2D
00C5C:  DATA 2D,2D
00C5E:  DATA 2D,2D
00C60:  DATA 2D,2D
00C62:  DATA 4D,61
00C64:  DATA 69,6E
00C66:  DATA 20,4D
00C68:  DATA 65,6E
00C6A:  DATA 75,2D
00C6C:  DATA 2D,2D
00C6E:  DATA 2D,2D
00C70:  DATA 2D,2D
00C72:  DATA 2D,2D
00C74:  DATA 2D,2D
00C76:  DATA 2D,2D
00C78:  DATA 2D,2D
00C7A:  DATA 2D,2D
00C7C:  DATA 0A,00
00C7E:  DATA 20,20
00C80:  DATA 20,20
00C82:  DATA 70,72
00C84:  DATA 65,73
00C86:  DATA 73,20
00C88:  DATA 61,3A
00C8A:  DATA 20,47
00C8C:  DATA 65,74
00C8E:  DATA 20,48
00C90:  DATA 6F,75
00C92:  DATA 73,65
00C94:  DATA 20,6B
00C96:  DATA 65,65
00C98:  DATA 70,69
00C9A:  DATA 6E,67
00C9C:  DATA 20,64
00C9E:  DATA 61,74
00CA0:  DATA 61,0A
00CA2:  DATA 00,00
00CA4:  DATA 20,20
00CA6:  DATA 20,20
00CA8:  DATA 70,72
00CAA:  DATA 65,73
00CAC:  DATA 73,20
00CAE:  DATA 62,3A
00CB0:  DATA 20,45
00CB2:  DATA 50,53
00CB4:  DATA 20,50
00CB6:  DATA 6F,77
00CB8:  DATA 65,72
00CBA:  DATA 20,6F
00CBC:  DATA 75,74
00CBE:  DATA 70,75
00CC0:  DATA 74,20
00CC2:  DATA 63,6F
00CC4:  DATA 6E,74
00CC6:  DATA 72,6F
00CC8:  DATA 6C,0A
00CCA:  DATA 00,00
00CCC:  DATA 20,20
00CCE:  DATA 20,20
00CD0:  DATA 70,72
00CD2:  DATA 65,73
00CD4:  DATA 73,20
00CD6:  DATA 63,3A
00CD8:  DATA 20,48
00CDA:  DATA 6F,75
00CDC:  DATA 73,65
00CDE:  DATA 20,6B
00CE0:  DATA 65,65
00CE2:  DATA 70,69
00CE4:  DATA 6E,67
00CE6:  DATA 20,64
00CE8:  DATA 61,74
00CEA:  DATA 61,20
00CEC:  DATA 63,6F
00CEE:  DATA 6C,6C
00CF0:  DATA 65,63
00CF2:  DATA 74,69
00CF4:  DATA 6F,6E
00CF6:  DATA 0A,00
00CF8:  DATA 20,20
00CFA:  DATA 20,20
00CFC:  DATA 70,72
00CFE:  DATA 65,73
00D00:  DATA 73,20
00D02:  DATA 64,3A
00D04:  DATA 20,43
00D06:  DATA 68,65
00D08:  DATA 63,6B
00D0A:  DATA 20,46
00D0C:  DATA 6C,61
00D0E:  DATA 73,68
00D10:  DATA 20,4D
00D12:  DATA 65,6D
00D14:  DATA 6F,72
00D16:  DATA 69,65
00D18:  DATA 73,0A
00D1A:  DATA 00,00
00D1C:  DATA 20,20
00D1E:  DATA 20,20
00D20:  DATA 70,72
00D22:  DATA 65,73
00D24:  DATA 73,20
00D26:  DATA 65,3A
00D28:  DATA 20,53
00D2A:  DATA 65,65
00D2C:  DATA 20,73
00D2E:  DATA 61,74
00D30:  DATA 65,6C
00D32:  DATA 6C,69
00D34:  DATA 74,65
00D36:  DATA 20,4C
00D38:  DATA 6F,67
00D3A:  DATA 0A,00
00D3C:  DATA 20,20
00D3E:  DATA 20,20
00D40:  DATA 70,72
00D42:  DATA 65,73
00D44:  DATA 73,20
00D46:  DATA 66,3A
00D48:  DATA 20,53
00D4A:  DATA 65,74
00D4C:  DATA 74,69
00D4E:  DATA 6E,67
00D50:  DATA 73,20
00D52:  DATA 6F,66
00D54:  DATA 20,52
00D56:  DATA 54,43
00D58:  DATA 0A,00
00D5A:  DATA 20,20
00D5C:  DATA 20,20
00D5E:  DATA 70,72
00D60:  DATA 65,73
00D62:  DATA 73,20
00D64:  DATA 67,3A
00D66:  DATA 20,53
00D68:  DATA 61,74
00D6A:  DATA 65,6C
00D6C:  DATA 6C,69
00D6E:  DATA 74,65
00D70:  DATA 20,6C
00D72:  DATA 6F,67
00D74:  DATA 20,64
00D76:  DATA 6F,77
00D78:  DATA 6E,2D
00D7A:  DATA 6C,69
00D7C:  DATA 6E,6B
00D7E:  DATA 20,63
00D80:  DATA 6F,6D
00D82:  DATA 6D,61
00D84:  DATA 6E,64
00D86:  DATA 0A,00
00D88:  DATA 20,20
00D8A:  DATA 20,20
00D8C:  DATA 70,72
00D8E:  DATA 65,73
00D90:  DATA 73,20
00D92:  DATA 68,3A
00D94:  DATA 20,49
00D96:  DATA 48,43
00D98:  DATA 20,4D
00D9A:  DATA 69,73
00D9C:  DATA 73,69
00D9E:  DATA 6F,6E
00DA0:  DATA 20,73
00DA2:  DATA 74,61
00DA4:  DATA 72,74
00DA6:  DATA 0A,00
00DA8:  DATA 20,20
00DAA:  DATA 20,20
00DAC:  DATA 70,72
00DAE:  DATA 65,73
00DB0:  DATA 73,20
00DB2:  DATA 69,3A
00DB4:  DATA 20,53
00DB6:  DATA 45,4C
00DB8:  DATA 20,63
00DBA:  DATA 75,72
00DBC:  DATA 72,65
00DBE:  DATA 6E,74
00DC0:  DATA 20,4D
00DC2:  DATA 65,61
00DC4:  DATA 73,75
00DC6:  DATA 72,65
00DC8:  DATA 6D,65
00DCA:  DATA 6E,74
00DCC:  DATA 0A,00
00DCE:  DATA 20,20
00DD0:  DATA 20,20
00DD2:  DATA 70,72
00DD4:  DATA 65,73
00DD6:  DATA 73,20
00DD8:  DATA 6A,3A
00DDA:  DATA 20,48
00DDC:  DATA 38,20
00DDE:  DATA 43,4F
00DE0:  DATA 4D,20
00DE2:  DATA 52,65
00DE4:  DATA 73,65
00DE6:  DATA 74,0A
00DE8:  DATA 00,00
00DEA:  DATA 20,20
00DEC:  DATA 20,20
00DEE:  DATA 70,72
00DF0:  DATA 65,73
00DF2:  DATA 73,20
00DF4:  DATA 69,3A
00DF6:  DATA 20,55
00DF8:  DATA 41,52
00DFA:  DATA 54,20
00DFC:  DATA 72,65
00DFE:  DATA 70,65
00E00:  DATA 61,74
00E02:  DATA 65,72
00E04:  DATA 20,6F
00E06:  DATA 66,20
00E08:  DATA 45,50
00E0A:  DATA 53,0A
00E0C:  DATA 00,00
00E0E:  DATA 20,20
00E10:  DATA 20,20
00E12:  DATA 70,72
00E14:  DATA 65,73
00E16:  DATA 73,20
00E18:  DATA 78,3A
00E1A:  DATA 20,45
00E1C:  DATA 78,69
00E1E:  DATA 74,20
00E20:  DATA 4D,61
00E22:  DATA 69,6E
00E24:  DATA 20,4D
00E26:  DATA 65,6E
00E28:  DATA 75,0A
00E2A:  DATA 00,00
00E2C:  DATA 20,20
00E2E:  DATA 20,20
00E30:  DATA 44,4F
00E32:  DATA 20,4E
00E34:  DATA 4F,54
00E36:  DATA 20,55
00E38:  DATA 53,45
00E3A:  DATA 20,43
00E3C:  DATA 41,50
00E3E:  DATA 49,54
00E40:  DATA 41,4C
00E42:  DATA 20,43
00E44:  DATA 48,41
00E46:  DATA 52,41
00E48:  DATA 43,54
00E4A:  DATA 45,52
00E4C:  DATA 53,20
00E4E:  DATA 54,4F
00E50:  DATA 20,57
00E52:  DATA 52,49
00E54:  DATA 54,45
00E56:  DATA 21,0A
00E58:  DATA 0A,00
00E5A:  DATA 55,41
00E5C:  DATA 52,54
00E5E:  DATA 20,52
00E60:  DATA 65,70
00E62:  DATA 65,61
00E64:  DATA 74,65
00E66:  DATA 72,20
00E68:  DATA 49,6E
00E6A:  DATA 69,74
00E6C:  DATA 69,61
00E6E:  DATA 6C,69
00E70:  DATA 7A,65
00E72:  DATA 64,2E
00E74:  DATA 0A,00
00E76:  DATA 49,6E
00E78:  DATA 76,61
00E7A:  DATA 6C,69
00E7C:  DATA 64,20
00E7E:  DATA 6F,70
00E80:  DATA 74,69
00E82:  DATA 6F,6E
00E84:  DATA 2E,20
00E86:  DATA 50,6C
00E88:  DATA 65,61
00E8A:  DATA 73,65
00E8C:  DATA 20,74
00E8E:  DATA 72,79
00E90:  DATA 20,61
00E92:  DATA 67,61
00E94:  DATA 69,6E
00E96:  DATA 2E,0A
00E98:  DATA 00,00
00E9A:  DATA 52,65
00E9C:  DATA 61,64
00E9E:  DATA 69,6E
00EA0:  DATA 67,20
00EA2:  DATA 63,68
00EA4:  DATA 69,70
00EA6:  DATA 20,49
00EA8:  DATA 44,20
00EAA:  DATA 6F,66
00EAC:  DATA 20,6D
00EAE:  DATA 61,69
00EB0:  DATA 6E,0A
00EB2:  DATA 00,00
00EB4:  DATA 52,65
00EB6:  DATA 61,64
00EB8:  DATA 69,6E
00EBA:  DATA 67,20
00EBC:  DATA 63,68
00EBE:  DATA 69,70
00EC0:  DATA 20,49
00EC2:  DATA 44,20
00EC4:  DATA 6F,66
00EC6:  DATA 20,43
00EC8:  DATA 4F,4D
00ECA:  DATA 0A,00
00ECC:  DATA 52,65
00ECE:  DATA 61,64
00ED0:  DATA 69,6E
00ED2:  DATA 67,20
00ED4:  DATA 63,68
00ED6:  DATA 69,70
00ED8:  DATA 20,49
00EDA:  DATA 44,20
00EDC:  DATA 6F,66
00EDE:  DATA 20,41
00EE0:  DATA 44,43
00EE2:  DATA 53,0A
00EE4:  DATA 00,00
00EE6:  DATA 44,6F
00EE8:  DATA 6E,65
00EEA:  DATA 20,72
00EEC:  DATA 65,61
00EEE:  DATA 64,69
00EF0:  DATA 6E,67
00EF2:  DATA 20,63
00EF4:  DATA 68,69
00EF6:  DATA 70,20
00EF8:  DATA 49,44
00EFA:  DATA 0A,00
00EFC:  DATA 65,78
00EFE:  DATA 69,74
00F00:  DATA 69,6E
00F02:  DATA 67,20
00F04:  DATA 6D,61
00F06:  DATA 69,6E
00F08:  DATA 20,6D
00F0A:  DATA 65,6E
00F0C:  DATA 75,20
00F0E:  DATA 66,75
00F10:  DATA 6E,63
00F12:  DATA 74,69
00F14:  DATA 6F,6E
00F16:  DATA 00,00
*
00F88:  TBLRD*+
00F8A:  MOVF   FF5,F
00F8C:  BZ    0FAE
00F8E:  MOVFF  FF6,611
00F92:  MOVFF  FF7,612
00F96:  MOVFF  FF8,613
00F9A:  MOVFF  FF5,623
00F9E:  RCALL  0F42
00FA0:  MOVFF  611,FF6
00FA4:  MOVFF  612,FF7
00FA8:  MOVFF  613,FF8
00FAC:  BRA    0F88
00FAE:  RETURN 0
*
01022:  MOVWF  00
01024:  SWAPF  00,W
01026:  ANDLW  0F
01028:  MULLW  0A
0102A:  MOVF   00,W
0102C:  ANDLW  0F
0102E:  ADDWF  FF3,W
01030:  RETURN 0
01032:  RETURN 0
*
011BE:  TBLRD*+
011C0:  MOVFF  FF6,61E
011C4:  MOVFF  FF7,61F
011C8:  MOVFF  FF8,620
011CC:  MOVFF  FF5,623
011D0:  RCALL  0F42
011D2:  MOVFF  61E,FF6
011D6:  MOVFF  61F,FF7
011DA:  MOVFF  620,FF8
011DE:  MOVLB  6
011E0:  DECFSZ x1D,F
011E2:  BRA    11E6
011E4:  BRA    11EA
011E6:  MOVLB  0
011E8:  BRA    11BE
011EA:  MOVLB  0
011EC:  RETURN 0
011EE:  MOVLB  6
011F0:  MOVF   x24,W
011F2:  CLRF   01
011F4:  SUBWF  x23,W
011F6:  BC    11FE
011F8:  MOVFF  623,00
011FC:  BRA    1216
011FE:  CLRF   00
01200:  MOVLW  08
01202:  MOVWF  x25
01204:  RLCF   x23,F
01206:  RLCF   00,F
01208:  MOVF   x24,W
0120A:  SUBWF  00,W
0120C:  BTFSC  FD8.0
0120E:  MOVWF  00
01210:  RLCF   01,F
01212:  DECFSZ x25,F
01214:  BRA    1204
01216:  MOVLB  0
01218:  RETURN 0
0121A:  MOVF   01,W
0121C:  MOVFF  4F6,623
01220:  MOVLW  64
01222:  MOVLB  6
01224:  MOVWF  x24
01226:  MOVLB  0
01228:  RCALL  11EE
0122A:  MOVFF  00,4F6
0122E:  MOVF   01,W
01230:  MOVLW  30
01232:  BNZ   1244
01234:  MOVLB  4
01236:  BTFSS  xF7.1
01238:  BRA    1256
0123A:  BTFSC  xF7.3
0123C:  BRA    1256
0123E:  BTFSC  xF7.4
01240:  MOVLW  20
01242:  BRA    124C
01244:  MOVLB  4
01246:  BCF    xF7.3
01248:  BCF    xF7.4
0124A:  BSF    xF7.0
0124C:  ADDWF  01,F
0124E:  MOVFF  01,623
01252:  MOVLB  0
01254:  RCALL  0F42
01256:  MOVFF  4F6,623
0125A:  MOVLW  0A
0125C:  MOVLB  6
0125E:  MOVWF  x24
01260:  MOVLB  0
01262:  RCALL  11EE
01264:  MOVFF  00,4F6
01268:  MOVF   01,W
0126A:  MOVLW  30
0126C:  BNZ   127E
0126E:  MOVLB  4
01270:  BTFSC  xF7.3
01272:  BRA    1288
01274:  BTFSS  xF7.0
01276:  BRA    1288
01278:  BTFSC  xF7.4
0127A:  MOVLW  20
0127C:  MOVLB  0
0127E:  ADDWF  01,F
01280:  MOVFF  01,623
01284:  RCALL  0F42
01286:  MOVLB  4
01288:  MOVLW  30
0128A:  ADDWF  xF6,F
0128C:  MOVFF  4F6,623
01290:  MOVLB  0
01292:  RCALL  0F42
01294:  RETURN 0
01296:  MOVLB  6
01298:  BTFSC  x1E.7
0129A:  BRA    12BE
0129C:  MOVLW  0F
0129E:  MOVWF  00
012A0:  SWAPF  x1D,W
012A2:  ANDWF  00,F
012A4:  MOVLW  0A
012A6:  SUBWF  00,W
012A8:  BC    12B0
012AA:  MOVLW  30
012AC:  ADDWF  00,F
012AE:  BRA    12B4
012B0:  MOVF   x1E,W
012B2:  ADDWF  00,F
012B4:  MOVFF  00,623
012B8:  MOVLB  0
012BA:  RCALL  0F42
012BC:  MOVLB  6
012BE:  MOVLW  0F
012C0:  ANDWF  x1D,F
012C2:  MOVLW  0A
012C4:  SUBWF  x1D,W
012C6:  BC    12CC
012C8:  MOVLW  30
012CA:  BRA    12D0
012CC:  BCF    x1E.7
012CE:  MOVF   x1E,W
012D0:  ADDWF  x1D,F
012D2:  MOVFF  61D,623
012D6:  MOVLB  0
012D8:  RCALL  0F42
012DA:  RETURN 0
*
012FA:  MOVLW  20
012FC:  MOVLB  6
012FE:  BTFSS  x1E.4
01300:  MOVLW  30
01302:  MOVWF  x1F
01304:  MOVFF  61D,00
01308:  BTFSS  00.7
0130A:  BRA    131C
0130C:  COMF   00,F
0130E:  INCF   00,F
01310:  MOVFF  00,61D
01314:  MOVLW  2D
01316:  MOVWF  x1F
01318:  BSF    x1E.7
0131A:  BSF    x1E.0
0131C:  MOVF   01,W
0131E:  MOVFF  61D,623
01322:  MOVLW  64
01324:  MOVWF  x24
01326:  MOVLB  0
01328:  RCALL  11EE
0132A:  MOVFF  00,61D
0132E:  MOVLW  30
01330:  ADDWF  01,W
01332:  MOVLB  6
01334:  MOVWF  x20
01336:  MOVFF  61D,623
0133A:  MOVLW  0A
0133C:  MOVWF  x24
0133E:  MOVLB  0
01340:  RCALL  11EE
01342:  MOVLW  30
01344:  ADDWF  00,W
01346:  MOVLB  6
01348:  MOVWF  x22
0134A:  MOVLW  30
0134C:  ADDWF  01,W
0134E:  MOVWF  x21
01350:  MOVFF  61F,00
01354:  MOVLW  30
01356:  SUBWF  x20,W
01358:  BZ    1362
0135A:  BSF    x1E.1
0135C:  BTFSC  x1E.7
0135E:  BSF    x1E.2
01360:  BRA    1386
01362:  MOVFF  61F,620
01366:  MOVLW  20
01368:  MOVWF  x1F
0136A:  MOVLW  30
0136C:  SUBWF  x21,W
0136E:  BZ    1378
01370:  BSF    x1E.0
01372:  BTFSC  x1E.7
01374:  BSF    x1E.1
01376:  BRA    1386
01378:  BTFSS  FD8.2
0137A:  BSF    x1E.0
0137C:  BNZ   1386
0137E:  MOVFF  620,621
01382:  MOVLW  20
01384:  MOVWF  x20
01386:  BTFSC  x1E.2
01388:  BRA    1394
0138A:  BTFSC  x1E.1
0138C:  BRA    139C
0138E:  BTFSC  x1E.0
01390:  BRA    13A4
01392:  BRA    13AC
01394:  MOVFF  61F,623
01398:  MOVLB  0
0139A:  RCALL  0F42
0139C:  MOVFF  620,623
013A0:  MOVLB  0
013A2:  RCALL  0F42
013A4:  MOVFF  621,623
013A8:  MOVLB  0
013AA:  RCALL  0F42
013AC:  MOVFF  622,623
013B0:  MOVLB  0
013B2:  RCALL  0F42
013B4:  RETURN 0
*
01CCE:  MOVLB  6
01CD0:  CLRF   x26
01CD2:  CLRF   x27
01CD4:  MOVLW  01
01CD6:  MOVWF  x28
01CD8:  CLRF   FDA
01CDA:  CLRF   FD9
01CDC:  MOVLW  06
01CDE:  MOVWF  x2B
01CE0:  MOVLW  1E
01CE2:  MOVWF  x2A
01CE4:  MOVLW  06
01CE6:  MOVWF  FEA
01CE8:  MOVLW  22
01CEA:  MOVWF  FE9
01CEC:  MOVFF  62B,FE2
01CF0:  MOVFF  62A,FE1
01CF4:  MOVFF  628,629
01CF8:  BCF    FD8.0
01CFA:  MOVF   FE5,W
01CFC:  MULWF  FEE
01CFE:  MOVF   FF3,W
01D00:  ADDWFC x26,F
01D02:  MOVF   FF4,W
01D04:  ADDWFC x27,F
01D06:  DECFSZ x29,F
01D08:  BRA    1CF8
01D0A:  MOVFF  626,FDE
01D0E:  MOVFF  627,626
01D12:  CLRF   x27
01D14:  BTFSC  FD8.0
01D16:  INCF   x27,F
01D18:  INCF   x2A,F
01D1A:  BTFSC  FD8.2
01D1C:  INCF   x2B,F
01D1E:  INCF   x28,F
01D20:  MOVF   x28,W
01D22:  SUBLW  05
01D24:  BNZ   1CE4
01D26:  MOVLB  0
01D28:  GOTO   1DD0 (RETURN)
01D2C:  MOVF   03,W
01D2E:  SUBLW  20
01D30:  BZ    1D42
01D32:  MOVF   03,W
01D34:  SUBLW  08
01D36:  BC    1D3E
01D38:  MOVF   03,W
01D3A:  SUBLW  0D
01D3C:  BC    1D42
01D3E:  CLRF   01
01D40:  BRA    1D46
01D42:  MOVLW  01
01D44:  MOVWF  01
01D46:  RETURN 0
01D48:  MOVLB  6
01D4A:  CLRF   x18
01D4C:  CLRF   x1C
01D4E:  CLRF   x1B
01D50:  CLRF   x1A
01D52:  CLRF   x19
01D54:  BTFSS  x16.7
01D56:  BRA    1D5E
01D58:  MOVF   x15,F
01D5A:  BTFSC  FD8.2
01D5C:  BRA    1E34
01D5E:  MOVLB  0
01D60:  RCALL  1848
01D62:  MOVFF  01,617
01D66:  MOVLB  6
01D68:  MOVF   x17,F
01D6A:  BTFSC  FD8.2
01D6C:  BRA    1E34
01D6E:  INCF   x18,F
01D70:  MOVF   x17,W
01D72:  SUBLW  20
01D74:  BC    1E00
01D76:  MOVF   x17,W
01D78:  SUBLW  58
01D7A:  BZ    1E1E
01D7C:  MOVF   x17,W
01D7E:  SUBLW  78
01D80:  BZ    1E1E
01D82:  MOVF   x17,W
01D84:  SUBLW  2F
01D86:  BC    1E30
01D88:  MOVLW  30
01D8A:  SUBWF  x17,F
01D8C:  MOVF   x17,W
01D8E:  SUBLW  09
01D90:  BC    1DB2
01D92:  MOVLW  07
01D94:  SUBWF  x17,F
01D96:  MOVF   x17,W
01D98:  SUBLW  09
01D9A:  BC    1E30
01D9C:  MOVF   x17,W
01D9E:  SUBLW  0F
01DA0:  BC    1DB2
01DA2:  MOVLW  20
01DA4:  SUBWF  x17,F
01DA6:  MOVF   x17,W
01DA8:  SUBLW  09
01DAA:  BC    1E30
01DAC:  MOVF   x17,W
01DAE:  SUBLW  0F
01DB0:  BNC   1E30
01DB2:  MOVFF  61C,621
01DB6:  MOVFF  61B,620
01DBA:  MOVFF  61A,61F
01DBE:  MOVFF  619,61E
01DC2:  CLRF   x25
01DC4:  CLRF   x24
01DC6:  CLRF   x23
01DC8:  MOVLW  10
01DCA:  MOVWF  x22
01DCC:  MOVLB  0
01DCE:  BRA    1CCE
01DD0:  MOVLB  6
01DD2:  MOVF   x17,W
01DD4:  ADDWF  00,W
01DD6:  MOVWF  x19
01DD8:  MOVLW  00
01DDA:  ADDWFC 01,W
01DDC:  MOVWF  x1A
01DDE:  MOVLW  00
01DE0:  ADDWFC 02,W
01DE2:  MOVWF  x1B
01DE4:  MOVLW  00
01DE6:  ADDWFC 03,W
01DE8:  MOVWF  x1C
01DEA:  BTFSC  x16.7
01DEC:  DECF   x15,F
01DEE:  BTFSC  x16.0
01DF0:  BRA    1DFA
01DF2:  MOVF   x17,F
01DF4:  BNZ   1DFA
01DF6:  BSF    x16.1
01DF8:  BRA    1D54
01DFA:  BCF    x16.1
01DFC:  BSF    x16.0
01DFE:  BRA    1D54
01E00:  MOVFF  617,03
01E04:  MOVLB  0
01E06:  RCALL  1D2C
01E08:  MOVF   01,F
01E0A:  BTFSS  FD8.2
01E0C:  BRA    1E12
01E0E:  MOVLB  6
01E10:  BRA    1E30
01E12:  MOVLB  6
01E14:  BTFSC  x16.0
01E16:  BRA    1E34
01E18:  BTFSC  x16.1
01E1A:  BRA    1E34
01E1C:  BRA    1D54
01E1E:  BTFSC  x16.0
01E20:  BRA    1E30
01E22:  BTFSS  x16.1
01E24:  BRA    1E30
01E26:  BTFSC  x16.7
01E28:  INCF   x15,F
01E2A:  BCF    x16.1
01E2C:  BSF    x16.0
01E2E:  BRA    1D54
01E30:  CLRF   x18
01E32:  BRA    1E50
01E34:  BTFSC  x16.6
01E36:  BRA    1E50
01E38:  MOVFF  614,FEA
01E3C:  MOVFF  613,FE9
01E40:  MOVFF  619,FEF
01E44:  MOVFF  61A,FEC
01E48:  MOVFF  61B,FEC
01E4C:  MOVFF  61C,FEC
01E50:  MOVFF  618,01
01E54:  MOVLB  0
01E56:  RETURN 0
01E58:  MOVLB  6
01E5A:  CLRF   x1A
01E5C:  CLRF   x1B
01E5E:  BTFSS  x18.7
01E60:  BRA    1E66
01E62:  MOVF   x17,F
01E64:  BZ    1F10
01E66:  MOVLB  0
01E68:  RCALL  1848
01E6A:  MOVFF  01,619
01E6E:  MOVLB  6
01E70:  MOVF   x19,F
01E72:  BZ    1F10
01E74:  INCF   x1A,F
01E76:  MOVF   x19,W
01E78:  SUBLW  20
01E7A:  BC    1EDC
01E7C:  MOVF   x19,W
01E7E:  SUBLW  58
01E80:  BZ    1EFA
01E82:  MOVF   x19,W
01E84:  SUBLW  78
01E86:  BZ    1EFA
01E88:  MOVF   x19,W
01E8A:  SUBLW  2F
01E8C:  BC    1F0C
01E8E:  MOVLW  30
01E90:  SUBWF  x19,F
01E92:  MOVF   x19,W
01E94:  SUBLW  09
01E96:  BC    1EB8
01E98:  MOVLW  07
01E9A:  SUBWF  x19,F
01E9C:  MOVF   x19,W
01E9E:  SUBLW  09
01EA0:  BC    1F0C
01EA2:  MOVF   x19,W
01EA4:  SUBLW  0F
01EA6:  BC    1EB8
01EA8:  MOVLW  20
01EAA:  SUBWF  x19,F
01EAC:  MOVF   x19,W
01EAE:  SUBLW  09
01EB0:  BC    1F0C
01EB2:  MOVF   x19,W
01EB4:  SUBLW  0F
01EB6:  BNC   1F0C
01EB8:  MOVF   x1B,W
01EBA:  MULLW  10
01EBC:  MOVFF  FF3,01
01EC0:  MOVF   x19,W
01EC2:  ADDWF  01,W
01EC4:  MOVWF  x1B
01EC6:  BTFSC  x18.7
01EC8:  DECF   x17,F
01ECA:  BTFSC  x18.0
01ECC:  BRA    1ED6
01ECE:  MOVF   x19,F
01ED0:  BNZ   1ED6
01ED2:  BSF    x18.1
01ED4:  BRA    1E5E
01ED6:  BCF    x18.1
01ED8:  BSF    x18.0
01EDA:  BRA    1E5E
01EDC:  MOVFF  619,03
01EE0:  MOVLB  0
01EE2:  RCALL  1D2C
01EE4:  MOVF   01,F
01EE6:  BTFSS  FD8.2
01EE8:  BRA    1EEE
01EEA:  MOVLB  6
01EEC:  BRA    1F0C
01EEE:  MOVLB  6
01EF0:  BTFSC  x18.0
01EF2:  BRA    1F10
01EF4:  BTFSC  x18.1
01EF6:  BRA    1F10
01EF8:  BRA    1E5E
01EFA:  BTFSC  x18.0
01EFC:  BRA    1F0C
01EFE:  BTFSS  x18.1
01F00:  BRA    1F0C
01F02:  BTFSC  x18.7
01F04:  INCF   x17,F
01F06:  BCF    x18.1
01F08:  BSF    x18.0
01F0A:  BRA    1E5E
01F0C:  CLRF   x1A
01F0E:  BRA    1F20
01F10:  BTFSC  x18.6
01F12:  BRA    1F20
01F14:  MOVFF  616,FEA
01F18:  MOVFF  615,FE9
01F1C:  MOVFF  61B,FEF
01F20:  MOVFF  61A,01
01F24:  MOVLB  0
01F26:  RETURN 0
*
022BC:  MOVWF  00
022BE:  SWAPF  00,W
022C0:  ADDWF  00,W
022C2:  ANDLW  0F
022C4:  BTFSC  FD8.1
022C6:  ADDLW  16
022C8:  DAW   
022CA:  BTFSC  00.4
022CC:  ADDLW  15
022CE:  BTFSC  00.5
022D0:  ADDLW  30
022D2:  BTFSC  00.6
022D4:  ADDLW  60
022D6:  BTFSC  00.7
022D8:  ADDLW  20
022DA:  DAW   
022DC:  RETURN 0
022DE:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <Menu_function.c>
.................... //#include <MT25Q_.h>
.................... #device ADC=16
.................... #device ICD=TRUE
.................... 
.................... #FUSES NOWDT NOBROWNOUT
.................... #use delay(crystal=16Mhz, clock=16Mhz)
*
00F18:  MOVLW  04
00F1A:  MOVWF  FEA
00F1C:  MOVLW  E3
00F1E:  MOVWF  FE9
00F20:  MOVF   FEF,W
00F22:  BZ    0F40
00F24:  MOVLW  05
00F26:  MOVWF  01
00F28:  CLRF   00
00F2A:  DECFSZ 00,F
00F2C:  BRA    0F2A
00F2E:  DECFSZ 01,F
00F30:  BRA    0F28
00F32:  MOVLW  2E
00F34:  MOVWF  00
00F36:  DECFSZ 00,F
00F38:  BRA    0F36
00F3A:  BRA    0F3C
00F3C:  DECFSZ FEF,F
00F3E:  BRA    0F24
00F40:  RETURN 0
....................  
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... #use rs232(baud=9600, parity=N, xmit=PIN_E5, rcv=PIN_E4, bits=8, stream=EPS) //EPS DATA ACQUISITION
*
02678:  BSF    F96.4
0267A:  BTFSC  F84.4
0267C:  BRA    267A
0267E:  MOVLW  08
02680:  MOVWF  00
02682:  MOVLB  4
02684:  CLRF   xE4
02686:  BSF    00.7
02688:  BRA    26A6
0268A:  BCF    00.7
0268C:  BRA    26A6
0268E:  BCF    FD8.0
02690:  BTFSC  F84.4
02692:  BSF    FD8.0
02694:  RRCF   xE4,F
02696:  BSF    00.6
02698:  BRA    26A6
0269A:  BCF    00.6
0269C:  DECFSZ 00,F
0269E:  BRA    268E
026A0:  MOVFF  4E4,01
026A4:  BRA    26BE
026A6:  MOVLW  84
026A8:  BTFSC  00.7
026AA:  MOVLW  24
026AC:  MOVWF  01
026AE:  DECFSZ 01,F
026B0:  BRA    26AE
026B2:  BRA    26B4
026B4:  BTFSC  00.7
026B6:  BRA    268A
026B8:  BTFSC  00.6
026BA:  BRA    269A
026BC:  BRA    268E
026BE:  MOVLB  0
026C0:  GOTO   26CA (RETURN)
.................... #use rs232(baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8, stream=EXT) //MAIN RAB Rear access board 
*
00F42:  BCF    F94.6
00F44:  BCF    F8B.6
00F46:  MOVLW  08
00F48:  MOVWF  01
00F4A:  BRA    0F4C
00F4C:  NOP   
00F4E:  BSF    01.7
00F50:  BRA    0F72
00F52:  BCF    01.7
00F54:  MOVLB  6
00F56:  RRCF   x23,F
00F58:  MOVLB  0
00F5A:  BTFSC  FD8.0
00F5C:  BSF    F8B.6
00F5E:  BTFSS  FD8.0
00F60:  BCF    F8B.6
00F62:  BSF    01.6
00F64:  BRA    0F72
00F66:  BCF    01.6
00F68:  DECFSZ 01,F
00F6A:  BRA    0F54
00F6C:  BRA    0F6E
00F6E:  NOP   
00F70:  BSF    F8B.6
00F72:  MOVLW  84
00F74:  MOVWF  FE9
00F76:  DECFSZ FE9,F
00F78:  BRA    0F76
00F7A:  BRA    0F7C
00F7C:  NOP   
00F7E:  BTFSC  01.7
00F80:  BRA    0F52
00F82:  BTFSC  01.6
00F84:  BRA    0F66
00F86:  RETURN 0
*
01848:  BSF    F94.7
0184A:  BTFSC  F82.7
0184C:  BRA    184A
0184E:  MOVLW  08
01850:  MOVWF  00
01852:  MOVLB  6
01854:  CLRF   x1E
01856:  BSF    00.7
01858:  BRA    1876
0185A:  BCF    00.7
0185C:  BRA    1876
0185E:  BCF    FD8.0
01860:  BTFSC  F82.7
01862:  BSF    FD8.0
01864:  RRCF   x1E,F
01866:  BSF    00.6
01868:  BRA    1876
0186A:  BCF    00.6
0186C:  DECFSZ 00,F
0186E:  BRA    185E
01870:  MOVFF  61E,01
01874:  BRA    188E
01876:  MOVLW  84
01878:  BTFSC  00.7
0187A:  MOVLW  24
0187C:  MOVWF  01
0187E:  DECFSZ 01,F
01880:  BRA    187E
01882:  BRA    1884
01884:  BTFSC  00.7
01886:  BRA    185A
01888:  BTFSC  00.6
0188A:  BRA    186A
0188C:  BRA    185E
0188E:  MOVLB  0
01890:  RETURN 0
.................... #use rs232(baud=57600, parity=N, xmit=PIN_D2, rcv=PIN_D3, bits=8, stream=COM, FORCE_SW) //MAIN COM Communication, send CW data 
.................... #use rs232(baud=57600, parity=N, xmit=PIN_F7, rcv=PIN_F6, bits=8, stream=CAM, FORCE_SW) //MAIN CAM Communicationx
.................... #use spi(MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6,  BAUD=10000, BITS=8, STREAM=MAIN_FM, MODE=0) //MAIN flash memory port
*
01098:  MOVLB  6
0109A:  MOVF   x1F,W
0109C:  SUBLW  08
0109E:  BZ    10A8
010A0:  MOVWF  x21
010A2:  RLCF   x1E,F
010A4:  DECFSZ x21,F
010A6:  BRA    10A2
010A8:  BSF    F96.0
010AA:  BCF    F96.6
010AC:  BCF    F96.1
010AE:  BCF    F8D.1
010B0:  MOVFF  61F,621
010B4:  BTFSS  x1E.7
010B6:  BCF    F8D.6
010B8:  BTFSC  x1E.7
010BA:  BSF    F8D.6
010BC:  RLCF   x1E,F
010BE:  BSF    F8D.1
010C0:  MOVLW  41
010C2:  MOVWF  x22
010C4:  DECFSZ x22,F
010C6:  BRA    10C4
010C8:  RLCF   01,F
010CA:  BTFSS  F84.0
010CC:  BCF    01.0
010CE:  BTFSC  F84.0
010D0:  BSF    01.0
010D2:  BCF    F8D.1
010D4:  MOVLW  40
010D6:  MOVWF  x22
010D8:  DECFSZ x22,F
010DA:  BRA    10D8
010DC:  DECFSZ x21,F
010DE:  BRA    10B4
010E0:  MOVLB  0
010E2:  RETURN 0
.................... #use spi(MASTER, CLK=PIN_B2, DI=PIN_B5, DO=PIN_B4,  BAUD=10000, BITS=8, STREAM=COM_FM, MODE=0) //COM shared flash memory port
.................... #use spi(MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1,  BAUD=10000, BITS=8, STREAM=ADCS_FM, MODE=0) //ADCS shared flash memory port, Camera module (ovcam,mvcam)
*
01770:  MOVLB  4
01772:  MOVF   xEE,W
01774:  SUBLW  08
01776:  BZ    1780
01778:  MOVWF  xF0
0177A:  RLCF   xED,F
0177C:  DECFSZ xF0,F
0177E:  BRA    177A
01780:  BSF    F92.0
01782:  BCF    F92.1
01784:  BCF    F92.3
01786:  BCF    F89.3
01788:  MOVFF  4EE,4F0
0178C:  BTFSS  xED.7
0178E:  BCF    F89.1
01790:  BTFSC  xED.7
01792:  BSF    F89.1
01794:  RLCF   xED,F
01796:  BSF    F89.3
01798:  MOVLW  41
0179A:  MOVWF  xF1
0179C:  DECFSZ xF1,F
0179E:  BRA    179C
017A0:  RLCF   01,F
017A2:  BTFSS  F80.0
017A4:  BCF    01.0
017A6:  BTFSC  F80.0
017A8:  BSF    01.0
017AA:  BCF    F89.3
017AC:  MOVLW  40
017AE:  MOVWF  xF1
017B0:  DECFSZ xF1,F
017B2:  BRA    17B0
017B4:  DECFSZ xF0,F
017B6:  BRA    178C
017B8:  MOVLB  0
017BA:  RETURN 0
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... #use spi(MASTER, CLK=PIN_B2, DI=PIN_B5, DO=PIN_B4,  BAUD=10000, BITS=8, STREAM=COM_FM, MODE=0, FORCE_SW) //COM shared flash memory port
*
01698:  MOVLB  4
0169A:  MOVF   xEE,W
0169C:  SUBLW  08
0169E:  BZ    16A8
016A0:  MOVWF  xF0
016A2:  RLCF   xED,F
016A4:  DECFSZ xF0,F
016A6:  BRA    16A2
016A8:  BSF    F93.5
016AA:  BCF    F93.4
016AC:  BCF    F93.2
016AE:  BCF    F8A.2
016B0:  MOVFF  4EE,4F0
016B4:  BTFSS  xED.7
016B6:  BCF    F8A.4
016B8:  BTFSC  xED.7
016BA:  BSF    F8A.4
016BC:  RLCF   xED,F
016BE:  BSF    F8A.2
016C0:  MOVLW  41
016C2:  MOVWF  xF1
016C4:  DECFSZ xF1,F
016C6:  BRA    16C4
016C8:  RLCF   01,F
016CA:  BTFSS  F81.5
016CC:  BCF    01.0
016CE:  BTFSC  F81.5
016D0:  BSF    01.0
016D2:  BCF    F8A.2
016D4:  MOVLW  40
016D6:  MOVWF  xF1
016D8:  DECFSZ xF1,F
016DA:  BRA    16D8
016DC:  DECFSZ xF0,F
016DE:  BRA    16B4
016E0:  MOVLB  0
016E2:  RETURN 0
.................... //SPI Stream alter name 
.................... #define SPIPORT MAIN_FM
.................... #define SPIPORT2 COM_FM
.................... #define SPIPORT3 ADCS_FM  //cam system
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
....................     
.................... //Flash memory chip select pins and mux control 
.................... #define CS_PIN_1 PIN_E2 //OBC_FLASH_SELECT
.................... #define CS_PIN_COM PIN_B3 //COM_CHIP_SELECT
.................... #define CS_PIN_ADCS PIN_A2 //ADCS_CHIP_SELECT
.................... #define MX_PIN_OVCAM PIN_G2 //OVCAM_MUX_SELECT
.................... #define MX_PIN_MVCAM PIN_G3 //MVCAM_MUX_SELECT
.................... #define MX_PIN_ADCS PIN_A5 //ADCS_MUX_SELECT
.................... #define MX_PIN_COM PIN_C4 //COM_MUX_SELECT
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... //mt25q flash memory command assigment
.................... #define READ_ID              0x9F
.................... #define READ_STATUS_REG      0x05 
.................... #define READ_DATA_BYTES      0x13  //0x03 for byte
.................... #define ENABLE_WRITE         0x06
.................... #define WRITE_PAGE           0x12  //0x02 for 3byte 
.................... #define ERASE_SECTOR         0xDC  //0xD8 for 3byte
.................... #define ERASE_4KB_SUBSECTOR  0x21
.................... #define ERASE_32KB_SUBSECTOR 0x5C
.................... #define DIE_ERASE            0xC4
.................... #define FAST_READ            0x0B
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... //memory maping     
.................... #define SHUTDOWN_COUNT_ADDRESS 0x00100010
.................... 
.................... //digtal control pins 
.................... #define EN_SUP_3V3_1 PIN_B0
.................... #define EN_SUP_3V3_2 PIN_G1
.................... #define EN_SUP_3V3_DAQ PIN_D0
.................... #define EN_SUP_UNREG PIN_B1
.................... #define EN_SUP_5V0 PIN_D1
.................... #define KILL_SWITCH PIN_A4
.................... #define MVCAM_PWR PIN_G0
.................... #define OVCAM_PWR PIN_D7
.................... #define ADCS_PWR PIN_D6
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //FLAG variable
....................     int8 EPS_UART = 0;
....................     int8 COM_UART = 0;
....................     int8 ADCS_HK_ADDRESS = 0x00010000;
....................     int8 ADCS_HK_ADDRESS_COUNTER = 0x00000000;
....................     int8 SHUT_DOWN_COUNT_ADD = 0x00010000;
....................     int8 ADCS_COMMAND = 0x02;
....................     unsigned char *READ_HK_ADCS[16];
....................     
....................     
.................... void WRITE_ENABLE_OF(){
....................  output_low(CS_PIN_1);
*
012DC:  BCF    F96.2
012DE:  BCF    F8D.2
....................  spi_xfer(SPIPORT,ENABLE_WRITE);                //Send 0x06
012E0:  MOVLW  06
012E2:  MOVLB  6
012E4:  MOVWF  x1E
012E6:  MOVLW  08
012E8:  MOVWF  x1F
012EA:  MOVLW  01
012EC:  MOVWF  x20
012EE:  MOVLB  0
012F0:  RCALL  1098
....................  output_high(CS_PIN_1);  
012F2:  BCF    F96.2
012F4:  BSF    F8D.2
....................  return;
012F6:  GOTO   142C (RETURN)
.................... }
.................... 
.................... void WRITE_ENABLE_OF_COM(){
....................      // Lower CS to select the SPI device
....................     output_low(CS_PIN_COM);
....................     // Lower MX to connect to flash device
....................     output_low(MX_PIN_COM);
....................     spi_xfer(SPIPORT2,ENABLE_WRITE);                //Send 0x06
....................     output_high(CS_PIN_COM);
....................  return;
.................... }
.................... void WRITE_ENABLE_OF_ADCS(){
....................      // Lower CS to select the SPI device
....................     output_low(CS_PIN_ADCS);
....................     // Lower MX to connect to flash device
....................     output_low(MX_PIN_COM);
....................     spi_xfer(SPIPORT3,ENABLE_WRITE);                //Send 0x06
....................     output_high(CS_PIN_ADCS);  
....................  return;
.................... }
.................... 
.................... void WRITE_DATA_NBYTES(unsigned int32 ADDRESS, unsigned int8* data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS: 0x%08lx\n", ADDRESS);  // Print address as hex
*
013B6:  MOVLW  06
013B8:  MOVWF  FF6
013BA:  MOVLW  00
013BC:  MOVWF  FF7
013BE:  MOVLW  00
013C0:  MOVWF  FF8
013C2:  MOVLW  11
013C4:  MOVLB  6
013C6:  MOVWF  x1D
013C8:  MOVLB  0
013CA:  RCALL  11BE
013CC:  MOVFF  614,61D
013D0:  MOVLW  57
013D2:  MOVLB  6
013D4:  MOVWF  x1E
013D6:  MOVLB  0
013D8:  RCALL  1296
013DA:  MOVFF  613,61D
013DE:  MOVLW  57
013E0:  MOVLB  6
013E2:  MOVWF  x1E
013E4:  MOVLB  0
013E6:  RCALL  1296
013E8:  MOVFF  612,61D
013EC:  MOVLW  57
013EE:  MOVLB  6
013F0:  MOVWF  x1E
013F2:  MOVLB  0
013F4:  RCALL  1296
013F6:  MOVFF  611,61D
013FA:  MOVLW  57
013FC:  MOVLB  6
013FE:  MOVWF  x1E
01400:  MOVLB  0
01402:  RCALL  1296
01404:  MOVLW  0A
01406:  MOVLB  6
01408:  MOVWF  x23
0140A:  MOVLB  0
0140C:  RCALL  0F42
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
0140E:  MOVLB  6
01410:  MOVFF  614,618
01414:  CLRF   03
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01416:  MOVFF  613,619
0141A:  CLRF   03
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
0141C:  MOVFF  612,61A
01420:  CLRF   03
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
01422:  MOVFF  611,61B
01426:  CLRF   03
....................     WRITE_ENABLE_OF();  // Enable write operation
01428:  MOVLB  0
0142A:  BRA    12DC
.................... 
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_1);
0142C:  BCF    F96.2
0142E:  BCF    F8D.2
....................     delay_us(2);  // Small delay for stabilization
01430:  MOVLW  02
01432:  MOVWF  00
01434:  DECFSZ 00,F
01436:  BRA    1434
01438:  NOP   
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT, WRITE_PAGE);
0143A:  MOVLW  12
0143C:  MOVLB  6
0143E:  MOVWF  x1E
01440:  MOVLW  08
01442:  MOVWF  x1F
01444:  MOVLW  01
01446:  MOVWF  x20
01448:  MOVLB  0
0144A:  RCALL  1098
....................     spi_xfer(SPIPORT, adsress[0]);
0144C:  MOVFF  618,61E
01450:  MOVLW  08
01452:  MOVLB  6
01454:  MOVWF  x1F
01456:  MOVLW  01
01458:  MOVWF  x20
0145A:  MOVLB  0
0145C:  RCALL  1098
....................     spi_xfer(SPIPORT, adsress[1]);
0145E:  MOVFF  619,61E
01462:  MOVLW  08
01464:  MOVLB  6
01466:  MOVWF  x1F
01468:  MOVLW  01
0146A:  MOVWF  x20
0146C:  MOVLB  0
0146E:  RCALL  1098
....................     spi_xfer(SPIPORT, adsress[2]);
01470:  MOVFF  61A,61E
01474:  MOVLW  08
01476:  MOVLB  6
01478:  MOVWF  x1F
0147A:  MOVLW  01
0147C:  MOVWF  x20
0147E:  MOVLB  0
01480:  RCALL  1098
....................     spi_xfer(SPIPORT, adsress[3]);
01482:  MOVFF  61B,61E
01486:  MOVLW  08
01488:  MOVLB  6
0148A:  MOVWF  x1F
0148C:  MOVLW  01
0148E:  MOVWF  x20
01490:  MOVLB  0
01492:  RCALL  1098
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
01494:  MOVLB  6
01496:  CLRF   x1C
01498:  MOVF   x17,W
0149A:  SUBWF  x1C,W
0149C:  BC    14EC
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
0149E:  MOVF   x1C,W
014A0:  ADDWF  x15,W
014A2:  MOVWF  FE9
014A4:  MOVLW  00
014A6:  ADDWFC x16,W
014A8:  MOVWF  FEA
014AA:  MOVFF  FEF,61E
014AE:  MOVLW  08
014B0:  MOVWF  x1F
014B2:  MOVLW  01
014B4:  MOVWF  x20
014B6:  MOVLB  0
014B8:  RCALL  1098
....................         fprintf(EXT,"%02c", data[i]);    // Print each byte as hex (optional)
014BA:  MOVLB  6
014BC:  MOVF   x1C,W
014BE:  ADDWF  x15,W
014C0:  MOVWF  FE9
014C2:  MOVLW  00
014C4:  ADDWFC x16,W
014C6:  MOVWF  FEA
014C8:  MOVFF  FEF,61D
014CC:  MOVLW  01
014CE:  MOVWF  x1E
014D0:  MOVLW  20
014D2:  MOVWF  x23
014D4:  MOVLB  0
014D6:  RCALL  0F42
014D8:  MOVLB  6
014DA:  DECFSZ x1E,F
014DC:  BRA    14D0
014DE:  MOVFF  61D,623
014E2:  MOVLB  0
014E4:  RCALL  0F42
014E6:  MOVLB  6
014E8:  INCF   x1C,F
014EA:  BRA    1498
....................     }
....................     
....................     output_high(CS_PIN_1);  // Deselect SPI device
014EC:  BCF    F96.2
014EE:  BSF    F8D.2
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN IN MAIN!\n", data_number);
014F0:  MOVLW  0A
014F2:  MOVWF  x23
014F4:  MOVLB  0
014F6:  RCALL  0F42
014F8:  MOVFF  617,61D
014FC:  MOVLW  18
014FE:  MOVLB  6
01500:  MOVWF  x1E
01502:  MOVLB  0
01504:  RCALL  12FA
01506:  MOVLW  21
01508:  MOVWF  FF6
0150A:  MOVLW  00
0150C:  MOVWF  FF7
0150E:  MOVLW  00
01510:  MOVWF  FF8
01512:  MOVLW  18
01514:  MOVLB  6
01516:  MOVWF  x1D
01518:  MOVLB  0
0151A:  RCALL  11BE
....................     return;
0151C:  RETURN 0
.................... }
.................... 
.................... 
.................... void WRITE_DATA_NBYTES_COM(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS IN COM: 0x%08lx\n", ADDRESS);  // Print address as hex
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
....................     WRITE_ENABLE_OF_COM();  // Enable write operation
.................... 
.................... //    // Lower MX to connect to flash device
.................... //    output_low(MX_PIN_COM);
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_COM);
....................     delay_us(2);  // Small delay for stabilization
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT2, WRITE_PAGE);
....................     spi_xfer(SPIPORT2, adsress[0]);
....................     spi_xfer(SPIPORT2, adsress[1]);
....................     spi_xfer(SPIPORT2, adsress[2]);
....................     spi_xfer(SPIPORT2, adsress[3]);
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
....................         fprintf(EXT,"%02c", data[i]);    // Print each byte as hex (debugging purpose)
....................     }
....................     
....................     output_high(CS_PIN_COM);  // Deselect SPI devices
....................     output_high(MX_PIN_COM);  //Deselect MUX from flash
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN IN COM!\n", data_number);
.................... }
.................... 
.................... void WRITE_DATA_NBYTES_ADCS(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS IN ADCS: 0x%08lx\n", ADDRESS);  // Print address as hex
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
....................     WRITE_ENABLE_OF_ADCS();  // Enable write operation
.................... 
.................... //    // Lower MX to connect to flash device
.................... //    output_low(MX_PIN_ADCS);
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_ADCS);
....................     delay_us(2);  // Small delay for stabilization
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT3, WRITE_PAGE);
....................     spi_xfer(SPIPORT3, adsress[0]);
....................     spi_xfer(SPIPORT3, adsress[1]);
....................     spi_xfer(SPIPORT3, adsress[2]);
....................     spi_xfer(SPIPORT3, adsress[3]);
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
....................         fprintf(EXT,"%02c", data[i]);    // Print each byte as hex (debugging purpose)
....................     }
....................     
....................     output_high(CS_PIN_ADCS);  // Deselect SPI device5
....................     output_high(MX_PIN_ADCS);  //Deselect MUX from flash
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN IN ADCS!\n", data_number);
.................... }
....................  
.................... 
.................... char* READ_DATA_NBYTES(unsigned int32 ADDRESS, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................     static unsigned char Data_return[256];  //  max data_number capacitance
.................... 
....................     // Byte extraction for a 32-bit address
....................     adsress[0] = (unsigned int8)((ADDRESS >> 24) & 0xFF);
*
010E4:  MOVLB  4
010E6:  MOVFF  4E6,4E8
010EA:  CLRF   03
....................     adsress[1] = (unsigned int8)((ADDRESS >> 16) & 0xFF);
010EC:  MOVFF  4E5,4E9
010F0:  CLRF   03
....................     adsress[2] = (unsigned int8)((ADDRESS >> 8) & 0xFF);
010F2:  MOVFF  4E4,4EA
010F6:  CLRF   03
....................     adsress[3] = (unsigned int8)(ADDRESS & 0xFF);
010F8:  MOVFF  4E3,4EB
010FC:  CLRF   03
.................... 
....................     output_low(CS_PIN_1);  // Select SPI device
010FE:  BCF    F96.2
01100:  BCF    F8D.2
.................... 
....................     // Send READ DATA COMMAND (0x13 or appropriate for your flash chip)
....................     spi_xfer(SPIPORT, READ_DATA_BYTES);
01102:  MOVLW  13
01104:  MOVLB  6
01106:  MOVWF  x1E
01108:  MOVLW  08
0110A:  MOVWF  x1F
0110C:  MOVLW  01
0110E:  MOVWF  x20
01110:  MOVLB  0
01112:  RCALL  1098
....................     // Send address bytes
....................     spi_xfer(SPIPORT, adsress[0]);
01114:  MOVFF  4E8,61E
01118:  MOVLW  08
0111A:  MOVLB  6
0111C:  MOVWF  x1F
0111E:  MOVLW  01
01120:  MOVWF  x20
01122:  MOVLB  0
01124:  RCALL  1098
....................     spi_xfer(SPIPORT, adsress[1]);
01126:  MOVFF  4E9,61E
0112A:  MOVLW  08
0112C:  MOVLB  6
0112E:  MOVWF  x1F
01130:  MOVLW  01
01132:  MOVWF  x20
01134:  MOVLB  0
01136:  RCALL  1098
....................     spi_xfer(SPIPORT, adsress[2]);
01138:  MOVFF  4EA,61E
0113C:  MOVLW  08
0113E:  MOVLB  6
01140:  MOVWF  x1F
01142:  MOVLW  01
01144:  MOVWF  x20
01146:  MOVLB  0
01148:  RCALL  1098
....................     spi_xfer(SPIPORT, adsress[3]);
0114A:  MOVFF  4EB,61E
0114E:  MOVLW  08
01150:  MOVLB  6
01152:  MOVWF  x1F
01154:  MOVLW  01
01156:  MOVWF  x20
01158:  MOVLB  0
0115A:  RCALL  1098
.................... 
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number && i < 256; i++) {  // Avoid overflow
0115C:  MOVLB  4
0115E:  CLRF   xEC
01160:  MOVF   xE7,W
01162:  SUBWF  xEC,W
01164:  BC    11A6
....................         Data_return[i] = spi_xfer(SPIPORT, 0x00);  // Send dummy byte to receive data
01166:  CLRF   03
01168:  MOVF   xEC,W
0116A:  ADDLW  2A
0116C:  MOVWF  FE9
0116E:  MOVLW  00
01170:  ADDWFC 03,W
01172:  MOVWF  FEA
01174:  MOVLB  6
01176:  CLRF   x1E
01178:  MOVLW  08
0117A:  MOVWF  x1F
0117C:  MOVLW  01
0117E:  MOVWF  x20
01180:  MOVLB  0
01182:  RCALL  1098
01184:  MOVFF  01,FEF
....................         fprintf(EXT, "%c", Data_return[i]);  // Print each byte as hex
01188:  CLRF   03
0118A:  MOVLB  4
0118C:  MOVF   xEC,W
0118E:  ADDLW  2A
01190:  MOVWF  FE9
01192:  MOVLW  00
01194:  ADDWFC 03,W
01196:  MOVWF  FEA
01198:  MOVFF  FEF,623
0119C:  MOVLB  0
0119E:  RCALL  0F42
011A0:  MOVLB  4
011A2:  INCF   xEC,F
011A4:  BRA    1160
....................     }
.................... 
....................     output_high(CS_PIN_1);  // Deselect SPI device after reading
011A6:  BCF    F96.2
011A8:  BSF    F8D.2
....................     fprintf(EXT, "\n");
011AA:  MOVLW  0A
011AC:  MOVLB  6
011AE:  MOVWF  x23
011B0:  MOVLB  0
011B2:  RCALL  0F42
.................... 
....................     return Data_return;
011B4:  MOVLW  2A
011B6:  MOVWF  01
011B8:  MOVLW  00
011BA:  MOVWF  02
011BC:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... char* READ_DATA_NBYTES_COM(unsigned int32 ADDRESS, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................     static unsigned char Data_return[256];  // Adjust size based on expected max data_number
.................... 
....................     // Byte extraction for a 32-bit address
....................     adsress[0] = (unsigned int8)((ADDRESS >> 24) & 0xFF);
....................     adsress[1] = (unsigned int8)((ADDRESS >> 16) & 0xFF);
....................     adsress[2] = (unsigned int8)((ADDRESS >> 8) & 0xFF);
....................     adsress[3] = (unsigned int8)(ADDRESS & 0xFF);
.................... 
....................     output_low(MX_PIN_COM);  // Lower MX to connect to flash device
....................     output_low(CS_PIN_COM);  // Select SPI device
.................... 
....................     // Send READ DATA COMMAND
....................     spi_xfer(SPIPORT2, READ_DATA_BYTES);
....................     // Send address bytes
....................     spi_xfer(SPIPORT2, adsress[0]);
....................     spi_xfer(SPIPORT2, adsress[1]);
....................     spi_xfer(SPIPORT2, adsress[2]);
....................     spi_xfer(SPIPORT2, adsress[3]);
.................... 
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number && i < 256; i++) {
....................         Data_return[i] = spi_xfer(SPIPORT2, 0x00);  // Send dummy byte to receive data
....................         fprintf(EXT, "%c", Data_return[i]);         // Print each byte
....................     }
....................     fprintf(EXT, "\n");
.................... 
....................     output_high(CS_PIN_COM);  // Deselect SPI device
....................     output_high(MX_PIN_COM);  // Deselect MUX from flash
.................... 
....................     return Data_return;
.................... }
.................... 
.................... char* READ_DATA_NBYTES_ADCS(unsigned int32 ADDRESS, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................     static unsigned char Data_return[256];  // Adjust size based on expected max data_number
.................... 
....................     // Byte extraction for a 32-bit address
....................     adsress[0] = (unsigned int8)((ADDRESS >> 24) & 0xFF);
....................     adsress[1] = (unsigned int8)((ADDRESS >> 16) & 0xFF);
....................     adsress[2] = (unsigned int8)((ADDRESS >> 8) & 0xFF);
....................     adsress[3] = (unsigned int8)(ADDRESS & 0xFF);
.................... 
....................     output_low(MX_PIN_ADCS);  // Lower MX to connect to flash device
....................     output_low(CS_PIN_ADCS);  // Select SPI device
.................... 
....................     // Send READ DATA COMMAND
....................     spi_xfer(SPIPORT3, READ_DATA_BYTES);
....................     // Send address bytes
....................     spi_xfer(SPIPORT3, adsress[0]);
....................     spi_xfer(SPIPORT3, adsress[1]);
....................     spi_xfer(SPIPORT3, adsress[2]);
....................     spi_xfer(SPIPORT3, adsress[3]);
.................... 
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number && i < 256; i++) {
....................         Data_return[i] = spi_xfer(SPIPORT3, 0x00);  // Send dummy byte to receive data
....................         fprintf(EXT, "%c", Data_return[i]);         // Print each byte
....................     }
....................     fprintf(EXT, "\n");
.................... 
....................     output_high(CS_PIN_ADCS);  // Deselect SPI device
....................     output_high(MX_PIN_ADCS);  // Deselect MUX from flash
.................... 
....................     return Data_return;
.................... }
.................... 
.................... 
.................... int8 READ_DATA_BYTES_ADCS(unsigned int32 ADDRESS) {
....................     unsigned int8 adsress[4];
....................     unsigned int8 Data_return;
....................    
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
.................... 
....................     output_low(MX_PIN_ADCS);  // Lower MX to connect to flash device
....................     output_low(CS_PIN_ADCS);  // Select SPI device
.................... 
....................     // Send READ DATA COMMAND (0x13 or appropriate for your flash chip)
....................     spi_xfer(SPIPORT3, READ_DATA_BYTES);
....................     // Send address bytes
....................     spi_xfer(SPIPORT3, adsress[0]);
....................     spi_xfer(SPIPORT3, adsress[1]);
....................     spi_xfer(SPIPORT3, adsress[2]);
....................     spi_xfer(SPIPORT3, adsress[3]);
....................     // Read the requested number of bytes
....................         Data_return = spi_xfer(SPIPORT, 0x00);  // Send dummy byte to receive data
.................... 
....................     output_high(CS_PIN_ADCS);  // Deselect SPI device after reading
....................     output_high(MX_PIN_ADCS);  //Deselect MUX from flash
....................     return Data_return;
.................... }
.................... void READ_CHIP_ID_OF() {
....................     int8 chip_id[8];
....................     output_low(CS_PIN_1);  // Lower the CS PIN
*
01618:  BCF    F96.2
0161A:  BCF    F8D.2
....................     spi_xfer(SPIPORT, READ_ID);  // READ ID COMMAND (0x9F)
0161C:  MOVLW  9F
0161E:  MOVLB  6
01620:  MOVWF  x1E
01622:  MOVLW  08
01624:  MOVWF  x1F
01626:  MOVLW  01
01628:  MOVWF  x20
0162A:  MOVLB  0
0162C:  RCALL  1098
....................     
....................     // Receive 8 bytes of chip ID
....................     for (int i = 0; i < 8; i++) {
0162E:  MOVLB  5
01630:  CLRF   x12
01632:  MOVF   x12,W
01634:  SUBLW  07
01636:  BNC   1688
....................         chip_id[i] = spi_xfer(SPIPORT, 0x00);  // Send dummy bytes to receive data
01638:  CLRF   03
0163A:  MOVF   x12,W
0163C:  ADDLW  0A
0163E:  MOVWF  FE9
01640:  MOVLW  05
01642:  ADDWFC 03,W
01644:  MOVWF  FEA
01646:  MOVLB  6
01648:  CLRF   x1E
0164A:  MOVLW  08
0164C:  MOVWF  x1F
0164E:  MOVLW  01
01650:  MOVWF  x20
01652:  MOVLB  0
01654:  RCALL  1098
01656:  MOVFF  01,FEF
....................         fprintf(EXT, "%02X ", chip_id[i]);
0165A:  CLRF   03
0165C:  MOVLB  5
0165E:  MOVF   x12,W
01660:  ADDLW  0A
01662:  MOVWF  FE9
01664:  MOVLW  05
01666:  ADDWFC 03,W
01668:  MOVWF  FEA
0166A:  MOVFF  FEF,61D
0166E:  MOVLW  37
01670:  MOVLB  6
01672:  MOVWF  x1E
01674:  MOVLB  0
01676:  RCALL  1296
01678:  MOVLW  20
0167A:  MOVLB  6
0167C:  MOVWF  x23
0167E:  MOVLB  0
01680:  RCALL  0F42
01682:  MOVLB  5
01684:  INCF   x12,F
01686:  BRA    1632
....................     }
....................     fprintf(EXT,"\n");
01688:  MOVLW  0A
0168A:  MOVLB  6
0168C:  MOVWF  x23
0168E:  MOVLB  0
01690:  RCALL  0F42
.................... 
....................     output_high(CS_PIN_1);  // Raise CS PIN back
01692:  BCF    F96.2
01694:  BSF    F8D.2
01696:  RETURN 0
.................... }
.................... void READ_CHIP_ID_OF_COM() {
....................     int8 chip_id[8];
....................     output_low(MX_PIN_COM);
*
016E4:  BCF    F94.4
016E6:  BCF    F8B.4
....................     output_low(CS_PIN_COM);  // Lower the CS PIN
016E8:  BCF    F93.3
016EA:  BCF    F8A.3
....................     spi_xfer(SPIPORT2, READ_ID);  // READ ID COMMAND (0x9F)
016EC:  MOVLW  9F
016EE:  MOVLB  4
016F0:  MOVWF  xED
016F2:  MOVLW  08
016F4:  MOVWF  xEE
016F6:  MOVLW  01
016F8:  MOVWF  xEF
016FA:  MOVLB  0
016FC:  RCALL  1698
....................     
....................     // Receive 8 bytes of chip ID
....................     for (int i = 0; i < 8; i++) {
016FE:  MOVLB  4
01700:  CLRF   xEA
01702:  MOVF   xEA,W
01704:  SUBLW  07
01706:  BNC   1758
....................         chip_id[i] = spi_xfer(SPIPORT2, 0x00);  // Send dummy bytes to receive data
01708:  CLRF   03
0170A:  MOVF   xEA,W
0170C:  ADDLW  E2
0170E:  MOVWF  FE9
01710:  MOVLW  04
01712:  ADDWFC 03,W
01714:  MOVWF  FEA
01716:  CLRF   xED
01718:  MOVLW  08
0171A:  MOVWF  xEE
0171C:  MOVLW  01
0171E:  MOVWF  xEF
01720:  MOVLB  0
01722:  RCALL  1698
01724:  MOVFF  01,FEF
....................         fprintf(EXT, "%02X ", chip_id[i]);
01728:  CLRF   03
0172A:  MOVLB  4
0172C:  MOVF   xEA,W
0172E:  ADDLW  E2
01730:  MOVWF  FE9
01732:  MOVLW  04
01734:  ADDWFC 03,W
01736:  MOVWF  FEA
01738:  MOVFF  FEF,61D
0173C:  MOVLW  37
0173E:  MOVLB  6
01740:  MOVWF  x1E
01742:  MOVLB  0
01744:  RCALL  1296
01746:  MOVLW  20
01748:  MOVLB  6
0174A:  MOVWF  x23
0174C:  MOVLB  0
0174E:  CALL   0F42
01752:  MOVLB  4
01754:  INCF   xEA,F
01756:  BRA    1702
....................     }
....................     fprintf(EXT,"\n");
01758:  MOVLW  0A
0175A:  MOVLB  6
0175C:  MOVWF  x23
0175E:  MOVLB  0
01760:  CALL   0F42
.................... 
....................     output_high(CS_PIN_COM);  // Raise CS PIN back
01764:  BCF    F93.3
01766:  BSF    F8A.3
....................     output_high(MX_PIN_COM);
01768:  BCF    F94.4
0176A:  BSF    F8B.4
0176C:  GOTO   2A0A (RETURN)
.................... }
.................... 
.................... void READ_CHIP_ID_OF_ADCS() {
....................     int8 chip_id[8];
....................     output_low(MX_PIN_ADCS);
*
017BC:  BCF    F92.5
017BE:  BCF    F89.5
....................     output_low(CS_PIN_ADCS);  // Lower the CS PIN
017C0:  BCF    F92.2
017C2:  BCF    F89.2
....................     spi_xfer(SPIPORT3, READ_ID);  // READ ID COMMAND (0x9F)
017C4:  MOVLW  9F
017C6:  MOVLB  4
017C8:  MOVWF  xED
017CA:  MOVLW  08
017CC:  MOVWF  xEE
017CE:  MOVLW  01
017D0:  MOVWF  xEF
017D2:  MOVLB  0
017D4:  RCALL  1770
....................     
....................     // Receive 8 bytes of chip ID
....................     for (int i = 0; i < 8; i++) {
017D6:  MOVLB  4
017D8:  CLRF   xEA
017DA:  MOVF   xEA,W
017DC:  SUBLW  07
017DE:  BNC   1830
....................         chip_id[i] = spi_xfer(SPIPORT3, 0x00);  // Send dummy bytes to receive data
017E0:  CLRF   03
017E2:  MOVF   xEA,W
017E4:  ADDLW  E2
017E6:  MOVWF  FE9
017E8:  MOVLW  04
017EA:  ADDWFC 03,W
017EC:  MOVWF  FEA
017EE:  CLRF   xED
017F0:  MOVLW  08
017F2:  MOVWF  xEE
017F4:  MOVLW  01
017F6:  MOVWF  xEF
017F8:  MOVLB  0
017FA:  RCALL  1770
017FC:  MOVFF  01,FEF
....................         fprintf(EXT, "%02X ", chip_id[i]);
01800:  CLRF   03
01802:  MOVLB  4
01804:  MOVF   xEA,W
01806:  ADDLW  E2
01808:  MOVWF  FE9
0180A:  MOVLW  04
0180C:  ADDWFC 03,W
0180E:  MOVWF  FEA
01810:  MOVFF  FEF,61D
01814:  MOVLW  37
01816:  MOVLB  6
01818:  MOVWF  x1E
0181A:  MOVLB  0
0181C:  RCALL  1296
0181E:  MOVLW  20
01820:  MOVLB  6
01822:  MOVWF  x23
01824:  MOVLB  0
01826:  CALL   0F42
0182A:  MOVLB  4
0182C:  INCF   xEA,F
0182E:  BRA    17DA
....................     }
....................     fprintf(EXT,"\n");
01830:  MOVLW  0A
01832:  MOVLB  6
01834:  MOVWF  x23
01836:  MOVLB  0
01838:  CALL   0F42
.................... 
....................     output_high(CS_PIN_ADCS);  // Raise CS PIN back
0183C:  BCF    F92.2
0183E:  BSF    F89.2
....................     output_high(MX_PIN_ADCS);
01840:  BCF    F92.5
01842:  BSF    F89.5
01844:  GOTO   2A1E (RETURN)
.................... }
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //Command operation
.................... //void SEND_COMMAND_ADCS(void){
.................... //    WRITE_DATA_NBYTES_ADCS(ADCS_HK_ADDRESS, ADCS_COMMAND,1);
.................... //}
.................... ////void READ_HK_ADCS(void){
.................... ////    int8 state_of_pin = 0;
.................... ////    
.................... ////    state_of_pin = input_state(EN_SUP_3V3_2);
.................... ////    if(state_of_pin = FALSE){ 
.................... ////        READ_DATA_NBYTES_ADCS(ADCS_HK_ADDRESS[16], READ_HK_ADCS, 16);
.................... ////        
.................... ////    }
.................... ////}
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////EEPROM operation 
.................... ////thus functions used to store essential data order to prevent loosing it in unexpected shutdowns  
.................... //void EEPROM_
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... // Main menu functions
.................... 
.................... void startup_freeze(){
....................     delay_ms(2000);
*
00FB0:  MOVLW  08
00FB2:  MOVLB  4
00FB4:  MOVWF  xE2
00FB6:  MOVLW  FA
00FB8:  MOVWF  xE3
00FBA:  MOVLB  0
00FBC:  RCALL  0F18
00FBE:  MOVLB  4
00FC0:  DECFSZ xE2,F
00FC2:  BRA    0FB6
....................     fprintf(EXT, "POWER ON!\n");
00FC4:  MOVLW  B2
00FC6:  MOVWF  FF6
00FC8:  MOVLW  00
00FCA:  MOVWF  FF7
00FCC:  MOVLW  00
00FCE:  MOVWF  FF8
00FD0:  MOVLB  0
00FD2:  RCALL  0F88
....................     output_high(EN_SUP_3V3_1);
00FD4:  BCF    F93.0
00FD6:  BSF    F8A.0
....................     output_high(EN_SUP_3V3_2 );
00FD8:  BCF    F98.1
00FDA:  BSF    F8F.1
....................     output_high(EN_SUP_3V3_DAQ);
00FDC:  BCF    F95.0
00FDE:  BSF    F8C.0
....................     output_high(EN_SUP_UNREG);
00FE0:  BCF    F93.1
00FE2:  BSF    F8A.1
....................     output_high(EN_SUP_5V0);
00FE4:  BCF    F95.1
00FE6:  BSF    F8C.1
....................     output_low(MVCAM_PWR);
00FE8:  BCF    F98.0
00FEA:  BCF    F8F.0
....................     output_low(OVCAM_PWR);
00FEC:  BCF    F95.7
00FEE:  BCF    F8C.7
....................     output_high(ADCS_PWR);
00FF0:  BCF    F95.6
00FF2:  BSF    F8C.6
....................     output_high(CS_PIN_1);
00FF4:  BCF    F96.2
00FF6:  BSF    F8D.2
....................     output_high(CS_PIN_COM );
00FF8:  BCF    F93.3
00FFA:  BSF    F8A.3
....................     output_high(CS_PIN_ADCS );
00FFC:  BCF    F92.2
00FFE:  BSF    F89.2
....................     output_high(MX_PIN_OVCAM );
01000:  BCF    F98.2
01002:  BSF    F8F.2
....................     output_high(MX_PIN_MVCAM );
01004:  BCF    F98.3
01006:  BSF    F8F.3
....................     output_high(MX_PIN_ADCS );
01008:  BCF    F92.5
0100A:  BSF    F89.5
....................     output_high(MX_PIN_COM );
0100C:  BCF    F94.4
0100E:  BSF    F8B.4
....................     
....................     fprintf(EXT, "Digital pin out configured \n");
01010:  MOVLW  BE
01012:  MOVWF  FF6
01014:  MOVLW  00
01016:  MOVWF  FF7
01018:  MOVLW  00
0101A:  MOVWF  FF8
0101C:  RCALL  0F88
0101E:  GOTO   29DA (RETURN)
....................         
.................... }
.................... 
.................... void RTC_initialize(){
....................         setup_lcd(LCD_DISABLED);
*
01034:  MOVLB  E
01036:  CLRF   xD6
01038:  CLRF   xD7
0103A:  CLRF   xDA
0103C:  CLRF   xD8
0103E:  CLRF   xD9
01040:  MOVLB  F
....................     rtc_time_t read_clock;
....................     setup_rtc(RTC_ENABLE | RTC_CLOCK_SOSC | RTC_CLOCK_INT, 0);
01042:  MOVLB  F
01044:  MOVLW  55
01046:  MOVWF  F7E
01048:  MOVLW  AA
0104A:  MOVWF  F7E
0104C:  BSF    x5F.5
0104E:  CLRF   x5E
01050:  MOVLW  04
01052:  MOVWF  x57
01054:  MOVLW  80
01056:  MOVWF  x5F
01058:  BCF    x5F.5
....................     rtc_read(&read_clock);
0105A:  BSF    x5F.0
0105C:  BSF    x5F.1
0105E:  MOVLW  04
01060:  MOVWF  FEA
01062:  MOVLW  E2
01064:  MOVWF  FE9
01066:  MOVLW  04
01068:  MOVWF  01
0106A:  MOVF   x5C,W
0106C:  MOVLB  0
0106E:  RCALL  1022
01070:  MOVWF  FEE
01072:  MOVLB  F
01074:  MOVF   x5D,W
01076:  MOVLB  0
01078:  RCALL  1022
0107A:  MOVWF  FEE
0107C:  DECFSZ 01,F
0107E:  BRA    1082
01080:  BRA    1086
01082:  MOVLB  F
01084:  BRA    106A
....................     fprintf(EXT, "RTCC setup finished!\n");
01086:  MOVLW  DC
01088:  MOVWF  FF6
0108A:  MOVLW  00
0108C:  MOVWF  FF7
0108E:  MOVLW  00
01090:  MOVWF  FF8
01092:  RCALL  0F88
01094:  GOTO   29DE (RETURN)
.................... 
.................... }
.................... 
.................... void uart_repeater() {
....................     char received_data;
.................... 
....................     while (TRUE) {
....................         // Check if data is available on the EPS stream
....................         if (kbhit(EPS)) {
*
026C4:  BTFSC  F84.4
026C6:  BRA    26D6
....................             // Read one byte from the EPS stream
....................             received_data = fgetc(EPS);
026C8:  BRA    2678
026CA:  MOVFF  01,4E3
.................... 
....................             // Send the received byte to the EXT stream
....................             fputc(received_data, EXT);
026CE:  MOVFF  4E3,623
026D2:  CALL   0F42
....................         }
026D6:  BRA    26C4
....................     }
026D8:  GOTO   28CE (RETURN)
.................... }
.................... 
.................... //#define SHUTDOWN_COUNT_ADDRESS  0x00001000  // Address where shutdown count is stored
.................... 
.................... int8 update_shutdown_count(void) {
....................     fprintf(EXT, "Shutdown count started\n");
*
0151E:  MOVLW  F2
01520:  MOVWF  FF6
01522:  MOVLW  00
01524:  MOVWF  FF7
01526:  MOVLW  00
01528:  MOVWF  FF8
0152A:  RCALL  0F88
.................... 
....................     // Read shutdown count directly from memory
....................     unsigned char shutdown_count[1];
....................     shutdown_count[0] = READ_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, 1); // Updated call
0152C:  MOVLB  4
0152E:  CLRF   xE6
01530:  MOVLW  10
01532:  MOVWF  xE5
01534:  CLRF   xE4
01536:  MOVWF  xE3
01538:  MOVLW  01
0153A:  MOVWF  xE7
0153C:  MOVLB  0
0153E:  RCALL  10E4
01540:  MOVFF  01,4E2
....................     delay_ms(10);
01544:  MOVLW  0A
01546:  MOVLB  4
01548:  MOVWF  xE3
0154A:  MOVLB  0
0154C:  RCALL  0F18
.................... 
....................     fprintf(EXT, "Read shutdown count: %u\n", shutdown_count[0]);
0154E:  MOVLW  0A
01550:  MOVWF  FF6
01552:  MOVLW  01
01554:  MOVWF  FF7
01556:  MOVLW  00
01558:  MOVWF  FF8
0155A:  MOVLW  15
0155C:  MOVLB  6
0155E:  MOVWF  x1D
01560:  MOVLB  0
01562:  RCALL  11BE
01564:  MOVFF  4E2,4F6
01568:  MOVLW  1B
0156A:  MOVLB  4
0156C:  MOVWF  xF7
0156E:  MOVLB  0
01570:  RCALL  121A
01572:  MOVLW  0A
01574:  MOVLB  6
01576:  MOVWF  x23
01578:  MOVLB  0
0157A:  RCALL  0F42
.................... 
....................     shutdown_count[0]++;  // Increment the shutdown count
0157C:  MOVLB  4
0157E:  INCF   xE2,F
....................     fprintf(EXT, "Incremented shutdown count: %u\n", shutdown_count[0]);
01580:  MOVLW  24
01582:  MOVWF  FF6
01584:  MOVLW  01
01586:  MOVWF  FF7
01588:  MOVLW  00
0158A:  MOVWF  FF8
0158C:  MOVLW  1C
0158E:  MOVLB  6
01590:  MOVWF  x1D
01592:  MOVLB  0
01594:  RCALL  11BE
01596:  MOVFF  4E2,4F6
0159A:  MOVLW  1B
0159C:  MOVLB  4
0159E:  MOVWF  xF7
015A0:  MOVLB  0
015A2:  RCALL  121A
015A4:  MOVLW  0A
015A6:  MOVLB  6
015A8:  MOVWF  x23
015AA:  MOVLB  0
015AC:  RCALL  0F42
.................... 
....................     // Write the updated shutdown count back to memory
....................     WRITE_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
015AE:  MOVLB  6
015B0:  CLRF   x14
015B2:  MOVLW  10
015B4:  MOVWF  x13
015B6:  CLRF   x12
015B8:  MOVWF  x11
015BA:  MOVLW  04
015BC:  MOVWF  x16
015BE:  MOVLW  E2
015C0:  MOVWF  x15
015C2:  MOVLW  01
015C4:  MOVWF  x17
015C6:  MOVLB  0
015C8:  RCALL  13B6
....................     delay_ms(10);
015CA:  MOVLW  0A
015CC:  MOVLB  4
015CE:  MOVWF  xE3
015D0:  MOVLB  0
015D2:  RCALL  0F18
.................... 
....................     fprintf(EXT, "Now shutdown count is : %u\n\n", shutdown_count[0]);
015D4:  MOVLW  44
015D6:  MOVWF  FF6
015D8:  MOVLW  01
015DA:  MOVWF  FF7
015DC:  MOVLW  00
015DE:  MOVWF  FF8
015E0:  MOVLW  18
015E2:  MOVLB  6
015E4:  MOVWF  x1D
015E6:  MOVLB  0
015E8:  RCALL  11BE
015EA:  MOVFF  4E2,4F6
015EE:  MOVLW  1B
015F0:  MOVLB  4
015F2:  MOVWF  xF7
015F4:  MOVLB  0
015F6:  RCALL  121A
015F8:  MOVLW  0A
015FA:  MOVLB  6
015FC:  MOVWF  x23
015FE:  MOVLB  0
01600:  RCALL  0F42
01602:  MOVLW  0A
01604:  MOVLB  6
01606:  MOVWF  x23
01608:  MOVLB  0
0160A:  RCALL  0F42
.................... 
....................     return shutdown_count[0];
0160C:  MOVLB  4
0160E:  MOVFF  4E2,01
01612:  MOVLB  0
01614:  GOTO   29E2 (RETURN)
.................... }
.................... 
.................... 
.................... void set_clock(rtc_time_t &date_time){
.................... 
....................    date_time.tm_year=0000;
*
02436:  MOVLB  4
02438:  CLRF   xE4
....................    date_time.tm_mon=00;
0243A:  CLRF   xE7
....................    date_time.tm_mday=00;
0243C:  CLRF   xE6
....................    date_time.tm_wday=00;
0243E:  CLRF   xE9
....................    date_time.tm_hour=00;
02440:  CLRF   xE8
....................    date_time.tm_min=00;
02442:  CLRF   xEB
....................    date_time.tm_sec=0; 
02444:  CLRF   xEA
02446:  MOVLB  F
.................... }
.................... void write_to_main_flash_menu(){
....................             unsigned int32 address;
....................             unsigned int8 data[256]; // Buffer for data to be written (adjust size as needed)
....................             unsigned char data_number;
....................             unsigned char choice;
....................             unsigned int8 i;
....................             // Prompt user to enter the address
....................             fprintf(EXT, "\nEnter Address (hex, 0x1234): 0x");
*
01F28:  MOVLW  62
01F2A:  MOVWF  FF6
01F2C:  MOVLW  01
01F2E:  MOVWF  FF7
01F30:  MOVLW  00
01F32:  MOVWF  FF8
01F34:  CALL   0F88
....................             fscanf(EXT, "%x", &address); // Read address input in hex
01F38:  MOVLB  6
01F3A:  CLRF   x11
01F3C:  CLRF   x12
01F3E:  MOVLW  05
01F40:  MOVWF  x14
01F42:  MOVLW  0A
01F44:  MOVWF  x13
01F46:  CLRF   x16
01F48:  CLRF   x15
01F4A:  MOVLB  0
01F4C:  RCALL  1D48
01F4E:  MOVF   01,F
01F50:  BNZ   1F5A
01F52:  MOVLB  6
01F54:  CLRF   x12
01F56:  BRA    1F62
01F58:  MOVLB  0
01F5A:  MOVF   01,W
01F5C:  MOVLB  6
01F5E:  ADDWF  x11,F
01F60:  INCF   x12,F
.................... 
....................             // Prompt user to enter the number of bytes
....................             fprintf(EXT, "\nEnter number of bytes to write (max 256): ");
01F62:  MOVLW  84
01F64:  MOVWF  FF6
01F66:  MOVLW  01
01F68:  MOVWF  FF7
01F6A:  MOVLW  00
01F6C:  MOVWF  FF8
01F6E:  MOVLB  0
01F70:  CALL   0F88
....................             fscanf(EXT, "%x", &data_number); // Read number of bytes
01F74:  MOVLB  6
01F76:  CLRF   x11
01F78:  CLRF   x12
01F7A:  MOVLW  06
01F7C:  MOVWF  x16
01F7E:  MOVLW  0E
01F80:  MOVWF  x15
01F82:  CLRF   x18
01F84:  CLRF   x17
01F86:  MOVLB  0
01F88:  RCALL  1E58
01F8A:  MOVF   01,F
01F8C:  BNZ   1F96
01F8E:  MOVLB  6
01F90:  CLRF   x12
01F92:  BRA    1F9E
01F94:  MOVLB  0
01F96:  MOVF   01,W
01F98:  MOVLB  6
01F9A:  ADDWF  x11,F
01F9C:  INCF   x12,F
.................... 
....................             if (data_number > 256) {
....................                 fprintf(EXT, "Error: Maximum data length is 256 bytes.\n");
....................                 continue;
....................             }
.................... 
....................             // Get data from user
....................             fprintf(EXT, "Enter %d bytes of data (in hex):\n", data_number);
01F9E:  MOVLW  DA
01FA0:  MOVWF  FF6
01FA2:  MOVLW  01
01FA4:  MOVWF  FF7
01FA6:  MOVLW  00
01FA8:  MOVWF  FF8
01FAA:  MOVLW  06
01FAC:  MOVWF  x1D
01FAE:  MOVLB  0
01FB0:  CALL   11BE
01FB4:  MOVFF  60E,61D
01FB8:  MOVLW  18
01FBA:  MOVLB  6
01FBC:  MOVWF  x1E
01FBE:  MOVLB  0
01FC0:  CALL   12FA
01FC4:  MOVLW  E2
01FC6:  MOVWF  FF6
01FC8:  MOVLW  01
01FCA:  MOVWF  FF7
01FCC:  MOVLW  00
01FCE:  MOVWF  FF8
01FD0:  MOVLW  19
01FD2:  MOVLB  6
01FD4:  MOVWF  x1D
01FD6:  MOVLB  0
01FD8:  CALL   11BE
....................             for (i = 0; i < data_number; i++) {
01FDC:  MOVLB  6
01FDE:  CLRF   x10
01FE0:  MOVF   x0E,W
01FE2:  SUBWF  x10,W
01FE4:  BC    206C
....................                 fprintf(EXT, "Byte %d: 0x", i + 1);
01FE6:  MOVLW  01
01FE8:  ADDWF  x10,W
01FEA:  MOVWF  x11
01FEC:  MOVLW  FC
01FEE:  MOVWF  FF6
01FF0:  MOVLW  01
01FF2:  MOVWF  FF7
01FF4:  MOVLW  00
01FF6:  MOVWF  FF8
01FF8:  MOVLW  05
01FFA:  MOVWF  x1D
01FFC:  MOVLB  0
01FFE:  CALL   11BE
02002:  MOVFF  611,61D
02006:  MOVLW  18
02008:  MOVLB  6
0200A:  MOVWF  x1E
0200C:  MOVLB  0
0200E:  CALL   12FA
02012:  MOVLW  03
02014:  MOVWF  FF6
02016:  MOVLW  02
02018:  MOVWF  FF7
0201A:  MOVLW  00
0201C:  MOVWF  FF8
0201E:  MOVLW  04
02020:  MOVLB  6
02022:  MOVWF  x1D
02024:  MOVLB  0
02026:  CALL   11BE
....................                 fscanf(EXT, "%x", &data[i]); // Read byte in hex format
0202A:  CLRF   03
0202C:  MOVLB  6
0202E:  MOVF   x10,W
02030:  ADDLW  0E
02032:  MOVWF  01
02034:  MOVLW  05
02036:  ADDWFC 03,F
02038:  MOVFF  01,611
0203C:  MOVFF  03,612
02040:  CLRF   x13
02042:  CLRF   x14
02044:  MOVFF  03,616
02048:  MOVFF  01,615
0204C:  CLRF   x18
0204E:  CLRF   x17
02050:  MOVLB  0
02052:  RCALL  1E58
02054:  MOVF   01,F
02056:  BNZ   2060
02058:  MOVLB  6
0205A:  CLRF   x14
0205C:  BRA    2068
0205E:  MOVLB  0
02060:  MOVF   01,W
02062:  MOVLB  6
02064:  ADDWF  x13,F
02066:  INCF   x14,F
02068:  INCF   x10,F
0206A:  BRA    1FE0
....................             }
.................... 
....................             // Call the function to write data to the address
....................             WRITE_DATA_NBYTES(address, data, data_number);
0206C:  MOVFF  50D,614
02070:  MOVFF  50C,613
02074:  MOVFF  50B,612
02078:  MOVFF  50A,611
0207C:  MOVLW  05
0207E:  MOVWF  x16
02080:  MOVLW  0E
02082:  MOVWF  x15
02084:  MOVFF  60E,617
02088:  MOVLB  0
0208A:  CALL   13B6
.................... 
....................             fprintf(EXT, "\nData successfully written.\n");
0208E:  MOVLW  08
02090:  MOVWF  FF6
02092:  MOVLW  02
02094:  MOVWF  FF7
02096:  MOVLW  00
02098:  MOVWF  FF8
0209A:  CALL   0F88
0209E:  GOTO   219E (RETURN)
.................... }
.................... 
.................... void handle_main_flash_memory() {
....................     char main_flash_option;
....................     unsigned int32 address;
....................     unsigned char data[32];
....................     unsigned char data_length;
.................... 
....................     fprintf(EXT, "MAIN flash memory chosen\n");
020A2:  MOVLW  26
020A4:  MOVWF  FF6
020A6:  MOVLW  02
020A8:  MOVWF  FF7
020AA:  MOVLW  00
020AC:  MOVWF  FF8
020AE:  CALL   0F88
....................     fprintf(EXT, "press a: Read ID of the chip\n");
020B2:  MOVLW  40
020B4:  MOVWF  FF6
020B6:  MOVLW  02
020B8:  MOVWF  FF7
020BA:  MOVLW  00
020BC:  MOVWF  FF8
020BE:  CALL   0F88
....................     fprintf(EXT, "press b: Write data set in specified address\n");
020C2:  MOVLW  5E
020C4:  MOVWF  FF6
020C6:  MOVLW  02
020C8:  MOVWF  FF7
020CA:  MOVLW  00
020CC:  MOVWF  FF8
020CE:  CALL   0F88
....................     fprintf(EXT, "press c: Read data set in specified address\n");
020D2:  MOVLW  8C
020D4:  MOVWF  FF6
020D6:  MOVLW  02
020D8:  MOVWF  FF7
020DA:  MOVLW  00
020DC:  MOVWF  FF8
020DE:  CALL   0F88
....................     fprintf(EXT, "press x: Return to MAIN MENU\n");
020E2:  MOVLW  BA
020E4:  MOVWF  FF6
020E6:  MOVLW  02
020E8:  MOVWF  FF7
020EA:  MOVLW  00
020EC:  MOVWF  FF8
020EE:  CALL   0F88
.................... 
....................     main_flash_option = fgetc(EXT);
020F2:  CALL   1848
020F6:  MOVFF  01,4E4
.................... 
....................     switch (main_flash_option) {
020FA:  MOVLB  4
020FC:  MOVF   xE4,W
020FE:  XORLW  61
02100:  MOVLB  0
02102:  BZ    2112
02104:  XORLW  03
02106:  BZ    2128
02108:  XORLW  01
0210A:  BZ    212C
0210C:  XORLW  1B
0210E:  BZ    218C
02110:  BRA    218E
....................         case 'a':
....................             fprintf(EXT, "Started reading chip ID of MAIN flash memory\n");
02112:  MOVLW  D8
02114:  MOVWF  FF6
02116:  MOVLW  02
02118:  MOVWF  FF7
0211A:  MOVLW  00
0211C:  MOVWF  FF8
0211E:  CALL   0F88
....................             READ_CHIP_ID_OF();  // Replace with actual function
02122:  CALL   1618
....................             break;
02126:  BRA    219E
....................         case 'b':
....................             write_to_main_flash_menu();
02128:  BRA    1F28
....................             break;
0212A:  BRA    219E
....................         case 'c':
....................             fprintf(EXT, "Read data set in specified address\n");
0212C:  MOVLW  06
0212E:  MOVWF  FF6
02130:  MOVLW  03
02132:  MOVWF  FF7
02134:  MOVLW  00
02136:  MOVWF  FF8
02138:  CALL   0F88
....................             fprintf(EXT, "Enter your specified address: ");
0213C:  MOVLW  2A
0213E:  MOVWF  FF6
02140:  MOVLW  03
02142:  MOVWF  FF7
02144:  MOVLW  00
02146:  MOVWF  FF8
02148:  CALL   0F88
....................             scanf("%x", &address);
0214C:  MOVLB  5
0214E:  CLRF   x0A
02150:  CLRF   x0B
02152:  MOVLW  04
02154:  MOVLB  6
02156:  MOVWF  x14
02158:  MOVLW  E5
0215A:  MOVWF  x13
0215C:  CLRF   x16
0215E:  CLRF   x15
02160:  MOVLB  0
02162:  RCALL  1D48
02164:  MOVF   01,F
02166:  BNZ   2170
02168:  MOVLB  5
0216A:  CLRF   x0B
0216C:  BRA    2178
0216E:  MOVLB  0
02170:  MOVF   01,W
02172:  MOVLB  5
02174:  ADDWF  x0A,F
02176:  INCF   x0B,F
....................             fprintf(EXT, "Enter your specified address length : ");
02178:  MOVLW  4A
0217A:  MOVWF  FF6
0217C:  MOVLW  03
0217E:  MOVWF  FF7
02180:  MOVLW  00
02182:  MOVWF  FF8
02184:  MOVLB  0
02186:  CALL   0F88
.................... //            scanf("%d", &data_length);
.................... //            READ_DATA_NBYTES(address,data_length);  // Replace with actual function
....................             break;
0218A:  BRA    219E
....................         case 'x':
....................             return;
0218C:  BRA    219E
....................         default:
....................             fprintf(EXT, "Invalid MAIN flash memory option. Please try again.\n");
0218E:  MOVLW  72
02190:  MOVWF  FF6
02192:  MOVLW  03
02194:  MOVWF  FF7
02196:  MOVLW  00
02198:  MOVWF  FF8
0219A:  CALL   0F88
....................             break;
....................     }
0219E:  GOTO   22B8 (RETURN)
.................... }
.................... 
.................... void handle_flash_memories() {
....................     char flash_option;
....................     fprintf(EXT, "pressed option d: Check Flash Memories\n\n");
021A2:  MOVLW  A8
021A4:  MOVWF  FF6
021A6:  MOVLW  03
021A8:  MOVWF  FF7
021AA:  MOVLW  00
021AC:  MOVWF  FF8
021AE:  CALL   0F88
....................     fprintf(EXT, "Please choose which flash memory to work on (a, b, c):\n");
021B2:  MOVLW  D2
021B4:  MOVWF  FF6
021B6:  MOVLW  03
021B8:  MOVWF  FF7
021BA:  MOVLW  00
021BC:  MOVWF  FF8
021BE:  CALL   0F88
....................     fprintf(EXT, "press a: MAIN flash memory\n");
021C2:  MOVLW  0A
021C4:  MOVWF  FF6
021C6:  MOVLW  04
021C8:  MOVWF  FF7
021CA:  MOVLW  00
021CC:  MOVWF  FF8
021CE:  CALL   0F88
....................     fprintf(EXT, "press b: COM shared flash memory\n");
021D2:  MOVLW  26
021D4:  MOVWF  FF6
021D6:  MOVLW  04
021D8:  MOVWF  FF7
021DA:  MOVLW  00
021DC:  MOVWF  FF8
021DE:  CALL   0F88
....................     fprintf(EXT, "press c: ADCS shared flash memory\n");
021E2:  MOVLW  48
021E4:  MOVWF  FF6
021E6:  MOVLW  04
021E8:  MOVWF  FF7
021EA:  MOVLW  00
021EC:  MOVWF  FF8
021EE:  CALL   0F88
....................     fprintf(EXT, "press d: OVCAM shared flash memory\n");
021F2:  MOVLW  6C
021F4:  MOVWF  FF6
021F6:  MOVLW  04
021F8:  MOVWF  FF7
021FA:  MOVLW  00
021FC:  MOVWF  FF8
021FE:  CALL   0F88
....................     fprintf(EXT, "press e: MVCAM shared flash memory\n");
02202:  MOVLW  90
02204:  MOVWF  FF6
02206:  MOVLW  04
02208:  MOVWF  FF7
0220A:  MOVLW  00
0220C:  MOVWF  FF8
0220E:  CALL   0F88
....................     fprintf(EXT, "press x: Return to MAIN MENU\n");
02212:  MOVLW  B4
02214:  MOVWF  FF6
02216:  MOVLW  04
02218:  MOVWF  FF7
0221A:  MOVLW  00
0221C:  MOVWF  FF8
0221E:  CALL   0F88
.................... 
....................     flash_option = fgetc(EXT);
02222:  CALL   1848
02226:  MOVFF  01,4E3
.................... 
....................     switch (flash_option) {
0222A:  MOVLB  4
0222C:  MOVF   xE3,W
0222E:  XORLW  61
02230:  MOVLB  0
02232:  BZ    224A
02234:  XORLW  03
02236:  BZ    225E
02238:  XORLW  01
0223A:  BZ    2270
0223C:  XORLW  07
0223E:  BZ    2282
02240:  XORLW  01
02242:  BZ    2294
02244:  XORLW  1D
02246:  BZ    22A6
02248:  BRA    22A8
....................         case 'a':
....................             fprintf(EXT, "MAIN shared flash memory chosen\n");
0224A:  MOVLW  D2
0224C:  MOVWF  FF6
0224E:  MOVLW  04
02250:  MOVWF  FF7
02252:  MOVLW  00
02254:  MOVWF  FF8
02256:  CALL   0F88
....................             handle_main_flash_memory();
0225A:  BRA    20A2
....................             break;
0225C:  BRA    22B8
....................         case 'b':
....................             fprintf(EXT, "COM shared flash memory chosen\n");
0225E:  MOVLW  F4
02260:  MOVWF  FF6
02262:  MOVLW  04
02264:  MOVWF  FF7
02266:  MOVLW  00
02268:  MOVWF  FF8
0226A:  CALL   0F88
....................             // Implement COM shared flash memory handling
....................             break;
0226E:  BRA    22B8
....................         case 'c':
....................             fprintf(EXT, "ADCS shared flash memory chosen\n");
02270:  MOVLW  14
02272:  MOVWF  FF6
02274:  MOVLW  05
02276:  MOVWF  FF7
02278:  MOVLW  00
0227A:  MOVWF  FF8
0227C:  CALL   0F88
....................             // Implement ADCS shared flash memory handling
....................             break;
02280:  BRA    22B8
....................          case 'd':
....................             fprintf(EXT, "OVCAM shared flash memory chosen\n");
02282:  MOVLW  36
02284:  MOVWF  FF6
02286:  MOVLW  05
02288:  MOVWF  FF7
0228A:  MOVLW  00
0228C:  MOVWF  FF8
0228E:  CALL   0F88
....................             // Implement ADCS shared flash memory handling
....................             break;
02292:  BRA    22B8
....................          case 'e':
....................             fprintf(EXT, "MVCAM shared flash memory chosen\n");
02294:  MOVLW  58
02296:  MOVWF  FF6
02298:  MOVLW  05
0229A:  MOVWF  FF7
0229C:  MOVLW  00
0229E:  MOVWF  FF8
022A0:  CALL   0F88
....................             // Implement ADCS shared flash memory handling
....................             break;
022A4:  BRA    22B8
....................          case'x':
....................              break;
022A6:  BRA    22B8
....................         default:
....................             fprintf(EXT, "Invalid flash memory option. Please try again.\n");
022A8:  MOVLW  7A
022AA:  MOVWF  FF6
022AC:  MOVLW  05
022AE:  MOVWF  FF7
022B0:  MOVLW  00
022B2:  MOVWF  FF8
022B4:  CALL   0F88
....................             break;
....................     }
022B8:  GOTO   28CE (RETURN)
.................... }
.................... 
.................... 
.................... void handle_set_time() {
....................     char handle_set_time_option;
....................     fprintf(EXT, "Settings of RTC chosen\n");
*
022E0:  MOVLW  AA
022E2:  MOVWF  FF6
022E4:  MOVLW  05
022E6:  MOVWF  FF7
022E8:  MOVLW  00
022EA:  MOVWF  FF8
022EC:  CALL   0F88
....................     fprintf(EXT, "    press a: to reset the RTC /all current time will be set zero/\n");
022F0:  MOVLW  C2
022F2:  MOVWF  FF6
022F4:  MOVLW  05
022F6:  MOVWF  FF7
022F8:  MOVLW  00
022FA:  MOVWF  FF8
022FC:  CALL   0F88
....................     fprintf(EXT, "    press b: display current time\n");
02300:  MOVLW  06
02302:  MOVWF  FF6
02304:  MOVLW  06
02306:  MOVWF  FF7
02308:  MOVLW  00
0230A:  MOVWF  FF8
0230C:  CALL   0F88
....................     handle_set_time_option = fgetc(EXT);
02310:  CALL   1848
02314:  MOVFF  01,4E3
.................... 
....................     switch (handle_set_time_option) {
02318:  MOVLB  4
0231A:  MOVF   xE3,W
0231C:  XORLW  61
0231E:  MOVLB  0
02320:  BZ    2330
02322:  XORLW  03
02324:  BTFSC  FD8.2
02326:  BRA    2578
02328:  XORLW  1A
0232A:  BTFSC  FD8.2
0232C:  BRA    2660
0232E:  BRA    2664
....................         case 'a':
....................     rtc_time_t write_clock, read_clock;
....................     rtc_read(&read_clock);
02330:  MOVLB  F
02332:  BSF    x5F.0
02334:  BSF    x5F.1
02336:  MOVLW  04
02338:  MOVWF  FEA
0233A:  MOVLW  ED
0233C:  MOVWF  FE9
0233E:  MOVLW  04
02340:  MOVWF  01
02342:  MOVF   x5C,W
02344:  MOVLB  0
02346:  CALL   1022
0234A:  MOVWF  FEE
0234C:  MOVLB  F
0234E:  MOVF   x5D,W
02350:  MOVLB  0
02352:  CALL   1022
02356:  MOVWF  FEE
02358:  DECFSZ 01,F
0235A:  BRA    235E
0235C:  BRA    2362
0235E:  MOVLB  F
02360:  BRA    2342
....................     fprintf(EXT, "Now time is\n");
02362:  MOVLW  2A
02364:  MOVWF  FF6
02366:  MOVLW  06
02368:  MOVWF  FF7
0236A:  MOVLW  00
0236C:  MOVWF  FF8
0236E:  CALL   0F88
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
02372:  MOVLW  0D
02374:  MOVLB  6
02376:  MOVWF  x23
02378:  MOVLB  0
0237A:  CALL   0F42
0237E:  MOVFF  4F0,4F6
02382:  MOVLW  01
02384:  MOVLB  4
02386:  MOVWF  xF7
02388:  MOVLB  0
0238A:  CALL   121A
0238E:  MOVLW  2F
02390:  MOVLB  6
02392:  MOVWF  x23
02394:  MOVLB  0
02396:  CALL   0F42
0239A:  MOVFF  4EF,4F6
0239E:  MOVLW  01
023A0:  MOVLB  4
023A2:  MOVWF  xF7
023A4:  MOVLB  0
023A6:  CALL   121A
023AA:  MOVLW  42
023AC:  MOVWF  FF6
023AE:  MOVLW  06
023B0:  MOVWF  FF7
023B2:  MOVLW  00
023B4:  MOVWF  FF8
023B6:  MOVLW  03
023B8:  MOVLB  6
023BA:  MOVWF  x1D
023BC:  MOVLB  0
023BE:  CALL   11BE
023C2:  MOVFF  4ED,4F6
023C6:  MOVLW  01
023C8:  MOVLB  4
023CA:  MOVWF  xF7
023CC:  MOVLB  0
023CE:  CALL   121A
023D2:  MOVLW  20
023D4:  MOVLB  6
023D6:  MOVWF  x23
023D8:  MOVLB  0
023DA:  CALL   0F42
023DE:  MOVFF  4F1,4F6
023E2:  MOVLW  01
023E4:  MOVLB  4
023E6:  MOVWF  xF7
023E8:  MOVLB  0
023EA:  CALL   121A
023EE:  MOVLW  3A
023F0:  MOVLB  6
023F2:  MOVWF  x23
023F4:  MOVLB  0
023F6:  CALL   0F42
023FA:  MOVFF  4F4,4F6
023FE:  MOVLW  01
02400:  MOVLB  4
02402:  MOVWF  xF7
02404:  MOVLB  0
02406:  CALL   121A
0240A:  MOVLW  3A
0240C:  MOVLB  6
0240E:  MOVWF  x23
02410:  MOVLB  0
02412:  CALL   0F42
02416:  MOVFF  4F3,4F6
0241A:  MOVLW  01
0241C:  MOVLB  4
0241E:  MOVWF  xF7
02420:  MOVLB  0
02422:  CALL   121A
....................     fprintf(EXT, "Time changing function activated\n");
02426:  MOVLW  5A
02428:  MOVWF  FF6
0242A:  MOVLW  06
0242C:  MOVWF  FF7
0242E:  MOVLW  00
02430:  MOVWF  FF8
02432:  CALL   0F88
....................     set_clock(write_clock);
....................     rtc_write(&write_clock);
*
02448:  MOVLB  F
0244A:  MOVLW  55
0244C:  MOVWF  F7E
0244E:  MOVLW  AA
02450:  MOVWF  F7E
02452:  BSF    x5F.5
02454:  BSF    x5F.0
02456:  BSF    x5F.1
02458:  MOVLW  04
0245A:  MOVWF  FEA
0245C:  MOVLW  E4
0245E:  MOVWF  FE9
02460:  MOVLW  04
02462:  MOVWF  01
02464:  MOVF   FEE,W
02466:  MOVLB  0
02468:  RCALL  22BC
0246A:  MOVLB  F
0246C:  MOVWF  x5C
0246E:  MOVF   FEE,W
02470:  MOVLB  0
02472:  RCALL  22BC
02474:  MOVLB  F
02476:  MOVWF  x5D
02478:  DECFSZ 01,F
0247A:  BRA    2464
0247C:  BCF    x5F.5
....................     fprintf(EXT, "Time successfully changed. Current time is:\n");
0247E:  MOVLW  7C
02480:  MOVWF  FF6
02482:  MOVLW  06
02484:  MOVWF  FF7
02486:  MOVLW  00
02488:  MOVWF  FF8
0248A:  MOVLB  0
0248C:  CALL   0F88
....................     rtc_read(&read_clock);
02490:  MOVLB  F
02492:  BSF    x5F.0
02494:  BSF    x5F.1
02496:  MOVLW  04
02498:  MOVWF  FEA
0249A:  MOVLW  ED
0249C:  MOVWF  FE9
0249E:  MOVLW  04
024A0:  MOVWF  01
024A2:  MOVF   x5C,W
024A4:  MOVLB  0
024A6:  CALL   1022
024AA:  MOVWF  FEE
024AC:  MOVLB  F
024AE:  MOVF   x5D,W
024B0:  MOVLB  0
024B2:  CALL   1022
024B6:  MOVWF  FEE
024B8:  DECFSZ 01,F
024BA:  BRA    24BE
024BC:  BRA    24C2
024BE:  MOVLB  F
024C0:  BRA    24A2
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
024C2:  MOVLW  0D
024C4:  MOVLB  6
024C6:  MOVWF  x23
024C8:  MOVLB  0
024CA:  CALL   0F42
024CE:  MOVFF  4F0,4F6
024D2:  MOVLW  01
024D4:  MOVLB  4
024D6:  MOVWF  xF7
024D8:  MOVLB  0
024DA:  CALL   121A
024DE:  MOVLW  2F
024E0:  MOVLB  6
024E2:  MOVWF  x23
024E4:  MOVLB  0
024E6:  CALL   0F42
024EA:  MOVFF  4EF,4F6
024EE:  MOVLW  01
024F0:  MOVLB  4
024F2:  MOVWF  xF7
024F4:  MOVLB  0
024F6:  CALL   121A
024FA:  MOVLW  B4
024FC:  MOVWF  FF6
024FE:  MOVLW  06
02500:  MOVWF  FF7
02502:  MOVLW  00
02504:  MOVWF  FF8
02506:  MOVLW  03
02508:  MOVLB  6
0250A:  MOVWF  x1D
0250C:  MOVLB  0
0250E:  CALL   11BE
02512:  MOVFF  4ED,4F6
02516:  MOVLW  01
02518:  MOVLB  4
0251A:  MOVWF  xF7
0251C:  MOVLB  0
0251E:  CALL   121A
02522:  MOVLW  20
02524:  MOVLB  6
02526:  MOVWF  x23
02528:  MOVLB  0
0252A:  CALL   0F42
0252E:  MOVFF  4F1,4F6
02532:  MOVLW  01
02534:  MOVLB  4
02536:  MOVWF  xF7
02538:  MOVLB  0
0253A:  CALL   121A
0253E:  MOVLW  3A
02540:  MOVLB  6
02542:  MOVWF  x23
02544:  MOVLB  0
02546:  CALL   0F42
0254A:  MOVFF  4F4,4F6
0254E:  MOVLW  01
02550:  MOVLB  4
02552:  MOVWF  xF7
02554:  MOVLB  0
02556:  CALL   121A
0255A:  MOVLW  3A
0255C:  MOVLB  6
0255E:  MOVWF  x23
02560:  MOVLB  0
02562:  CALL   0F42
02566:  MOVFF  4F3,4F6
0256A:  MOVLW  01
0256C:  MOVLB  4
0256E:  MOVWF  xF7
02570:  MOVLB  0
02572:  CALL   121A
....................     break;
02576:  BRA    2674
....................         case 'b':
....................             rtc_read(&read_clock);
02578:  MOVLB  F
0257A:  BSF    x5F.0
0257C:  BSF    x5F.1
0257E:  MOVLW  04
02580:  MOVWF  FEA
02582:  MOVLW  ED
02584:  MOVWF  FE9
02586:  MOVLW  04
02588:  MOVWF  01
0258A:  MOVF   x5C,W
0258C:  MOVLB  0
0258E:  CALL   1022
02592:  MOVWF  FEE
02594:  MOVLB  F
02596:  MOVF   x5D,W
02598:  MOVLB  0
0259A:  CALL   1022
0259E:  MOVWF  FEE
025A0:  DECFSZ 01,F
025A2:  BRA    25A6
025A4:  BRA    25AA
025A6:  MOVLB  F
025A8:  BRA    258A
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
025AA:  MOVLW  0D
025AC:  MOVLB  6
025AE:  MOVWF  x23
025B0:  MOVLB  0
025B2:  CALL   0F42
025B6:  MOVFF  4F0,4F6
025BA:  MOVLW  01
025BC:  MOVLB  4
025BE:  MOVWF  xF7
025C0:  MOVLB  0
025C2:  CALL   121A
025C6:  MOVLW  2F
025C8:  MOVLB  6
025CA:  MOVWF  x23
025CC:  MOVLB  0
025CE:  CALL   0F42
025D2:  MOVFF  4EF,4F6
025D6:  MOVLW  01
025D8:  MOVLB  4
025DA:  MOVWF  xF7
025DC:  MOVLB  0
025DE:  CALL   121A
025E2:  MOVLW  D6
025E4:  MOVWF  FF6
025E6:  MOVLW  06
025E8:  MOVWF  FF7
025EA:  MOVLW  00
025EC:  MOVWF  FF8
025EE:  MOVLW  03
025F0:  MOVLB  6
025F2:  MOVWF  x1D
025F4:  MOVLB  0
025F6:  CALL   11BE
025FA:  MOVFF  4ED,4F6
025FE:  MOVLW  01
02600:  MOVLB  4
02602:  MOVWF  xF7
02604:  MOVLB  0
02606:  CALL   121A
0260A:  MOVLW  20
0260C:  MOVLB  6
0260E:  MOVWF  x23
02610:  MOVLB  0
02612:  CALL   0F42
02616:  MOVFF  4F1,4F6
0261A:  MOVLW  01
0261C:  MOVLB  4
0261E:  MOVWF  xF7
02620:  MOVLB  0
02622:  CALL   121A
02626:  MOVLW  3A
02628:  MOVLB  6
0262A:  MOVWF  x23
0262C:  MOVLB  0
0262E:  CALL   0F42
02632:  MOVFF  4F4,4F6
02636:  MOVLW  01
02638:  MOVLB  4
0263A:  MOVWF  xF7
0263C:  MOVLB  0
0263E:  CALL   121A
02642:  MOVLW  3A
02644:  MOVLB  6
02646:  MOVWF  x23
02648:  MOVLB  0
0264A:  CALL   0F42
0264E:  MOVFF  4F3,4F6
02652:  MOVLW  01
02654:  MOVLB  4
02656:  MOVWF  xF7
02658:  MOVLB  0
0265A:  CALL   121A
....................     break;
0265E:  BRA    2674
....................         case 'x':
....................             break;
02660:  BRA    2674
....................             return;
02662:  BRA    2674
....................         default:
....................             fprintf(EXT, "Invalid IO option. Please try again.\n");
02664:  MOVLW  EE
02666:  MOVWF  FF6
02668:  MOVLW  06
0266A:  MOVWF  FF7
0266C:  MOVLW  00
0266E:  MOVWF  FF8
02670:  CALL   0F88
....................     break;
....................             
.................... }
02674:  GOTO   28CE (RETURN)
.................... }
.................... 
.................... void handle_io_control() {
....................     char io_option;
....................     int8 state_of_pin;
.................... 
....................     fprintf(EXT, "IO control chosen\n");
*
01892:  MOVLW  14
01894:  MOVWF  FF6
01896:  MOVLW  07
01898:  MOVWF  FF7
0189A:  MOVLW  00
0189C:  MOVWF  FF8
0189E:  CALL   0F88
.................... 
....................     // Check and display the state of each pin before providing options
....................     state_of_pin = input_state(EN_SUP_3V3_1);
018A2:  MOVLB  4
018A4:  CLRF   xE4
018A6:  BTFSC  F81.0
018A8:  INCF   xE4,F
....................     fprintf(EXT, "    press a: Toggle EN_SUP_3V3_1 /is currently/");
018AA:  MOVLW  28
018AC:  MOVWF  FF6
018AE:  MOVLW  07
018B0:  MOVWF  FF7
018B2:  MOVLW  00
018B4:  MOVWF  FF8
018B6:  MOVLB  0
018B8:  CALL   0F88
....................     if(state_of_pin == 1 ){
018BC:  MOVLB  4
018BE:  DECFSZ xE4,W
018C0:  BRA    18D8
....................         fprintf(EXT, "HIGH\n");
018C2:  MOVLW  58
018C4:  MOVWF  FF6
018C6:  MOVLW  07
018C8:  MOVWF  FF7
018CA:  MOVLW  00
018CC:  MOVWF  FF8
018CE:  MOVLB  0
018D0:  CALL   0F88
....................     }else if(state_of_pin == 0){
018D4:  BRA    1904
018D6:  MOVLB  4
018D8:  MOVF   xE4,F
018DA:  BNZ   18F2
....................         fprintf(EXT, "LOW\n");
018DC:  MOVLW  5E
018DE:  MOVWF  FF6
018E0:  MOVLW  07
018E2:  MOVWF  FF7
018E4:  MOVLW  00
018E6:  MOVWF  FF8
018E8:  MOVLB  0
018EA:  CALL   0F88
....................     }else {
018EE:  BRA    1904
018F0:  MOVLB  4
....................         fprintf(EXT, "Invalid\n"); 
018F2:  MOVLW  64
018F4:  MOVWF  FF6
018F6:  MOVLW  07
018F8:  MOVWF  FF7
018FA:  MOVLW  00
018FC:  MOVWF  FF8
018FE:  MOVLB  0
01900:  CALL   0F88
....................     }
....................     state_of_pin = input_state(EN_SUP_3V3_2);
01904:  MOVLB  4
01906:  CLRF   xE4
01908:  BTFSC  F86.1
0190A:  INCF   xE4,F
....................     fprintf(EXT, "    press b: Toggle EN_SUP_3V3_2 /is currently/");
0190C:  MOVLW  6E
0190E:  MOVWF  FF6
01910:  MOVLW  07
01912:  MOVWF  FF7
01914:  MOVLW  00
01916:  MOVWF  FF8
01918:  MOVLB  0
0191A:  CALL   0F88
....................     if(state_of_pin == 1 ){
0191E:  MOVLB  4
01920:  DECFSZ xE4,W
01922:  BRA    193A
....................         fprintf(EXT, "HIGH\n");
01924:  MOVLW  9E
01926:  MOVWF  FF6
01928:  MOVLW  07
0192A:  MOVWF  FF7
0192C:  MOVLW  00
0192E:  MOVWF  FF8
01930:  MOVLB  0
01932:  CALL   0F88
....................     }else if(state_of_pin == 0){
01936:  BRA    1966
01938:  MOVLB  4
0193A:  MOVF   xE4,F
0193C:  BNZ   1954
....................         fprintf(EXT, "LOW\n");
0193E:  MOVLW  A4
01940:  MOVWF  FF6
01942:  MOVLW  07
01944:  MOVWF  FF7
01946:  MOVLW  00
01948:  MOVWF  FF8
0194A:  MOVLB  0
0194C:  CALL   0F88
....................     }else {
01950:  BRA    1966
01952:  MOVLB  4
....................         fprintf(EXT, "Invalid\n"); 
01954:  MOVLW  AA
01956:  MOVWF  FF6
01958:  MOVLW  07
0195A:  MOVWF  FF7
0195C:  MOVLW  00
0195E:  MOVWF  FF8
01960:  MOVLB  0
01962:  CALL   0F88
....................     }
....................      state_of_pin = input_state(EN_SUP_3V3_DAQ);
01966:  MOVLB  4
01968:  CLRF   xE4
0196A:  BTFSC  F83.0
0196C:  INCF   xE4,F
....................     fprintf(EXT, "    press c: Toggle EN_SUP_3V3_DAQ /is currently/");
0196E:  MOVLW  B4
01970:  MOVWF  FF6
01972:  MOVLW  07
01974:  MOVWF  FF7
01976:  MOVLW  00
01978:  MOVWF  FF8
0197A:  MOVLB  0
0197C:  CALL   0F88
....................     if(state_of_pin == 1 ){
01980:  MOVLB  4
01982:  DECFSZ xE4,W
01984:  BRA    199C
....................         fprintf(EXT, "HIGH\n");
01986:  MOVLW  E6
01988:  MOVWF  FF6
0198A:  MOVLW  07
0198C:  MOVWF  FF7
0198E:  MOVLW  00
01990:  MOVWF  FF8
01992:  MOVLB  0
01994:  CALL   0F88
....................     }else if(state_of_pin == 0){
01998:  BRA    19C8
0199A:  MOVLB  4
0199C:  MOVF   xE4,F
0199E:  BNZ   19B6
....................         fprintf(EXT, "LOW\n");
019A0:  MOVLW  EC
019A2:  MOVWF  FF6
019A4:  MOVLW  07
019A6:  MOVWF  FF7
019A8:  MOVLW  00
019AA:  MOVWF  FF8
019AC:  MOVLB  0
019AE:  CALL   0F88
....................     }else {
019B2:  BRA    19C8
019B4:  MOVLB  4
....................         fprintf(EXT, "Invalid\n"); 
019B6:  MOVLW  F2
019B8:  MOVWF  FF6
019BA:  MOVLW  07
019BC:  MOVWF  FF7
019BE:  MOVLW  00
019C0:  MOVWF  FF8
019C2:  MOVLB  0
019C4:  CALL   0F88
....................     }
....................     state_of_pin = input_state(EN_SUP_UNREG);
019C8:  MOVLB  4
019CA:  CLRF   xE4
019CC:  BTFSC  F81.1
019CE:  INCF   xE4,F
....................     fprintf(EXT, "    press d: Toggle EN_SUP_UNREG /is currently/");
019D0:  MOVLW  FC
019D2:  MOVWF  FF6
019D4:  MOVLW  07
019D6:  MOVWF  FF7
019D8:  MOVLW  00
019DA:  MOVWF  FF8
019DC:  MOVLB  0
019DE:  CALL   0F88
....................     if(state_of_pin == 1 ){
019E2:  MOVLB  4
019E4:  DECFSZ xE4,W
019E6:  BRA    19FE
....................         fprintf(EXT, "HIGH\n");
019E8:  MOVLW  2C
019EA:  MOVWF  FF6
019EC:  MOVLW  08
019EE:  MOVWF  FF7
019F0:  MOVLW  00
019F2:  MOVWF  FF8
019F4:  MOVLB  0
019F6:  CALL   0F88
....................     }else if(state_of_pin == 0){
019FA:  BRA    1A2A
019FC:  MOVLB  4
019FE:  MOVF   xE4,F
01A00:  BNZ   1A18
....................         fprintf(EXT, "LOW\n");
01A02:  MOVLW  32
01A04:  MOVWF  FF6
01A06:  MOVLW  08
01A08:  MOVWF  FF7
01A0A:  MOVLW  00
01A0C:  MOVWF  FF8
01A0E:  MOVLB  0
01A10:  CALL   0F88
....................     }else {
01A14:  BRA    1A2A
01A16:  MOVLB  4
....................         fprintf(EXT, "Invalid\n"); 
01A18:  MOVLW  38
01A1A:  MOVWF  FF6
01A1C:  MOVLW  08
01A1E:  MOVWF  FF7
01A20:  MOVLW  00
01A22:  MOVWF  FF8
01A24:  MOVLB  0
01A26:  CALL   0F88
....................     }
....................     state_of_pin = input_state(EN_SUP_5V0);
01A2A:  MOVLB  4
01A2C:  CLRF   xE4
01A2E:  BTFSC  F83.1
01A30:  INCF   xE4,F
....................     fprintf(EXT, "    press e: Toggle EN_SUP_5V0 /is currently/");
01A32:  MOVLW  42
01A34:  MOVWF  FF6
01A36:  MOVLW  08
01A38:  MOVWF  FF7
01A3A:  MOVLW  00
01A3C:  MOVWF  FF8
01A3E:  MOVLB  0
01A40:  CALL   0F88
....................     if(state_of_pin == 1 ){
01A44:  MOVLB  4
01A46:  DECFSZ xE4,W
01A48:  BRA    1A60
....................         fprintf(EXT, "HIGH\n");
01A4A:  MOVLW  70
01A4C:  MOVWF  FF6
01A4E:  MOVLW  08
01A50:  MOVWF  FF7
01A52:  MOVLW  00
01A54:  MOVWF  FF8
01A56:  MOVLB  0
01A58:  CALL   0F88
....................     }else if(state_of_pin == 0){
01A5C:  BRA    1A8C
01A5E:  MOVLB  4
01A60:  MOVF   xE4,F
01A62:  BNZ   1A7A
....................         fprintf(EXT, "LOW\n");
01A64:  MOVLW  76
01A66:  MOVWF  FF6
01A68:  MOVLW  08
01A6A:  MOVWF  FF7
01A6C:  MOVLW  00
01A6E:  MOVWF  FF8
01A70:  MOVLB  0
01A72:  CALL   0F88
....................     }else {
01A76:  BRA    1A8C
01A78:  MOVLB  4
....................         fprintf(EXT, "Invalid\n"); 
01A7A:  MOVLW  7C
01A7C:  MOVWF  FF6
01A7E:  MOVLW  08
01A80:  MOVWF  FF7
01A82:  MOVLW  00
01A84:  MOVWF  FF8
01A86:  MOVLB  0
01A88:  CALL   0F88
....................     }
....................     state_of_pin = input_state(KILL_SWITCH);
01A8C:  MOVLB  4
01A8E:  CLRF   xE4
01A90:  BTFSC  F80.4
01A92:  INCF   xE4,F
....................     fprintf(EXT, "    press f: Toggle KILL_SWITCH /is currently/");
01A94:  MOVLW  86
01A96:  MOVWF  FF6
01A98:  MOVLW  08
01A9A:  MOVWF  FF7
01A9C:  MOVLW  00
01A9E:  MOVWF  FF8
01AA0:  MOVLB  0
01AA2:  CALL   0F88
....................     if(state_of_pin == 1 ){
01AA6:  MOVLB  4
01AA8:  DECFSZ xE4,W
01AAA:  BRA    1AC2
....................         fprintf(EXT, "HIGH\n");
01AAC:  MOVLW  B6
01AAE:  MOVWF  FF6
01AB0:  MOVLW  08
01AB2:  MOVWF  FF7
01AB4:  MOVLW  00
01AB6:  MOVWF  FF8
01AB8:  MOVLB  0
01ABA:  CALL   0F88
....................     }else if(state_of_pin == 0){
01ABE:  BRA    1AEE
01AC0:  MOVLB  4
01AC2:  MOVF   xE4,F
01AC4:  BNZ   1ADC
....................         fprintf(EXT, "LOW\n");
01AC6:  MOVLW  BC
01AC8:  MOVWF  FF6
01ACA:  MOVLW  08
01ACC:  MOVWF  FF7
01ACE:  MOVLW  00
01AD0:  MOVWF  FF8
01AD2:  MOVLB  0
01AD4:  CALL   0F88
....................     }else {
01AD8:  BRA    1AEE
01ADA:  MOVLB  4
....................         fprintf(EXT, "Invalid\n"); 
01ADC:  MOVLW  C2
01ADE:  MOVWF  FF6
01AE0:  MOVLW  08
01AE2:  MOVWF  FF7
01AE4:  MOVLW  00
01AE6:  MOVWF  FF8
01AE8:  MOVLB  0
01AEA:  CALL   0F88
....................     }
....................         state_of_pin = input_state(MVCAM_PWR);
01AEE:  MOVLB  4
01AF0:  CLRF   xE4
01AF2:  BTFSC  F86.0
01AF4:  INCF   xE4,F
....................     fprintf(EXT, "    press g: Toggle MVCAM_PWR /is currently/");
01AF6:  MOVLW  CC
01AF8:  MOVWF  FF6
01AFA:  MOVLW  08
01AFC:  MOVWF  FF7
01AFE:  MOVLW  00
01B00:  MOVWF  FF8
01B02:  MOVLB  0
01B04:  CALL   0F88
....................     if(state_of_pin == 1 ){
01B08:  MOVLB  4
01B0A:  DECFSZ xE4,W
01B0C:  BRA    1B24
....................         fprintf(EXT, "HIGH\n");
01B0E:  MOVLW  FA
01B10:  MOVWF  FF6
01B12:  MOVLW  08
01B14:  MOVWF  FF7
01B16:  MOVLW  00
01B18:  MOVWF  FF8
01B1A:  MOVLB  0
01B1C:  CALL   0F88
....................     }else if(state_of_pin == 0){
01B20:  BRA    1B50
01B22:  MOVLB  4
01B24:  MOVF   xE4,F
01B26:  BNZ   1B3E
....................         fprintf(EXT, "LOW\n");
01B28:  MOVLW  00
01B2A:  MOVWF  FF6
01B2C:  MOVLW  09
01B2E:  MOVWF  FF7
01B30:  MOVLW  00
01B32:  MOVWF  FF8
01B34:  MOVLB  0
01B36:  CALL   0F88
....................     }else {
01B3A:  BRA    1B50
01B3C:  MOVLB  4
....................         fprintf(EXT, "Invalid\n"); 
01B3E:  MOVLW  06
01B40:  MOVWF  FF6
01B42:  MOVLW  09
01B44:  MOVWF  FF7
01B46:  MOVLW  00
01B48:  MOVWF  FF8
01B4A:  MOVLB  0
01B4C:  CALL   0F88
....................     }
....................         state_of_pin = input_state(OVCAM_PWR);
01B50:  MOVLB  4
01B52:  CLRF   xE4
01B54:  BTFSC  F83.7
01B56:  INCF   xE4,F
....................     fprintf(EXT, "    press h: Toggle OVCAM_PWR /is currently/");
01B58:  MOVLW  10
01B5A:  MOVWF  FF6
01B5C:  MOVLW  09
01B5E:  MOVWF  FF7
01B60:  MOVLW  00
01B62:  MOVWF  FF8
01B64:  MOVLB  0
01B66:  CALL   0F88
....................     if(state_of_pin == 1 ){
01B6A:  MOVLB  4
01B6C:  DECFSZ xE4,W
01B6E:  BRA    1B86
....................         fprintf(EXT, "HIGH\n");
01B70:  MOVLW  3E
01B72:  MOVWF  FF6
01B74:  MOVLW  09
01B76:  MOVWF  FF7
01B78:  MOVLW  00
01B7A:  MOVWF  FF8
01B7C:  MOVLB  0
01B7E:  CALL   0F88
....................     }else if(state_of_pin == 0){
01B82:  BRA    1BB2
01B84:  MOVLB  4
01B86:  MOVF   xE4,F
01B88:  BNZ   1BA0
....................         fprintf(EXT, "LOW\n");
01B8A:  MOVLW  44
01B8C:  MOVWF  FF6
01B8E:  MOVLW  09
01B90:  MOVWF  FF7
01B92:  MOVLW  00
01B94:  MOVWF  FF8
01B96:  MOVLB  0
01B98:  CALL   0F88
....................     }else {
01B9C:  BRA    1BB2
01B9E:  MOVLB  4
....................         fprintf(EXT, "Invalid\n"); 
01BA0:  MOVLW  4A
01BA2:  MOVWF  FF6
01BA4:  MOVLW  09
01BA6:  MOVWF  FF7
01BA8:  MOVLW  00
01BAA:  MOVWF  FF8
01BAC:  MOVLB  0
01BAE:  CALL   0F88
....................     }
....................         state_of_pin = input_state(ADCS_PWR);
01BB2:  MOVLB  4
01BB4:  CLRF   xE4
01BB6:  BTFSC  F83.6
01BB8:  INCF   xE4,F
....................     fprintf(EXT, "    press i: Toggle ADCS_PWR /is currently/");
01BBA:  MOVLW  54
01BBC:  MOVWF  FF6
01BBE:  MOVLW  09
01BC0:  MOVWF  FF7
01BC2:  MOVLW  00
01BC4:  MOVWF  FF8
01BC6:  MOVLB  0
01BC8:  CALL   0F88
....................     if(state_of_pin == 1 ){
01BCC:  MOVLB  4
01BCE:  DECFSZ xE4,W
01BD0:  BRA    1BE8
....................         fprintf(EXT, "HIGH\n");
01BD2:  MOVLW  80
01BD4:  MOVWF  FF6
01BD6:  MOVLW  09
01BD8:  MOVWF  FF7
01BDA:  MOVLW  00
01BDC:  MOVWF  FF8
01BDE:  MOVLB  0
01BE0:  CALL   0F88
....................     }else if(state_of_pin == 0){
01BE4:  BRA    1C14
01BE6:  MOVLB  4
01BE8:  MOVF   xE4,F
01BEA:  BNZ   1C02
....................         fprintf(EXT, "LOW\n");
01BEC:  MOVLW  86
01BEE:  MOVWF  FF6
01BF0:  MOVLW  09
01BF2:  MOVWF  FF7
01BF4:  MOVLW  00
01BF6:  MOVWF  FF8
01BF8:  MOVLB  0
01BFA:  CALL   0F88
....................     }else {
01BFE:  BRA    1C14
01C00:  MOVLB  4
....................         fprintf(EXT, "Invalid\n"); 
01C02:  MOVLW  8C
01C04:  MOVWF  FF6
01C06:  MOVLW  09
01C08:  MOVWF  FF7
01C0A:  MOVLW  00
01C0C:  MOVWF  FF8
01C0E:  MOVLB  0
01C10:  CALL   0F88
....................     }
....................     fprintf(EXT, "    press j: Toggle all Pins");
01C14:  MOVLW  96
01C16:  MOVWF  FF6
01C18:  MOVLW  09
01C1A:  MOVWF  FF7
01C1C:  MOVLW  00
01C1E:  MOVWF  FF8
01C20:  CALL   0F88
....................     
.................... 
....................     io_option = fgetc(EXT);
01C24:  RCALL  1848
01C26:  MOVFF  01,4E3
.................... 
....................     switch (io_option) {
01C2A:  MOVLB  4
01C2C:  MOVF   xE3,W
01C2E:  XORLW  61
01C30:  MOVLB  0
01C32:  BZ    1C5E
01C34:  XORLW  03
01C36:  BZ    1C64
01C38:  XORLW  01
01C3A:  BZ    1C6A
01C3C:  XORLW  07
01C3E:  BZ    1C70
01C40:  XORLW  01
01C42:  BZ    1C76
01C44:  XORLW  03
01C46:  BZ    1C7C
01C48:  XORLW  01
01C4A:  BZ    1C82
01C4C:  XORLW  0F
01C4E:  BZ    1C88
01C50:  XORLW  01
01C52:  BZ    1C8E
01C54:  XORLW  03
01C56:  BZ    1C94
01C58:  XORLW  12
01C5A:  BZ    1CB6
01C5C:  BRA    1CBA
....................         case 'a':
....................             output_toggle(EN_SUP_3V3_1);
01C5E:  BCF    F93.0
01C60:  BTG    F8A.0
....................             break;
01C62:  BRA    1CCA
....................         case 'b':
....................             output_toggle(EN_SUP_3V3_2);
01C64:  BCF    F98.1
01C66:  BTG    F8F.1
....................             break;
01C68:  BRA    1CCA
....................         case 'c':
....................             output_toggle(EN_SUP_3V3_DAQ);
01C6A:  BCF    F95.0
01C6C:  BTG    F8C.0
....................             break;
01C6E:  BRA    1CCA
....................         case 'd':
....................             output_toggle(EN_SUP_UNREG);
01C70:  BCF    F93.1
01C72:  BTG    F8A.1
....................             break;
01C74:  BRA    1CCA
....................         case 'e':
....................             output_toggle(EN_SUP_5V0);
01C76:  BCF    F95.1
01C78:  BTG    F8C.1
....................             break;
01C7A:  BRA    1CCA
....................         case 'f':
....................             output_toggle(KILL_SWITCH);
01C7C:  BCF    F92.4
01C7E:  BTG    F89.4
....................             break;
01C80:  BRA    1CCA
....................         case 'g':
....................             output_toggle(MVCAM_PWR);
01C82:  BCF    F98.0
01C84:  BTG    F8F.0
....................             break;
01C86:  BRA    1CCA
....................         case 'h':
....................             output_toggle(OVCAM_PWR);        
01C88:  BCF    F95.7
01C8A:  BTG    F8C.7
....................             break;
01C8C:  BRA    1CCA
....................         case 'i':
....................             output_toggle(ADCS_PWR);        
01C8E:  BCF    F95.6
01C90:  BTG    F8C.6
....................             break;    
01C92:  BRA    1CCA
....................         case 'j' :
....................             output_toggle(OVCAM_PWR);
01C94:  BCF    F95.7
01C96:  BTG    F8C.7
....................             output_toggle(MVCAM_PWR);  
01C98:  BCF    F98.0
01C9A:  BTG    F8F.0
....................             output_toggle(KILL_SWITCH);
01C9C:  BCF    F92.4
01C9E:  BTG    F89.4
....................             output_toggle(EN_SUP_5V0);
01CA0:  BCF    F95.1
01CA2:  BTG    F8C.1
....................             output_toggle(EN_SUP_UNREG);
01CA4:  BCF    F93.1
01CA6:  BTG    F8A.1
....................             output_toggle(EN_SUP_3V3_DAQ);
01CA8:  BCF    F95.0
01CAA:  BTG    F8C.0
....................             output_toggle(EN_SUP_3V3_2);
01CAC:  BCF    F98.1
01CAE:  BTG    F8F.1
....................             output_toggle(EN_SUP_3V3_1);
01CB0:  BCF    F93.0
01CB2:  BTG    F8A.0
....................             break;
01CB4:  BRA    1CCA
....................         case 'x':
....................             break;
01CB6:  BRA    1CCA
....................             return;
01CB8:  BRA    1CCA
....................         default:
....................             fprintf(EXT, "Invalid IO option. Please try again.\n");
01CBA:  MOVLW  B4
01CBC:  MOVWF  FF6
01CBE:  MOVLW  09
01CC0:  MOVWF  FF7
01CC2:  MOVLW  00
01CC4:  MOVWF  FF8
01CC6:  CALL   0F88
....................             break;
....................     }
01CCA:  GOTO   28CE (RETURN)
.................... }
.................... 
.................... 
.................... void main_menu(void) {
....................     char option;
....................   fprintf(EXT, " __  __ _____ _   _ _   _   _____                 _   _             \n");
*
026DC:  MOVLW  DA
026DE:  MOVWF  FF6
026E0:  MOVLW  09
026E2:  MOVWF  FF7
026E4:  MOVLW  00
026E6:  MOVWF  FF8
026E8:  CALL   0F88
....................   fprintf(EXT, "|  \\/  | ____| \\ | | | | | |  ___|   _ _ __   ___| |_(_) ___  _ __  \n");
026EC:  MOVLW  20
026EE:  MOVWF  FF6
026F0:  MOVLW  0A
026F2:  MOVWF  FF7
026F4:  MOVLW  00
026F6:  MOVWF  FF8
026F8:  CALL   0F88
....................   fprintf(EXT, "| |\\/| |  _| |  \\| | | | | | |_ | | | | '_ \\ / __| __| |/ _ \\| '_ \\ \n");
026FC:  MOVLW  66
026FE:  MOVWF  FF6
02700:  MOVLW  0A
02702:  MOVWF  FF7
02704:  MOVLW  00
02706:  MOVWF  FF8
02708:  CALL   0F88
....................   fprintf(EXT, "| |  | | |___| |\\  | |_| | |  _|| |_| | | | | (__| |_| | (_) | | | |\n");
0270C:  MOVLW  AC
0270E:  MOVWF  FF6
02710:  MOVLW  0A
02712:  MOVWF  FF7
02714:  MOVLW  00
02716:  MOVWF  FF8
02718:  CALL   0F88
....................   fprintf(EXT, "|_| _|_|_____|_| \\_|\\___/  |_|_  \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|\n");
0271C:  MOVLW  F2
0271E:  MOVWF  FF6
02720:  MOVLW  0A
02722:  MOVWF  FF7
02724:  MOVLW  00
02726:  MOVWF  FF8
02728:  CALL   0F88
....................   fprintf(EXT, "   / \\   ___| |_(_)_   ____ _| |_ ___  __| | |                      \n");
0272C:  MOVLW  38
0272E:  MOVWF  FF6
02730:  MOVLW  0B
02732:  MOVWF  FF7
02734:  MOVLW  00
02736:  MOVWF  FF8
02738:  CALL   0F88
....................   fprintf(EXT, "  / _ \\ / __| __| \\ \\ / / _` | __/ _ \\/ _` | |                      \n");
0273C:  MOVLW  7E
0273E:  MOVWF  FF6
02740:  MOVLW  0B
02742:  MOVWF  FF7
02744:  MOVLW  00
02746:  MOVWF  FF8
02748:  CALL   0F88
....................   fprintf(EXT, " / ___ \\ (__| |_| |\\ V / (_| | ||  __/ (_| |_|                      \n");
0274C:  MOVLW  C4
0274E:  MOVWF  FF6
02750:  MOVLW  0B
02752:  MOVWF  FF7
02754:  MOVLW  00
02756:  MOVWF  FF8
02758:  CALL   0F88
....................   fprintf(EXT, "/_/   \\_\\___|\\__|_| \\_/ \\__,_|\\__\\___|\\__,_(_)                      \n");
0275C:  MOVLW  0A
0275E:  MOVWF  FF6
02760:  MOVLW  0C
02762:  MOVWF  FF7
02764:  MOVLW  00
02766:  MOVWF  FF8
02768:  CALL   0F88
....................     
....................     while (1) {
....................         // Display Main Menu
....................         fprintf(EXT, "\n-----------------Main Menu-----------------\n");
0276C:  MOVLW  50
0276E:  MOVWF  FF6
02770:  MOVLW  0C
02772:  MOVWF  FF7
02774:  MOVLW  00
02776:  MOVWF  FF8
02778:  CALL   0F88
....................         fprintf(EXT, "    press a: Get House keeping data\n");
0277C:  MOVLW  7E
0277E:  MOVWF  FF6
02780:  MOVLW  0C
02782:  MOVWF  FF7
02784:  MOVLW  00
02786:  MOVWF  FF8
02788:  CALL   0F88
....................         fprintf(EXT, "    press b: EPS Power output control\n");
0278C:  MOVLW  A4
0278E:  MOVWF  FF6
02790:  MOVLW  0C
02792:  MOVWF  FF7
02794:  MOVLW  00
02796:  MOVWF  FF8
02798:  CALL   0F88
....................         fprintf(EXT, "    press c: House keeping data collection\n");
0279C:  MOVLW  CC
0279E:  MOVWF  FF6
027A0:  MOVLW  0C
027A2:  MOVWF  FF7
027A4:  MOVLW  00
027A6:  MOVWF  FF8
027A8:  CALL   0F88
....................         fprintf(EXT, "    press d: Check Flash Memories\n");
027AC:  MOVLW  F8
027AE:  MOVWF  FF6
027B0:  MOVLW  0C
027B2:  MOVWF  FF7
027B4:  MOVLW  00
027B6:  MOVWF  FF8
027B8:  CALL   0F88
....................         fprintf(EXT, "    press e: See satellite Log\n");
027BC:  MOVLW  1C
027BE:  MOVWF  FF6
027C0:  MOVLW  0D
027C2:  MOVWF  FF7
027C4:  MOVLW  00
027C6:  MOVWF  FF8
027C8:  CALL   0F88
....................         fprintf(EXT, "    press f: Settings of RTC\n");
027CC:  MOVLW  3C
027CE:  MOVWF  FF6
027D0:  MOVLW  0D
027D2:  MOVWF  FF7
027D4:  MOVLW  00
027D6:  MOVWF  FF8
027D8:  CALL   0F88
....................         fprintf(EXT, "    press g: Satellite log down-link command\n");
027DC:  MOVLW  5A
027DE:  MOVWF  FF6
027E0:  MOVLW  0D
027E2:  MOVWF  FF7
027E4:  MOVLW  00
027E6:  MOVWF  FF8
027E8:  CALL   0F88
....................         fprintf(EXT, "    press h: IHC Mission start\n");
027EC:  MOVLW  88
027EE:  MOVWF  FF6
027F0:  MOVLW  0D
027F2:  MOVWF  FF7
027F4:  MOVLW  00
027F6:  MOVWF  FF8
027F8:  CALL   0F88
....................         fprintf(EXT, "    press i: SEL current Measurement\n");
027FC:  MOVLW  A8
027FE:  MOVWF  FF6
02800:  MOVLW  0D
02802:  MOVWF  FF7
02804:  MOVLW  00
02806:  MOVWF  FF8
02808:  CALL   0F88
....................         fprintf(EXT, "    press j: H8 COM Reset\n");
0280C:  MOVLW  CE
0280E:  MOVWF  FF6
02810:  MOVLW  0D
02812:  MOVWF  FF7
02814:  MOVLW  00
02816:  MOVWF  FF8
02818:  CALL   0F88
....................         fprintf(EXT, "    press i: UART repeater of EPS\n");
0281C:  MOVLW  EA
0281E:  MOVWF  FF6
02820:  MOVLW  0D
02822:  MOVWF  FF7
02824:  MOVLW  00
02826:  MOVWF  FF8
02828:  CALL   0F88
....................         fprintf(EXT, "    press x: Exit Main Menu\n");
0282C:  MOVLW  0E
0282E:  MOVWF  FF6
02830:  MOVLW  0E
02832:  MOVWF  FF7
02834:  MOVLW  00
02836:  MOVWF  FF8
02838:  CALL   0F88
....................         fprintf(EXT, "    DO NOT USE CAPITAL CHARACTERS TO WRITE!\n\n");
0283C:  MOVLW  2C
0283E:  MOVWF  FF6
02840:  MOVLW  0E
02842:  MOVWF  FF7
02844:  MOVLW  00
02846:  MOVWF  FF8
02848:  CALL   0F88
.................... 
....................         // Read the user's choice
....................         option = fgetc(EXT);
0284C:  CALL   1848
02850:  MOVFF  01,4E2
.................... 
....................         // Main menu switch
....................         switch (option) {
02854:  MOVLB  4
02856:  MOVF   xE2,W
02858:  XORLW  61
0285A:  MOVLB  0
0285C:  BZ    288C
0285E:  XORLW  03
02860:  BZ    288E
02862:  XORLW  01
02864:  BZ    2894
02866:  XORLW  07
02868:  BZ    2896
0286A:  XORLW  01
0286C:  BZ    289A
0286E:  XORLW  03
02870:  BZ    289C
02872:  XORLW  01
02874:  BZ    28A0
02876:  XORLW  0F
02878:  BZ    28A2
0287A:  XORLW  01
0287C:  BZ    28A4
0287E:  XORLW  03
02880:  BZ    28A6
02882:  XORLW  06
02884:  BZ    28A8
02886:  XORLW  14
02888:  BZ    28BC
0288A:  BRA    28BE
....................             case 'a':
....................                 // Call a function to get housekeeping data
....................                 // get_housekeeping_data();
....................                 break;
0288C:  BRA    28CE
....................             case 'b':
....................                 // Call a function to control EPS power output
....................                 handle_io_control();
0288E:  GOTO   1892
....................                 break;
02892:  BRA    28CE
....................             case 'c':
....................                 // Call a function to collect housekeeping data
....................                 // collect_housekeeping_data();
....................                 break;
02894:  BRA    28CE
....................             case 'd':
....................                 handle_flash_memories();
02896:  BRA    21A2
....................                 break;
02898:  BRA    28CE
....................             case 'e':
....................                 // Call a function to see satellite log
....................                 // see_satellite_log();
....................                 break;
0289A:  BRA    28CE
....................             case 'f':
....................                 handle_set_time();
0289C:  BRA    22E0
....................                 break;
0289E:  BRA    28CE
....................             case 'g':
....................                 // Call a function for satellite log downlink command
....................                 // satellite_log_downlink_command();
....................                 break;
028A0:  BRA    28CE
....................             case 'h':
....................                 // Call a function for IHC mission start
....................                 // ihc_mission_start();
....................                 break;
028A2:  BRA    28CE
....................             case 'i':
....................                 // Call a function for SEL current measurement
....................                 // sel_current_measurement();
....................                 break;
028A4:  BRA    28CE
....................             case 'j':
....................                 // Call a function for H8 COM reset
....................                 // h8_com_reset();
....................                 break;
028A6:  BRA    28CE
....................             case 'l':
....................                 fprintf(EXT, "UART Repeater Initialized.\n");
028A8:  MOVLW  5A
028AA:  MOVWF  FF6
028AC:  MOVLW  0E
028AE:  MOVWF  FF7
028B0:  MOVLW  00
028B2:  MOVWF  FF8
028B4:  CALL   0F88
....................                 uart_repeater();
028B8:  BRA    26C4
....................                 break;
028BA:  BRA    28CE
....................             case 'x':
....................                 return;
028BC:  BRA    28D0
....................             default:
....................                 fprintf(EXT, "Invalid option. Please try again.\n");
028BE:  MOVLW  76
028C0:  MOVWF  FF6
028C2:  MOVLW  0E
028C4:  MOVWF  FF7
028C6:  MOVLW  00
028C8:  MOVWF  FF8
028CA:  CALL   0F88
....................                 break;
....................         }
028CE:  BRA    276C
....................     }
028D0:  GOTO   2B04 (RETURN)
.................... }
.................... 
.................... #ifdef	__cplusplus
.................... }
.................... #endif
.................... 
.................... #endif	/* MAIN_H */
.................... 
.................... 
.................... 
.................... 
.................... /*
....................  * 
....................  */
.................... 
.................... //int8 setup_oscillator(OSC_PRIMARY|OSC_SOSC_ENABLED);
.................... char bichig[25] = "test data update of MAIN";
.................... char bichigcom[24] = "test data update of COM";
.................... char bichigadcs[25] = "test data update of ADCS";
.................... char *read_data;
.................... unsigned char buffer[40];
.................... char *read_data_com[80];
.................... char *read_data_adcs[80];
.................... 
.................... void main() {
028D4:  CLRF   FF8
028D6:  BCF    FD0.7
028D8:  CLRF   F9B
028DA:  CLRF   F64
028DC:  CLRF   F65
028DE:  CLRF   F66
028E0:  MOVLW  02
028E2:  MOVWF  FD3
028E4:  BCF    F96.5
028E6:  BSF    F8D.5
028E8:  BCF    F94.6
028EA:  BSF    F8B.6
028EC:  BCF    F95.2
028EE:  BSF    F8C.2
028F0:  BCF    F97.7
028F2:  BSF    F8E.7
028F4:  BSF    F96.0
028F6:  BCF    F96.6
028F8:  BCF    F96.1
028FA:  BCF    F8D.1
028FC:  BSF    F93.5
028FE:  BCF    F93.4
02900:  BCF    F93.2
02902:  BCF    F8A.2
02904:  BSF    F92.0
02906:  BCF    F92.1
02908:  BCF    F92.3
0290A:  BCF    F89.3
0290C:  CLRF   04
0290E:  CLRF   05
02910:  CLRF   06
02912:  CLRF   07
02914:  CLRF   08
02916:  MOVWF  09
02918:  MOVLB  3
0291A:  CLRF   x2B
0291C:  CLRF   x2A
0291E:  BRA    2996
02920:  DATA FF,40
02922:  DATA 2A,00
02924:  DATA FF,C0
02926:  DATA 00,FF
02928:  DATA C0,00
0292A:  DATA 03,80
0292C:  DATA 00,00
0292E:  DATA 00,4A
02930:  DATA 03,2C
02932:  DATA 74,65
02934:  DATA 73,74
02936:  DATA 20,64
02938:  DATA 61,74
0293A:  DATA 61,20
0293C:  DATA 75,70
0293E:  DATA 64,61
02940:  DATA 74,65
02942:  DATA 20,6F
02944:  DATA 66,20
02946:  DATA 4D,41
02948:  DATA 49,4E
0294A:  DATA 00,74
0294C:  DATA 65,73
0294E:  DATA 74,20
02950:  DATA 64,61
02952:  DATA 74,61
02954:  DATA 20,75
02956:  DATA 70,64
02958:  DATA 61,74
0295A:  DATA 65,20
0295C:  DATA 6F,66
0295E:  DATA 20,43
02960:  DATA 4F,4D
02962:  DATA 00,74
02964:  DATA 65,73
02966:  DATA 74,20
02968:  DATA 64,61
0296A:  DATA 74,61
0296C:  DATA 20,75
0296E:  DATA 70,64
02970:  DATA 61,74
02972:  DATA 65,20
02974:  DATA 6F,66
02976:  DATA 20,41
02978:  DATA 44,43
0297A:  DATA 53,00
0297C:  DATA 03,0E
0297E:  DATA 45,00
02980:  DATA 00,00
02982:  DATA 08,4E
02984:  DATA CE,00
02986:  DATA 02,0E
02988:  DATA D9,00
0298A:  DATA 00,02
0298C:  DATA 0F,37
0298E:  DATA 00,00
02990:  DATA 01,0F
02992:  DATA 53,00
02994:  DATA 00,00
02996:  MOVLW  00
02998:  MOVWF  FF8
0299A:  MOVLW  29
0299C:  MOVWF  FF7
0299E:  MOVLW  20
029A0:  MOVWF  FF6
029A2:  TBLRD*+
029A4:  MOVF   FF5,W
029A6:  MOVWF  00
029A8:  XORLW  00
029AA:  BZ    29D2
029AC:  TBLRD*+
029AE:  MOVF   FF5,W
029B0:  MOVWF  01
029B2:  BTFSC  FE8.7
029B4:  BRA    29C0
029B6:  ANDLW  3F
029B8:  MOVWF  FEA
029BA:  TBLRD*+
029BC:  MOVFF  FF5,FE9
029C0:  BTFSC  01.6
029C2:  TBLRD*+
029C4:  BTFSS  01.6
029C6:  TBLRD*+
029C8:  MOVFF  FF5,FEE
029CC:  DCFSNZ 00,F
029CE:  BRA    29A2
029D0:  BRA    29C4
029D2:  CLRF   FF8
....................     //------------------------Start_Indicator-------------------------
.................... startup_freeze();
029D4:  MOVLB  0
029D6:  GOTO   0FB0
....................     //--------------------------RTC-----------------------------------
.................... RTC_initialize();
029DA:  GOTO   1034
....................     //------------------------restart_indicator-----------------------
....................     update_shutdown_count();
029DE:  GOTO   151E
....................     //------------------------read_chip_ID----------------------------
....................     fprintf(EXT, "Reading chip ID of main\n");
029E2:  MOVLW  9A
029E4:  MOVWF  FF6
029E6:  MOVLW  0E
029E8:  MOVWF  FF7
029EA:  MOVLW  00
029EC:  MOVWF  FF8
029EE:  CALL   0F88
....................     READ_CHIP_ID_OF();  // Pass the array to be filled by the function
029F2:  CALL   1618
....................     fprintf(EXT, "Reading chip ID of COM\n");
029F6:  MOVLW  B4
029F8:  MOVWF  FF6
029FA:  MOVLW  0E
029FC:  MOVWF  FF7
029FE:  MOVLW  00
02A00:  MOVWF  FF8
02A02:  CALL   0F88
....................     READ_CHIP_ID_OF_COM();
02A06:  GOTO   16E4
....................     fprintf(EXT, "Reading chip ID of ADCS\n");
02A0A:  MOVLW  CC
02A0C:  MOVWF  FF6
02A0E:  MOVLW  0E
02A10:  MOVWF  FF7
02A12:  MOVLW  00
02A14:  MOVWF  FF8
02A16:  CALL   0F88
....................     READ_CHIP_ID_OF_ADCS();
02A1A:  GOTO   17BC
....................     fprintf(EXT, "Done reading chip ID\n");
02A1E:  MOVLW  E6
02A20:  MOVWF  FF6
02A22:  MOVLW  0E
02A24:  MOVWF  FF7
02A26:  MOVLW  00
02A28:  MOVWF  FF8
02A2A:  CALL   0F88
....................     delay_ms(1000);
02A2E:  MOVLW  04
02A30:  MOVLB  4
02A32:  MOVWF  xE2
02A34:  MOVLW  FA
02A36:  MOVWF  xE3
02A38:  MOVLB  0
02A3A:  CALL   0F18
02A3E:  MOVLB  4
02A40:  DECFSZ xE2,F
02A42:  BRA    2A34
.................... //------------------------write_flash_memory--------------------------
....................     //  fprintf(EXT, "Starting to write data\n");
.................... //    WRITE_DATA_NBYTES(0x00005000,bichig,29);
....................     delay_ms(1000);
02A44:  MOVLW  04
02A46:  MOVWF  xE2
02A48:  MOVLW  FA
02A4A:  MOVWF  xE3
02A4C:  MOVLB  0
02A4E:  CALL   0F18
02A52:  MOVLB  4
02A54:  DECFSZ xE2,F
02A56:  BRA    2A48
....................     read_data = READ_DATA_NBYTES(0x00005000, 29);
02A58:  CLRF   xE6
02A5A:  CLRF   xE5
02A5C:  MOVLW  50
02A5E:  MOVWF  xE4
02A60:  CLRF   xE3
02A62:  MOVLW  1D
02A64:  MOVWF  xE7
02A66:  MOVLB  0
02A68:  CALL   10E4
02A6C:  MOVFF  02,377
02A70:  MOVFF  01,376
....................     delay_ms(1000);
02A74:  MOVLW  04
02A76:  MOVLB  4
02A78:  MOVWF  xE2
02A7A:  MOVLW  FA
02A7C:  MOVWF  xE3
02A7E:  MOVLB  0
02A80:  CALL   0F18
02A84:  MOVLB  4
02A86:  DECFSZ xE2,F
02A88:  BRA    2A7A
....................     for (int i = 0; i < read_data[i]; i++) {
02A8A:  CLRF   xE0
02A8C:  MOVF   xE0,W
02A8E:  MOVLB  3
02A90:  ADDWF  x76,W
02A92:  MOVWF  FE9
02A94:  MOVLW  00
02A96:  ADDWFC x77,W
02A98:  MOVWF  FEA
02A9A:  MOVF   FEF,W
02A9C:  MOVLB  4
02A9E:  SUBWF  xE0,W
02AA0:  BC    2ACC
....................         fprintf(EXT, "%c", read_data[i]);
02AA2:  MOVF   xE0,W
02AA4:  MOVLB  3
02AA6:  ADDWF  x76,W
02AA8:  MOVWF  FE9
02AAA:  MOVLW  00
02AAC:  ADDWFC x77,W
02AAE:  MOVWF  FEA
02AB0:  MOVFF  FEF,623
02AB4:  MOVLB  0
02AB6:  CALL   0F42
....................         delay_ms(2);
02ABA:  MOVLW  02
02ABC:  MOVLB  4
02ABE:  MOVWF  xE3
02AC0:  MOVLB  0
02AC2:  CALL   0F18
02AC6:  MOVLB  4
02AC8:  INCF   xE0,F
02ACA:  BRA    2A8C
....................     }
.................... //    fprintf(EXT, "\n"); 
.................... //    WRITE_DATA_NBYTES_COM(0x00005000,bichigcom,29);
.................... //    delay_ms(1000);
.................... //    READ_DATA_NBYTES_COM(0x00005000,read_data_com, 29);
.................... //    delay_ms(1000);
.................... //    WRITE_DATA_NBYTES_ADCS(0x00005000,bichigadcs,29);
.................... //    delay_ms(1000);
.................... //    READ_DATA_NBYTES_ADCS(0x00005000,read_data_adcs, 29);
.................... //    delay_ms(1000);
.................... //    
.................... //    //   WRITE_DATA_NBYTES(0x00000250,bichig,40);
.................... ////    WRITE_DATA_NBYTES(0x00000300, bichig, 20);
.................... ////    fprintf(EXT, "Byte saved\n");
.................... ////    fprintf(EXT, "Reading desired address\n");
.................... ////    fprintf(EXT, "Reading... \n");
.................... ////    char baba;
.................... //    READ_DATA_NBYTES(0x00000300, read_data, 20);
.................... //    fprintf(EXT, "%c", read_data);
....................     for (int i = 0; i < 19; i++) {
02ACC:  CLRF   xE1
02ACE:  MOVF   xE1,W
02AD0:  SUBLW  12
02AD2:  BNC   2AF2
....................         fprintf(EXT, "%c", read_data[i]);
02AD4:  MOVF   xE1,W
02AD6:  MOVLB  3
02AD8:  ADDWF  x76,W
02ADA:  MOVWF  FE9
02ADC:  MOVLW  00
02ADE:  ADDWFC x77,W
02AE0:  MOVWF  FEA
02AE2:  MOVFF  FEF,623
02AE6:  MOVLB  0
02AE8:  CALL   0F42
02AEC:  MOVLB  4
02AEE:  INCF   xE1,F
02AF0:  BRA    2ACE
....................     }
....................     fprintf(EXT, "\n");
02AF2:  MOVLW  0A
02AF4:  MOVLB  6
02AF6:  MOVWF  x23
02AF8:  MOVLB  0
02AFA:  CALL   0F42
....................     //------------------------MAIN_MENU-------------------------------
....................     while (TRUE) {
....................         if (kbhit(EXT)) {
02AFE:  BTFSC  F82.7
02B00:  BRA    2B14
....................             main_menu();
02B02:  BRA    26DC
....................             fprintf(EXT, "exiting main menu function");
02B04:  MOVLW  FC
02B06:  MOVWF  FF6
02B08:  MOVLW  0E
02B0A:  MOVWF  FF7
02B0C:  MOVLW  00
02B0E:  MOVWF  FF8
02B10:  CALL   0F88
....................         }
02B14:  BRA    2AFE
....................     }
.................... }
.................... 
02B16:  BRA    2B16
.................... 

Configuration Fuses:
   Word  1: F600   NOSTVREN NOXINST DEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS DSWDT_ DSWDT DSWDTOSC_INT

   Some fuses have been forced to be compatible with the ICD debugger.
