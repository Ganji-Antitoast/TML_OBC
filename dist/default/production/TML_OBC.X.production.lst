CCS PCH C Compiler, Version 5.112, 5967               15-Oct-24 16:39

               Filename:   C:\Users\Ganji\Documents\------TEMUULEL------\CODE\TML_OBC.X\dist\default\production\TML_OBC.X.production.lst

               ROM used:   6344 bytes (5%)
                           Largest free fragment is 65520
               RAM used:   136 (4%) at main() level
                           159 (4%) worst case
               Stack used: 3 locations
               Stack size: 30

*
00000:  NOP   
00002:  GOTO   1680
.................... #import(file="build/default/production/main.o")
.................... /* 
.................... /* 
....................  * File:   main.c
....................  * Author: Ganji
....................  *
....................  * Created on September 12, 2024, 7:31 AM
....................  */
.................... 
.................... #include <spi.h>
.................... /* 
....................  * File:   SPI.h
....................  * Author: Ganji
....................  *
....................  * Created on September 12, 2024, 7:30 AM
....................  */
.................... 
.................... #ifndef SPI_H
.................... #define	SPI_H
.................... 
.................... #ifdef	__cplusplus
.................... extern "C" {
.................... #endif
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
00006:  DATA 57,52
00008:  DATA 49,54
0000A:  DATA 45,20
0000C:  DATA 41,44
0000E:  DATA 44,52
00010:  DATA 45,53
00012:  DATA 53,3A
00014:  DATA 20,30
00016:  DATA 78,25
00018:  DATA 30,38
0001A:  DATA 6C,78
0001C:  DATA 0A,00
0001E:  DATA 0A,25
00020:  DATA 64,20
00022:  DATA 42,59
00024:  DATA 54,45
00026:  DATA 53,20
00028:  DATA 57,52
0002A:  DATA 49,54
0002C:  DATA 54,45
0002E:  DATA 4E,21
00030:  DATA 0A,00
00032:  DATA 57,52
00034:  DATA 49,54
00036:  DATA 45,20
00038:  DATA 41,44
0003A:  DATA 44,52
0003C:  DATA 45,53
0003E:  DATA 53,3A
00040:  DATA 20,30
00042:  DATA 78,25
00044:  DATA 30,38
00046:  DATA 6C,78
00048:  DATA 0A,00
0004A:  DATA 0A,25
0004C:  DATA 64,20
0004E:  DATA 42,59
00050:  DATA 54,45
00052:  DATA 53,20
00054:  DATA 57,52
00056:  DATA 49,54
00058:  DATA 54,45
0005A:  DATA 4E,21
0005C:  DATA 0A,00
0005E:  DATA 53,68
00060:  DATA 75,74
00062:  DATA 64,6F
00064:  DATA 77,6E
00066:  DATA 20,63
00068:  DATA 6F,75
0006A:  DATA 6E,74
0006C:  DATA 20,73
0006E:  DATA 74,61
00070:  DATA 72,74
00072:  DATA 65,64
00074:  DATA 0A,00
00076:  DATA 52,65
00078:  DATA 61,64
0007A:  DATA 20,73
0007C:  DATA 68,75
0007E:  DATA 74,64
00080:  DATA 6F,77
00082:  DATA 6E,20
00084:  DATA 63,6F
00086:  DATA 75,6E
00088:  DATA 74,3A
0008A:  DATA 20,25
0008C:  DATA 75,0A
0008E:  DATA 00,00
00090:  DATA 53,68
00092:  DATA 75,74
00094:  DATA 64,6F
00096:  DATA 77,6E
00098:  DATA 20,63
0009A:  DATA 6F,75
0009C:  DATA 6E,74
0009E:  DATA 20,75
000A0:  DATA 6E,69
000A2:  DATA 6E,69
000A4:  DATA 74,69
000A6:  DATA 61,6C
000A8:  DATA 69,7A
000AA:  DATA 65,64
000AC:  DATA 2C,20
000AE:  DATA 73,65
000B0:  DATA 74,74
000B2:  DATA 69,6E
000B4:  DATA 67,20
000B6:  DATA 74,6F
000B8:  DATA 20,30
000BA:  DATA 0A,00
000BC:  DATA 53,68
000BE:  DATA 75,74
000C0:  DATA 64,6F
000C2:  DATA 77,6E
000C4:  DATA 20,63
000C6:  DATA 6F,75
000C8:  DATA 6E,74
000CA:  DATA 20,73
000CC:  DATA 75,63
000CE:  DATA 63,65
000D0:  DATA 73,73
000D2:  DATA 66,75
000D4:  DATA 6C,6C
000D6:  DATA 79,20
000D8:  DATA 75,70
000DA:  DATA 64,61
000DC:  DATA 74,65
000DE:  DATA 64,3A
000E0:  DATA 20,25
000E2:  DATA 75,0A
000E4:  DATA 00,00
000E6:  DATA 46,61
000E8:  DATA 69,6C
000EA:  DATA 65,64
000EC:  DATA 20,74
000EE:  DATA 6F,20
000F0:  DATA 75,70
000F2:  DATA 64,61
000F4:  DATA 74,65
000F6:  DATA 20,73
000F8:  DATA 68,75
000FA:  DATA 74,64
000FC:  DATA 6F,77
000FE:  DATA 6E,20
00100:  DATA 63,6F
00102:  DATA 75,6E
00104:  DATA 74,2E
00106:  DATA 20,52
00108:  DATA 65,61
0010A:  DATA 64,20
0010C:  DATA 62,61
0010E:  DATA 63,6B
00110:  DATA 3A,20
00112:  DATA 25,75
00114:  DATA 0A,00
00116:  DATA 70,72
00118:  DATA 65,73
0011A:  DATA 73,65
0011C:  DATA 64,20
0011E:  DATA 6F,70
00120:  DATA 74,69
00122:  DATA 6F,6E
00124:  DATA 20,64
00126:  DATA 3A,20
00128:  DATA 43,68
0012A:  DATA 65,63
0012C:  DATA 6B,20
0012E:  DATA 46,6C
00130:  DATA 61,73
00132:  DATA 68,20
00134:  DATA 4D,65
00136:  DATA 6D,6F
00138:  DATA 72,69
0013A:  DATA 65,73
0013C:  DATA 0A,0A
0013E:  DATA 00,00
00140:  DATA 50,6C
00142:  DATA 65,61
00144:  DATA 73,65
00146:  DATA 20,63
00148:  DATA 68,6F
0014A:  DATA 6F,73
0014C:  DATA 65,20
0014E:  DATA 77,68
00150:  DATA 69,63
00152:  DATA 68,20
00154:  DATA 66,6C
00156:  DATA 61,73
00158:  DATA 68,20
0015A:  DATA 6D,65
0015C:  DATA 6D,6F
0015E:  DATA 72,79
00160:  DATA 20,74
00162:  DATA 6F,20
00164:  DATA 77,6F
00166:  DATA 72,6B
00168:  DATA 20,6F
0016A:  DATA 6E,20
0016C:  DATA 28,61
0016E:  DATA 2C,20
00170:  DATA 62,2C
00172:  DATA 20,63
00174:  DATA 29,3A
00176:  DATA 0A,00
00178:  DATA 70,72
0017A:  DATA 65,73
0017C:  DATA 73,20
0017E:  DATA 61,3A
00180:  DATA 20,4D
00182:  DATA 41,49
00184:  DATA 4E,20
00186:  DATA 66,6C
00188:  DATA 61,73
0018A:  DATA 68,20
0018C:  DATA 6D,65
0018E:  DATA 6D,6F
00190:  DATA 72,79
00192:  DATA 0A,00
00194:  DATA 70,72
00196:  DATA 65,73
00198:  DATA 73,20
0019A:  DATA 62,3A
0019C:  DATA 20,43
0019E:  DATA 4F,4D
001A0:  DATA 20,73
001A2:  DATA 68,61
001A4:  DATA 72,65
001A6:  DATA 64,20
001A8:  DATA 66,6C
001AA:  DATA 61,73
001AC:  DATA 68,20
001AE:  DATA 6D,65
001B0:  DATA 6D,6F
001B2:  DATA 72,79
001B4:  DATA 0A,00
001B6:  DATA 70,72
001B8:  DATA 65,73
001BA:  DATA 73,20
001BC:  DATA 63,3A
001BE:  DATA 20,41
001C0:  DATA 44,43
001C2:  DATA 53,20
001C4:  DATA 73,68
001C6:  DATA 61,72
001C8:  DATA 65,64
001CA:  DATA 20,66
001CC:  DATA 6C,61
001CE:  DATA 73,68
001D0:  DATA 20,6D
001D2:  DATA 65,6D
001D4:  DATA 6F,72
001D6:  DATA 79,0A
001D8:  DATA 00,00
001DA:  DATA 43,4F
001DC:  DATA 4D,20
001DE:  DATA 73,68
001E0:  DATA 61,72
001E2:  DATA 65,64
001E4:  DATA 20,66
001E6:  DATA 6C,61
001E8:  DATA 73,68
001EA:  DATA 20,6D
001EC:  DATA 65,6D
001EE:  DATA 6F,72
001F0:  DATA 79,20
001F2:  DATA 63,68
001F4:  DATA 6F,73
001F6:  DATA 65,6E
001F8:  DATA 0A,00
001FA:  DATA 41,44
001FC:  DATA 43,53
001FE:  DATA 20,73
00200:  DATA 68,61
00202:  DATA 72,65
00204:  DATA 64,20
00206:  DATA 66,6C
00208:  DATA 61,73
0020A:  DATA 68,20
0020C:  DATA 6D,65
0020E:  DATA 6D,6F
00210:  DATA 72,79
00212:  DATA 20,63
00214:  DATA 68,6F
00216:  DATA 73,65
00218:  DATA 6E,0A
0021A:  DATA 00,00
0021C:  DATA 49,6E
0021E:  DATA 76,61
00220:  DATA 6C,69
00222:  DATA 64,20
00224:  DATA 66,6C
00226:  DATA 61,73
00228:  DATA 68,20
0022A:  DATA 6D,65
0022C:  DATA 6D,6F
0022E:  DATA 72,79
00230:  DATA 20,6F
00232:  DATA 70,74
00234:  DATA 69,6F
00236:  DATA 6E,2E
00238:  DATA 20,50
0023A:  DATA 6C,65
0023C:  DATA 61,73
0023E:  DATA 65,20
00240:  DATA 74,72
00242:  DATA 79,20
00244:  DATA 61,67
00246:  DATA 61,69
00248:  DATA 6E,2E
0024A:  DATA 0A,00
0024C:  DATA 4D,41
0024E:  DATA 49,4E
00250:  DATA 20,66
00252:  DATA 6C,61
00254:  DATA 73,68
00256:  DATA 20,6D
00258:  DATA 65,6D
0025A:  DATA 6F,72
0025C:  DATA 79,20
0025E:  DATA 63,68
00260:  DATA 6F,73
00262:  DATA 65,6E
00264:  DATA 0A,00
00266:  DATA 70,72
00268:  DATA 65,73
0026A:  DATA 73,20
0026C:  DATA 61,3A
0026E:  DATA 20,52
00270:  DATA 65,61
00272:  DATA 64,20
00274:  DATA 49,44
00276:  DATA 20,6F
00278:  DATA 66,20
0027A:  DATA 74,68
0027C:  DATA 65,20
0027E:  DATA 63,68
00280:  DATA 69,70
00282:  DATA 0A,00
00284:  DATA 70,72
00286:  DATA 65,73
00288:  DATA 73,20
0028A:  DATA 62,3A
0028C:  DATA 20,57
0028E:  DATA 72,69
00290:  DATA 74,65
00292:  DATA 20,64
00294:  DATA 61,74
00296:  DATA 61,20
00298:  DATA 73,65
0029A:  DATA 74,20
0029C:  DATA 69,6E
0029E:  DATA 20,73
002A0:  DATA 70,65
002A2:  DATA 63,69
002A4:  DATA 66,69
002A6:  DATA 65,64
002A8:  DATA 20,61
002AA:  DATA 64,64
002AC:  DATA 72,65
002AE:  DATA 73,73
002B0:  DATA 0A,00
002B2:  DATA 70,72
002B4:  DATA 65,73
002B6:  DATA 73,20
002B8:  DATA 63,3A
002BA:  DATA 20,52
002BC:  DATA 65,61
002BE:  DATA 64,20
002C0:  DATA 64,61
002C2:  DATA 74,61
002C4:  DATA 20,73
002C6:  DATA 65,74
002C8:  DATA 20,69
002CA:  DATA 6E,20
002CC:  DATA 73,70
002CE:  DATA 65,63
002D0:  DATA 69,66
002D2:  DATA 69,65
002D4:  DATA 64,20
002D6:  DATA 61,64
002D8:  DATA 64,72
002DA:  DATA 65,73
002DC:  DATA 73,0A
002DE:  DATA 00,00
002E0:  DATA 70,72
002E2:  DATA 65,73
002E4:  DATA 73,20
002E6:  DATA 64,3A
002E8:  DATA 20,52
002EA:  DATA 65,74
002EC:  DATA 75,72
002EE:  DATA 6E,20
002F0:  DATA 74,6F
002F2:  DATA 20,4D
002F4:  DATA 41,49
002F6:  DATA 4E,20
002F8:  DATA 4D,45
002FA:  DATA 4E,55
002FC:  DATA 0A,00
002FE:  DATA 53,74
00300:  DATA 61,72
00302:  DATA 74,65
00304:  DATA 64,20
00306:  DATA 72,65
00308:  DATA 61,64
0030A:  DATA 69,6E
0030C:  DATA 67,20
0030E:  DATA 63,68
00310:  DATA 69,70
00312:  DATA 20,49
00314:  DATA 44,20
00316:  DATA 6F,66
00318:  DATA 20,4D
0031A:  DATA 41,49
0031C:  DATA 4E,20
0031E:  DATA 66,6C
00320:  DATA 61,73
00322:  DATA 68,20
00324:  DATA 6D,65
00326:  DATA 6D,6F
00328:  DATA 72,79
0032A:  DATA 0A,00
0032C:  DATA 57,72
0032E:  DATA 69,74
00330:  DATA 65,20
00332:  DATA 64,61
00334:  DATA 74,61
00336:  DATA 20,73
00338:  DATA 65,74
0033A:  DATA 20,69
0033C:  DATA 6E,20
0033E:  DATA 73,70
00340:  DATA 65,63
00342:  DATA 69,66
00344:  DATA 69,65
00346:  DATA 64,20
00348:  DATA 61,64
0034A:  DATA 64,72
0034C:  DATA 65,73
0034E:  DATA 73,0A
00350:  DATA 00,00
00352:  DATA 45,6E
00354:  DATA 74,65
00356:  DATA 72,20
00358:  DATA 61,64
0035A:  DATA 64,72
0035C:  DATA 65,73
0035E:  DATA 73,20
00360:  DATA 28,33
00362:  DATA 32,2D
00364:  DATA 62,69
00366:  DATA 74,20
00368:  DATA 68,65
0036A:  DATA 78,61
0036C:  DATA 64,65
0036E:  DATA 63,69
00370:  DATA 6D,61
00372:  DATA 6C,29
00374:  DATA 3A,20
00376:  DATA 00,00
00378:  DATA 45,6E
0037A:  DATA 74,65
0037C:  DATA 72,20
0037E:  DATA 64,61
00380:  DATA 74,61
00382:  DATA 20,6C
00384:  DATA 65,6E
00386:  DATA 67,74
00388:  DATA 68,20
0038A:  DATA 28,31
0038C:  DATA 20,74
0038E:  DATA 6F,20
00390:  DATA 33,32
00392:  DATA 29,3A
00394:  DATA 20,00
00396:  DATA 45,6E
00398:  DATA 74,65
0039A:  DATA 72,20
0039C:  DATA 64,61
0039E:  DATA 74,61
003A0:  DATA 20,62
003A2:  DATA 79,74
003A4:  DATA 65,73
003A6:  DATA 20,28
003A8:  DATA 73,70
003AA:  DATA 61,63
003AC:  DATA 65,2D
003AE:  DATA 73,65
003B0:  DATA 70,61
003B2:  DATA 72,61
003B4:  DATA 74,65
003B6:  DATA 64,20
003B8:  DATA 68,65
003BA:  DATA 78,61
003BC:  DATA 64,65
003BE:  DATA 63,69
003C0:  DATA 6D,61
003C2:  DATA 6C,20
003C4:  DATA 76,61
003C6:  DATA 6C,75
003C8:  DATA 65,73
003CA:  DATA 29,3A
003CC:  DATA 20,00
003CE:  DATA 44,61
003D0:  DATA 74,61
003D2:  DATA 20,77
003D4:  DATA 72,69
003D6:  DATA 74,74
003D8:  DATA 65,6E
003DA:  DATA 20,74
003DC:  DATA 6F,20
003DE:  DATA 73,70
003E0:  DATA 65,63
003E2:  DATA 69,66
003E4:  DATA 69,65
003E6:  DATA 64,20
003E8:  DATA 61,64
003EA:  DATA 64,72
003EC:  DATA 65,73
003EE:  DATA 73,2E
003F0:  DATA 0A,00
003F2:  DATA 52,65
003F4:  DATA 61,64
003F6:  DATA 20,64
003F8:  DATA 61,74
003FA:  DATA 61,20
003FC:  DATA 73,65
003FE:  DATA 74,20
00400:  DATA 69,6E
00402:  DATA 20,73
00404:  DATA 70,65
00406:  DATA 63,69
00408:  DATA 66,69
0040A:  DATA 65,64
0040C:  DATA 20,61
0040E:  DATA 64,64
00410:  DATA 72,65
00412:  DATA 73,73
00414:  DATA 0A,00
00416:  DATA 45,6E
00418:  DATA 74,65
0041A:  DATA 72,20
0041C:  DATA 79,6F
0041E:  DATA 75,72
00420:  DATA 20,73
00422:  DATA 70,65
00424:  DATA 63,69
00426:  DATA 66,69
00428:  DATA 65,64
0042A:  DATA 20,61
0042C:  DATA 64,64
0042E:  DATA 72,65
00430:  DATA 73,73
00432:  DATA 3A,20
00434:  DATA 00,00
00436:  DATA 45,6E
00438:  DATA 74,65
0043A:  DATA 72,20
0043C:  DATA 79,6F
0043E:  DATA 75,72
00440:  DATA 20,73
00442:  DATA 70,65
00444:  DATA 63,69
00446:  DATA 66,69
00448:  DATA 65,64
0044A:  DATA 20,61
0044C:  DATA 64,64
0044E:  DATA 72,65
00450:  DATA 73,73
00452:  DATA 20,6C
00454:  DATA 65,6E
00456:  DATA 67,74
00458:  DATA 68,20
0045A:  DATA 3A,20
0045C:  DATA 00,00
0045E:  DATA 49,6E
00460:  DATA 76,61
00462:  DATA 6C,69
00464:  DATA 64,20
00466:  DATA 4D,41
00468:  DATA 49,4E
0046A:  DATA 20,66
0046C:  DATA 6C,61
0046E:  DATA 73,68
00470:  DATA 20,6D
00472:  DATA 65,6D
00474:  DATA 6F,72
00476:  DATA 79,20
00478:  DATA 6F,70
0047A:  DATA 74,69
0047C:  DATA 6F,6E
0047E:  DATA 2E,20
00480:  DATA 50,6C
00482:  DATA 65,61
00484:  DATA 73,65
00486:  DATA 20,74
00488:  DATA 72,79
0048A:  DATA 20,61
0048C:  DATA 67,61
0048E:  DATA 69,6E
00490:  DATA 2E,0A
00492:  DATA 00,00
00494:  DATA 4E,6F
00496:  DATA 77,20
00498:  DATA 74,69
0049A:  DATA 6D,65
0049C:  DATA 20,69
0049E:  DATA 73,0A
004A0:  DATA 00,00
004A2:  DATA 0D,25
004A4:  DATA 30,32
004A6:  DATA 75,2F
004A8:  DATA 25,30
004AA:  DATA 32,75
004AC:  DATA 2F,32
004AE:  DATA 30,25
004B0:  DATA 30,32
004B2:  DATA 75,20
004B4:  DATA 25,30
004B6:  DATA 32,75
004B8:  DATA 3A,25
004BA:  DATA 30,32
004BC:  DATA 75,3A
004BE:  DATA 25,30
004C0:  DATA 32,75
004C2:  DATA 00,00
004C4:  DATA 54,69
004C6:  DATA 6D,65
004C8:  DATA 20,63
004CA:  DATA 68,61
004CC:  DATA 6E,67
004CE:  DATA 69,6E
004D0:  DATA 67,20
004D2:  DATA 66,75
004D4:  DATA 6E,63
004D6:  DATA 74,69
004D8:  DATA 6F,6E
004DA:  DATA 20,61
004DC:  DATA 63,74
004DE:  DATA 69,76
004E0:  DATA 61,74
004E2:  DATA 65,64
004E4:  DATA 0A,00
004E6:  DATA 54,69
004E8:  DATA 6D,65
004EA:  DATA 20,73
004EC:  DATA 75,63
004EE:  DATA 63,65
004F0:  DATA 73,73
004F2:  DATA 66,75
004F4:  DATA 6C,6C
004F6:  DATA 79,20
004F8:  DATA 63,68
004FA:  DATA 61,6E
004FC:  DATA 67,65
004FE:  DATA 64,2E
00500:  DATA 20,43
00502:  DATA 75,72
00504:  DATA 72,65
00506:  DATA 6E,74
00508:  DATA 20,74
0050A:  DATA 69,6D
0050C:  DATA 65,20
0050E:  DATA 69,73
00510:  DATA 3A,0A
00512:  DATA 00,00
00514:  DATA 0D,25
00516:  DATA 30,32
00518:  DATA 75,2F
0051A:  DATA 25,30
0051C:  DATA 32,75
0051E:  DATA 2F,32
00520:  DATA 30,25
00522:  DATA 30,32
00524:  DATA 75,20
00526:  DATA 25,30
00528:  DATA 32,75
0052A:  DATA 3A,25
0052C:  DATA 30,32
0052E:  DATA 75,3A
00530:  DATA 25,30
00532:  DATA 32,75
00534:  DATA 00,00
00536:  DATA 49,4F
00538:  DATA 20,63
0053A:  DATA 6F,6E
0053C:  DATA 74,72
0053E:  DATA 6F,6C
00540:  DATA 20,63
00542:  DATA 68,6F
00544:  DATA 73,65
00546:  DATA 6E,0A
00548:  DATA 00,00
0054A:  DATA 20,20
0054C:  DATA 20,20
0054E:  DATA 70,72
00550:  DATA 65,73
00552:  DATA 73,20
00554:  DATA 61,3A
00556:  DATA 20,54
00558:  DATA 6F,67
0055A:  DATA 67,6C
0055C:  DATA 65,20
0055E:  DATA 45,4E
00560:  DATA 5F,53
00562:  DATA 55,50
00564:  DATA 5F,33
00566:  DATA 56,33
00568:  DATA 5F,31
0056A:  DATA 20,2F
0056C:  DATA 69,73
0056E:  DATA 20,63
00570:  DATA 75,72
00572:  DATA 72,65
00574:  DATA 6E,74
00576:  DATA 6C,79
00578:  DATA 2F,00
0057A:  DATA 48,49
0057C:  DATA 47,48
0057E:  DATA 0A,00
00580:  DATA 4C,4F
00582:  DATA 57,0A
00584:  DATA 00,00
00586:  DATA 49,6E
00588:  DATA 76,61
0058A:  DATA 6C,69
0058C:  DATA 64,0A
0058E:  DATA 00,00
00590:  DATA 20,20
00592:  DATA 20,20
00594:  DATA 70,72
00596:  DATA 65,73
00598:  DATA 73,20
0059A:  DATA 62,3A
0059C:  DATA 20,54
0059E:  DATA 6F,67
005A0:  DATA 67,6C
005A2:  DATA 65,20
005A4:  DATA 45,4E
005A6:  DATA 5F,53
005A8:  DATA 55,50
005AA:  DATA 5F,33
005AC:  DATA 56,33
005AE:  DATA 5F,32
005B0:  DATA 20,2F
005B2:  DATA 69,73
005B4:  DATA 20,63
005B6:  DATA 75,72
005B8:  DATA 72,65
005BA:  DATA 6E,74
005BC:  DATA 6C,79
005BE:  DATA 2F,00
005C0:  DATA 48,49
005C2:  DATA 47,48
005C4:  DATA 0A,00
005C6:  DATA 4C,4F
005C8:  DATA 57,0A
005CA:  DATA 00,00
005CC:  DATA 49,6E
005CE:  DATA 76,61
005D0:  DATA 6C,69
005D2:  DATA 64,0A
005D4:  DATA 00,00
005D6:  DATA 20,20
005D8:  DATA 20,20
005DA:  DATA 70,72
005DC:  DATA 65,73
005DE:  DATA 73,20
005E0:  DATA 63,3A
005E2:  DATA 20,54
005E4:  DATA 6F,67
005E6:  DATA 67,6C
005E8:  DATA 65,20
005EA:  DATA 45,4E
005EC:  DATA 5F,53
005EE:  DATA 55,50
005F0:  DATA 5F,33
005F2:  DATA 56,33
005F4:  DATA 5F,44
005F6:  DATA 41,51
005F8:  DATA 20,2F
005FA:  DATA 69,73
005FC:  DATA 20,63
005FE:  DATA 75,72
00600:  DATA 72,65
00602:  DATA 6E,74
00604:  DATA 6C,79
00606:  DATA 2F,00
00608:  DATA 48,49
0060A:  DATA 47,48
0060C:  DATA 0A,00
0060E:  DATA 4C,4F
00610:  DATA 57,0A
00612:  DATA 00,00
00614:  DATA 49,6E
00616:  DATA 76,61
00618:  DATA 6C,69
0061A:  DATA 64,0A
0061C:  DATA 00,00
0061E:  DATA 20,20
00620:  DATA 20,20
00622:  DATA 70,72
00624:  DATA 65,73
00626:  DATA 73,20
00628:  DATA 64,3A
0062A:  DATA 20,54
0062C:  DATA 6F,67
0062E:  DATA 67,6C
00630:  DATA 65,20
00632:  DATA 45,4E
00634:  DATA 5F,53
00636:  DATA 55,50
00638:  DATA 5F,55
0063A:  DATA 4E,52
0063C:  DATA 45,47
0063E:  DATA 20,2F
00640:  DATA 69,73
00642:  DATA 20,63
00644:  DATA 75,72
00646:  DATA 72,65
00648:  DATA 6E,74
0064A:  DATA 6C,79
0064C:  DATA 2F,00
0064E:  DATA 48,49
00650:  DATA 47,48
00652:  DATA 0A,00
00654:  DATA 4C,4F
00656:  DATA 57,0A
00658:  DATA 00,00
0065A:  DATA 49,6E
0065C:  DATA 76,61
0065E:  DATA 6C,69
00660:  DATA 64,0A
00662:  DATA 00,00
00664:  DATA 20,20
00666:  DATA 20,20
00668:  DATA 70,72
0066A:  DATA 65,73
0066C:  DATA 73,20
0066E:  DATA 65,3A
00670:  DATA 20,54
00672:  DATA 6F,67
00674:  DATA 67,6C
00676:  DATA 65,20
00678:  DATA 45,4E
0067A:  DATA 5F,53
0067C:  DATA 55,50
0067E:  DATA 5F,35
00680:  DATA 56,30
00682:  DATA 20,2F
00684:  DATA 69,73
00686:  DATA 20,63
00688:  DATA 75,72
0068A:  DATA 72,65
0068C:  DATA 6E,74
0068E:  DATA 6C,79
00690:  DATA 2F,00
00692:  DATA 48,49
00694:  DATA 47,48
00696:  DATA 0A,00
00698:  DATA 4C,4F
0069A:  DATA 57,0A
0069C:  DATA 00,00
0069E:  DATA 49,6E
006A0:  DATA 76,61
006A2:  DATA 6C,69
006A4:  DATA 64,0A
006A6:  DATA 00,00
006A8:  DATA 20,20
006AA:  DATA 20,20
006AC:  DATA 70,72
006AE:  DATA 65,73
006B0:  DATA 73,20
006B2:  DATA 66,3A
006B4:  DATA 20,54
006B6:  DATA 6F,67
006B8:  DATA 67,6C
006BA:  DATA 65,20
006BC:  DATA 4B,49
006BE:  DATA 4C,4C
006C0:  DATA 5F,53
006C2:  DATA 57,49
006C4:  DATA 54,43
006C6:  DATA 48,20
006C8:  DATA 2F,69
006CA:  DATA 73,20
006CC:  DATA 63,75
006CE:  DATA 72,72
006D0:  DATA 65,6E
006D2:  DATA 74,6C
006D4:  DATA 79,2F
006D6:  DATA 00,00
006D8:  DATA 48,49
006DA:  DATA 47,48
006DC:  DATA 0A,00
006DE:  DATA 4C,4F
006E0:  DATA 57,0A
006E2:  DATA 00,00
006E4:  DATA 49,6E
006E6:  DATA 76,61
006E8:  DATA 6C,69
006EA:  DATA 64,0A
006EC:  DATA 00,00
006EE:  DATA 20,20
006F0:  DATA 20,20
006F2:  DATA 70,72
006F4:  DATA 65,73
006F6:  DATA 73,20
006F8:  DATA 67,3A
006FA:  DATA 20,54
006FC:  DATA 6F,67
006FE:  DATA 67,6C
00700:  DATA 65,20
00702:  DATA 61,6C
00704:  DATA 6C,20
00706:  DATA 50,69
00708:  DATA 6E,73
0070A:  DATA 00,00
0070C:  DATA 49,6E
0070E:  DATA 76,61
00710:  DATA 6C,69
00712:  DATA 64,20
00714:  DATA 49,4F
00716:  DATA 20,6F
00718:  DATA 70,74
0071A:  DATA 69,6F
0071C:  DATA 6E,2E
0071E:  DATA 20,50
00720:  DATA 6C,65
00722:  DATA 61,73
00724:  DATA 65,20
00726:  DATA 74,72
00728:  DATA 79,20
0072A:  DATA 61,67
0072C:  DATA 61,69
0072E:  DATA 6E,2E
00730:  DATA 0A,00
00732:  DATA 0A,2D
00734:  DATA 2D,2D
00736:  DATA 2D,2D
00738:  DATA 2D,2D
0073A:  DATA 2D,2D
0073C:  DATA 2D,2D
0073E:  DATA 2D,2D
00740:  DATA 2D,2D
00742:  DATA 2D,2D
00744:  DATA 4D,61
00746:  DATA 69,6E
00748:  DATA 20,4D
0074A:  DATA 65,6E
0074C:  DATA 75,2D
0074E:  DATA 2D,2D
00750:  DATA 2D,2D
00752:  DATA 2D,2D
00754:  DATA 2D,2D
00756:  DATA 2D,2D
00758:  DATA 2D,2D
0075A:  DATA 2D,2D
0075C:  DATA 2D,2D
0075E:  DATA 0A,00
00760:  DATA 20,20
00762:  DATA 20,20
00764:  DATA 70,72
00766:  DATA 65,73
00768:  DATA 73,20
0076A:  DATA 61,3A
0076C:  DATA 20,47
0076E:  DATA 65,74
00770:  DATA 20,48
00772:  DATA 6F,75
00774:  DATA 73,65
00776:  DATA 20,6B
00778:  DATA 65,65
0077A:  DATA 70,69
0077C:  DATA 6E,67
0077E:  DATA 20,64
00780:  DATA 61,74
00782:  DATA 61,0A
00784:  DATA 00,00
00786:  DATA 20,20
00788:  DATA 20,20
0078A:  DATA 70,72
0078C:  DATA 65,73
0078E:  DATA 73,20
00790:  DATA 62,3A
00792:  DATA 20,45
00794:  DATA 50,53
00796:  DATA 20,50
00798:  DATA 6F,77
0079A:  DATA 65,72
0079C:  DATA 20,6F
0079E:  DATA 75,74
007A0:  DATA 70,75
007A2:  DATA 74,20
007A4:  DATA 63,6F
007A6:  DATA 6E,74
007A8:  DATA 72,6F
007AA:  DATA 6C,0A
007AC:  DATA 00,00
007AE:  DATA 20,20
007B0:  DATA 20,20
007B2:  DATA 70,72
007B4:  DATA 65,73
007B6:  DATA 73,20
007B8:  DATA 63,3A
007BA:  DATA 20,48
007BC:  DATA 6F,75
007BE:  DATA 73,65
007C0:  DATA 20,6B
007C2:  DATA 65,65
007C4:  DATA 70,69
007C6:  DATA 6E,67
007C8:  DATA 20,64
007CA:  DATA 61,74
007CC:  DATA 61,20
007CE:  DATA 63,6F
007D0:  DATA 6C,6C
007D2:  DATA 65,63
007D4:  DATA 74,69
007D6:  DATA 6F,6E
007D8:  DATA 0A,00
007DA:  DATA 20,20
007DC:  DATA 20,20
007DE:  DATA 70,72
007E0:  DATA 65,73
007E2:  DATA 73,20
007E4:  DATA 64,3A
007E6:  DATA 20,43
007E8:  DATA 68,65
007EA:  DATA 63,6B
007EC:  DATA 20,46
007EE:  DATA 6C,61
007F0:  DATA 73,68
007F2:  DATA 20,4D
007F4:  DATA 65,6D
007F6:  DATA 6F,72
007F8:  DATA 69,65
007FA:  DATA 73,0A
007FC:  DATA 00,00
007FE:  DATA 20,20
00800:  DATA 20,20
00802:  DATA 70,72
00804:  DATA 65,73
00806:  DATA 73,20
00808:  DATA 65,3A
0080A:  DATA 20,53
0080C:  DATA 65,65
0080E:  DATA 20,73
00810:  DATA 61,74
00812:  DATA 65,6C
00814:  DATA 6C,69
00816:  DATA 74,65
00818:  DATA 20,4C
0081A:  DATA 6F,67
0081C:  DATA 0A,00
0081E:  DATA 20,20
00820:  DATA 20,20
00822:  DATA 70,72
00824:  DATA 65,73
00826:  DATA 73,20
00828:  DATA 66,3A
0082A:  DATA 20,53
0082C:  DATA 65,74
0082E:  DATA 20,74
00830:  DATA 69,6D
00832:  DATA 65,20
00834:  DATA 6F,66
00836:  DATA 20,52
00838:  DATA 54,43
0083A:  DATA 0A,00
0083C:  DATA 20,20
0083E:  DATA 20,20
00840:  DATA 70,72
00842:  DATA 65,73
00844:  DATA 73,20
00846:  DATA 67,3A
00848:  DATA 20,53
0084A:  DATA 61,74
0084C:  DATA 65,6C
0084E:  DATA 6C,69
00850:  DATA 74,65
00852:  DATA 20,6C
00854:  DATA 6F,67
00856:  DATA 20,64
00858:  DATA 6F,77
0085A:  DATA 6E,6C
0085C:  DATA 69,6E
0085E:  DATA 6B,20
00860:  DATA 63,6F
00862:  DATA 6D,6D
00864:  DATA 61,6E
00866:  DATA 64,0A
00868:  DATA 00,00
0086A:  DATA 20,20
0086C:  DATA 20,20
0086E:  DATA 70,72
00870:  DATA 65,73
00872:  DATA 73,20
00874:  DATA 68,3A
00876:  DATA 20,49
00878:  DATA 48,43
0087A:  DATA 20,4D
0087C:  DATA 69,73
0087E:  DATA 73,69
00880:  DATA 6F,6E
00882:  DATA 20,73
00884:  DATA 74,61
00886:  DATA 72,74
00888:  DATA 0A,00
0088A:  DATA 20,20
0088C:  DATA 20,20
0088E:  DATA 70,72
00890:  DATA 65,73
00892:  DATA 73,20
00894:  DATA 69,3A
00896:  DATA 20,53
00898:  DATA 45,4C
0089A:  DATA 20,63
0089C:  DATA 75,72
0089E:  DATA 72,65
008A0:  DATA 6E,74
008A2:  DATA 20,4D
008A4:  DATA 65,61
008A6:  DATA 73,75
008A8:  DATA 72,65
008AA:  DATA 6D,65
008AC:  DATA 6E,74
008AE:  DATA 0A,00
008B0:  DATA 20,20
008B2:  DATA 20,20
008B4:  DATA 70,72
008B6:  DATA 65,73
008B8:  DATA 73,20
008BA:  DATA 6A,3A
008BC:  DATA 20,48
008BE:  DATA 38,20
008C0:  DATA 43,4F
008C2:  DATA 4D,20
008C4:  DATA 52,65
008C6:  DATA 73,65
008C8:  DATA 74,0A
008CA:  DATA 00,00
008CC:  DATA 20,20
008CE:  DATA 20,20
008D0:  DATA 70,72
008D2:  DATA 65,73
008D4:  DATA 73,20
008D6:  DATA 6B,3A
008D8:  DATA 20,49
008DA:  DATA 4F,20
008DC:  DATA 63,6F
008DE:  DATA 6E,74
008E0:  DATA 72,6F
008E2:  DATA 6C,0A
008E4:  DATA 00,00
008E6:  DATA 20,20
008E8:  DATA 20,20
008EA:  DATA 70,72
008EC:  DATA 65,73
008EE:  DATA 73,20
008F0:  DATA 78,3A
008F2:  DATA 20,45
008F4:  DATA 78,69
008F6:  DATA 74,20
008F8:  DATA 4D,61
008FA:  DATA 69,6E
008FC:  DATA 20,4D
008FE:  DATA 65,6E
00900:  DATA 75,0A
00902:  DATA 00,00
00904:  DATA 20,20
00906:  DATA 20,20
00908:  DATA 44,4F
0090A:  DATA 20,4E
0090C:  DATA 4F,54
0090E:  DATA 20,55
00910:  DATA 53,45
00912:  DATA 20,43
00914:  DATA 41,50
00916:  DATA 49,54
00918:  DATA 41,4C
0091A:  DATA 20,43
0091C:  DATA 48,41
0091E:  DATA 52,41
00920:  DATA 43,54
00922:  DATA 45,52
00924:  DATA 53,20
00926:  DATA 54,4F
00928:  DATA 20,57
0092A:  DATA 52,49
0092C:  DATA 54,45
0092E:  DATA 21,0A
00930:  DATA 0A,00
00932:  DATA 49,6E
00934:  DATA 76,61
00936:  DATA 6C,69
00938:  DATA 64,20
0093A:  DATA 6F,70
0093C:  DATA 74,69
0093E:  DATA 6F,6E
00940:  DATA 2E,20
00942:  DATA 50,6C
00944:  DATA 65,61
00946:  DATA 73,65
00948:  DATA 20,74
0094A:  DATA 72,79
0094C:  DATA 20,61
0094E:  DATA 67,61
00950:  DATA 69,6E
00952:  DATA 2E,0A
00954:  DATA 00,00
00956:  DATA 73,74
00958:  DATA 61,72
0095A:  DATA 74,5F
0095C:  DATA 77,72
0095E:  DATA 69,74
00960:  DATA 69,6E
00962:  DATA 67,0A
00964:  DATA 00,00
00966:  DATA 50,4F
00968:  DATA 57,45
0096A:  DATA 52,20
0096C:  DATA 4F,4E
0096E:  DATA 21,0A
00970:  DATA 00,00
00972:  DATA 50,4F
00974:  DATA 57,45
00976:  DATA 52,20
00978:  DATA 4F,4E
0097A:  DATA 21,0A
0097C:  DATA 00,00
0097E:  DATA 52,65
00980:  DATA 61,64
00982:  DATA 69,6E
00984:  DATA 67,20
00986:  DATA 63,68
00988:  DATA 69,70
0098A:  DATA 20,49
0098C:  DATA 44,0A
0098E:  DATA 00,00
00990:  DATA 44,6F
00992:  DATA 6E,65
00994:  DATA 20,72
00996:  DATA 65,61
00998:  DATA 64,69
0099A:  DATA 6E,67
0099C:  DATA 20,63
0099E:  DATA 68,69
009A0:  DATA 70,20
009A2:  DATA 49,44
009A4:  DATA 0A,00
009A6:  DATA 42,79
009A8:  DATA 74,65
009AA:  DATA 20,73
009AC:  DATA 61,76
009AE:  DATA 65,64
009B0:  DATA 0A,00
009B2:  DATA 52,65
009B4:  DATA 61,64
009B6:  DATA 69,6E
009B8:  DATA 67,20
009BA:  DATA 64,65
009BC:  DATA 73,69
009BE:  DATA 72,65
009C0:  DATA 64,20
009C2:  DATA 61,64
009C4:  DATA 64,72
009C6:  DATA 65,73
009C8:  DATA 73,0A
009CA:  DATA 00,00
009CC:  DATA 52,65
009CE:  DATA 61,64
009D0:  DATA 69,6E
009D2:  DATA 67,2E
009D4:  DATA 2E,2E
009D6:  DATA 20,0A
009D8:  DATA 00,00
009DA:  DATA 65,78
009DC:  DATA 69,74
009DE:  DATA 69,6E
009E0:  DATA 67,20
009E2:  DATA 6D,61
009E4:  DATA 69,6E
009E6:  DATA 20,6D
009E8:  DATA 65,6E
009EA:  DATA 75,20
009EC:  DATA 66,75
009EE:  DATA 6E,63
009F0:  DATA 74,69
009F2:  DATA 6F,6E
009F4:  DATA 00,00
*
00A3A:  TBLRD*+
00A3C:  MOVF   FF5,F
00A3E:  BZ    0A60
00A40:  MOVFF  FF6,87
00A44:  MOVFF  FF7,88
00A48:  MOVFF  FF8,89
00A4C:  MOVFF  FF5,8A
00A50:  BRA    09F6
00A52:  MOVFF  87,FF6
00A56:  MOVFF  88,FF7
00A5A:  MOVFF  89,FF8
00A5E:  BRA    0A3A
00A60:  GOTO   173E (RETURN)
*
00AA6:  TBLRD*+
00AA8:  MOVF   FF5,F
00AAA:  BZ    0ACC
00AAC:  MOVFF  FF6,9A
00AB0:  MOVFF  FF7,9B
00AB4:  MOVFF  FF8,9C
00AB8:  MOVFF  FF5,9E
00ABC:  RCALL  0A64
00ABE:  MOVFF  9A,FF6
00AC2:  MOVFF  9B,FF7
00AC6:  MOVFF  9C,FF8
00ACA:  BRA    0AA6
00ACC:  RETURN 0
00ACE:  MOVWF  00
00AD0:  SWAPF  00,W
00AD2:  ANDLW  0F
00AD4:  MULLW  0A
00AD6:  MOVF   00,W
00AD8:  ANDLW  0F
00ADA:  ADDWF  FF3,W
00ADC:  RETURN 0
00ADE:  RETURN 0
*
00B50:  BTFSC  x97.7
00B52:  BRA    0B72
00B54:  MOVLW  0F
00B56:  MOVWF  00
00B58:  SWAPF  x96,W
00B5A:  ANDWF  00,F
00B5C:  MOVLW  0A
00B5E:  SUBWF  00,W
00B60:  BC    0B68
00B62:  MOVLW  30
00B64:  ADDWF  00,F
00B66:  BRA    0B6C
00B68:  MOVF   x97,W
00B6A:  ADDWF  00,F
00B6C:  MOVFF  00,9E
00B70:  RCALL  0A64
00B72:  MOVLW  0F
00B74:  ANDWF  x96,F
00B76:  MOVLW  0A
00B78:  SUBWF  x96,W
00B7A:  BC    0B80
00B7C:  MOVLW  30
00B7E:  BRA    0B84
00B80:  BCF    x97.7
00B82:  MOVF   x97,W
00B84:  ADDWF  x96,F
00B86:  MOVFF  96,9E
00B8A:  RCALL  0A64
00B8C:  RETURN 0
*
00C60:  TBLRD*+
00C62:  MOVFF  FF6,9B
00C66:  MOVFF  FF7,9C
00C6A:  MOVFF  FF8,9D
00C6E:  MOVFF  FF5,9E
00C72:  RCALL  0A64
00C74:  MOVFF  9B,FF6
00C78:  MOVFF  9C,FF7
00C7C:  MOVFF  9D,FF8
00C80:  DECFSZ x9A,F
00C82:  BRA    0C60
00C84:  RETURN 0
00C86:  MOVF   x9D,W
00C88:  CLRF   01
00C8A:  SUBWF  x9C,W
00C8C:  BC    0C94
00C8E:  MOVFF  9C,00
00C92:  BRA    0CAC
00C94:  CLRF   00
00C96:  MOVLW  08
00C98:  MOVWF  x9E
00C9A:  RLCF   x9C,F
00C9C:  RLCF   00,F
00C9E:  MOVF   x9D,W
00CA0:  SUBWF  00,W
00CA2:  BTFSC  FD8.0
00CA4:  MOVWF  00
00CA6:  RLCF   01,F
00CA8:  DECFSZ x9E,F
00CAA:  BRA    0C9A
00CAC:  RETURN 0
00CAE:  MOVF   01,W
00CB0:  MOVFF  9A,9C
00CB4:  MOVLW  64
00CB6:  MOVWF  x9D
00CB8:  RCALL  0C86
00CBA:  MOVFF  00,9A
00CBE:  MOVF   01,W
00CC0:  MOVLW  30
00CC2:  BNZ   0CD2
00CC4:  BTFSS  x9B.1
00CC6:  BRA    0CE0
00CC8:  BTFSC  x9B.3
00CCA:  BRA    0CE0
00CCC:  BTFSC  x9B.4
00CCE:  MOVLW  20
00CD0:  BRA    0CD8
00CD2:  BCF    x9B.3
00CD4:  BCF    x9B.4
00CD6:  BSF    x9B.0
00CD8:  ADDWF  01,F
00CDA:  MOVFF  01,9E
00CDE:  RCALL  0A64
00CE0:  MOVFF  9A,9C
00CE4:  MOVLW  0A
00CE6:  MOVWF  x9D
00CE8:  RCALL  0C86
00CEA:  MOVFF  00,9A
00CEE:  MOVF   01,W
00CF0:  MOVLW  30
00CF2:  BNZ   0D00
00CF4:  BTFSC  x9B.3
00CF6:  BRA    0D08
00CF8:  BTFSS  x9B.0
00CFA:  BRA    0D08
00CFC:  BTFSC  x9B.4
00CFE:  MOVLW  20
00D00:  ADDWF  01,F
00D02:  MOVFF  01,9E
00D06:  RCALL  0A64
00D08:  MOVLW  30
00D0A:  ADDWF  x9A,F
00D0C:  MOVFF  9A,9E
00D10:  RCALL  0A64
00D12:  RETURN 0
*
00D2E:  MOVLW  20
00D30:  BTFSS  x96.4
00D32:  MOVLW  30
00D34:  MOVWF  x97
00D36:  MOVFF  95,00
00D3A:  BTFSS  x95.7
00D3C:  BRA    0D4E
00D3E:  COMF   00,F
00D40:  INCF   00,F
00D42:  MOVFF  00,95
00D46:  MOVLW  2D
00D48:  MOVWF  x97
00D4A:  BSF    x96.7
00D4C:  BSF    x96.0
00D4E:  MOVF   01,W
00D50:  MOVFF  95,9C
00D54:  MOVLW  64
00D56:  MOVWF  x9D
00D58:  RCALL  0C86
00D5A:  MOVFF  00,95
00D5E:  MOVLW  30
00D60:  ADDWF  01,W
00D62:  MOVWF  x98
00D64:  MOVFF  95,9C
00D68:  MOVLW  0A
00D6A:  MOVWF  x9D
00D6C:  RCALL  0C86
00D6E:  MOVLW  30
00D70:  ADDWF  00,W
00D72:  MOVWF  x9A
00D74:  MOVLW  30
00D76:  ADDWF  01,W
00D78:  MOVWF  x99
00D7A:  MOVFF  97,00
00D7E:  MOVLW  30
00D80:  SUBWF  x98,W
00D82:  BZ    0D8C
00D84:  BSF    x96.1
00D86:  BTFSC  x96.7
00D88:  BSF    x96.2
00D8A:  BRA    0DB0
00D8C:  MOVFF  97,98
00D90:  MOVLW  20
00D92:  MOVWF  x97
00D94:  MOVLW  30
00D96:  SUBWF  x99,W
00D98:  BZ    0DA2
00D9A:  BSF    x96.0
00D9C:  BTFSC  x96.7
00D9E:  BSF    x96.1
00DA0:  BRA    0DB0
00DA2:  BTFSS  FD8.2
00DA4:  BSF    x96.0
00DA6:  BNZ   0DB0
00DA8:  MOVFF  98,99
00DAC:  MOVLW  20
00DAE:  MOVWF  x98
00DB0:  BTFSC  x96.2
00DB2:  BRA    0DBE
00DB4:  BTFSC  x96.1
00DB6:  BRA    0DC4
00DB8:  BTFSC  x96.0
00DBA:  BRA    0DCA
00DBC:  BRA    0DD0
00DBE:  MOVFF  97,9E
00DC2:  RCALL  0A64
00DC4:  MOVFF  98,9E
00DC8:  RCALL  0A64
00DCA:  MOVFF  99,9E
00DCE:  RCALL  0A64
00DD0:  MOVFF  9A,9E
00DD4:  RCALL  0A64
00DD6:  GOTO   0ED6 (RETURN)
*
010DA:  MOVWF  00
010DC:  SWAPF  00,W
010DE:  ADDWF  00,W
010E0:  ANDLW  0F
010E2:  BTFSC  FD8.1
010E4:  ADDLW  16
010E6:  DAW   
010E8:  BTFSC  00.4
010EA:  ADDLW  15
010EC:  BTFSC  00.5
010EE:  ADDLW  30
010F0:  BTFSC  00.6
010F2:  ADDLW  60
010F4:  BTFSC  00.7
010F6:  ADDLW  20
010F8:  DAW   
010FA:  RETURN 0
010FC:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device ADC=16
.................... #device ICD=TRUE
.................... 
.................... #use delay(CLOCK=16M, CRYSTAL=16M)
*
00C38:  CLRF   FEA
00C3A:  MOVLW  89
00C3C:  MOVWF  FE9
00C3E:  MOVF   FEF,W
00C40:  BZ    0C5E
00C42:  MOVLW  05
00C44:  MOVWF  01
00C46:  CLRF   00
00C48:  DECFSZ 00,F
00C4A:  BRA    0C48
00C4C:  DECFSZ 01,F
00C4E:  BRA    0C46
00C50:  MOVLW  2E
00C52:  MOVWF  00
00C54:  DECFSZ 00,F
00C56:  BRA    0C54
00C58:  BRA    0C5A
00C5A:  DECFSZ FEF,F
00C5C:  BRA    0C42
00C5E:  RETURN 0
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... #use rs232(baud=9600, parity=N, xmit=PIN_E5, rcv=PIN_E4, bits=8, stream=EPS) //EPS DATA ACQUISITION
*
009F6:  BCF    F96.5
009F8:  BCF    F8D.5
009FA:  MOVLW  08
009FC:  MOVWF  01
009FE:  BRA    0A00
00A00:  NOP   
00A02:  BSF    01.7
00A04:  BRA    0A22
00A06:  BCF    01.7
00A08:  RRCF   x8A,F
00A0A:  BTFSC  FD8.0
00A0C:  BSF    F8D.5
00A0E:  BTFSS  FD8.0
00A10:  BCF    F8D.5
00A12:  BSF    01.6
00A14:  BRA    0A22
00A16:  BCF    01.6
00A18:  DECFSZ 01,F
00A1A:  BRA    0A08
00A1C:  BRA    0A1E
00A1E:  NOP   
00A20:  BSF    F8D.5
00A22:  MOVLW  84
00A24:  MOVWF  FE9
00A26:  DECFSZ FE9,F
00A28:  BRA    0A26
00A2A:  BRA    0A2C
00A2C:  NOP   
00A2E:  BTFSC  01.7
00A30:  BRA    0A06
00A32:  BTFSC  01.6
00A34:  BRA    0A16
00A36:  GOTO   0A52 (RETURN)
.................... #use rs232(baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8, stream=EXT) //MAIN RAB Rear access board 
*
00A64:  BCF    F94.6
00A66:  BCF    F8B.6
00A68:  MOVLW  08
00A6A:  MOVWF  01
00A6C:  BRA    0A6E
00A6E:  NOP   
00A70:  BSF    01.7
00A72:  BRA    0A90
00A74:  BCF    01.7
00A76:  RRCF   x9E,F
00A78:  BTFSC  FD8.0
00A7A:  BSF    F8B.6
00A7C:  BTFSS  FD8.0
00A7E:  BCF    F8B.6
00A80:  BSF    01.6
00A82:  BRA    0A90
00A84:  BCF    01.6
00A86:  DECFSZ 01,F
00A88:  BRA    0A76
00A8A:  BRA    0A8C
00A8C:  NOP   
00A8E:  BSF    F8B.6
00A90:  MOVLW  84
00A92:  MOVWF  FE9
00A94:  DECFSZ FE9,F
00A96:  BRA    0A94
00A98:  BRA    0A9A
00A9A:  NOP   
00A9C:  BTFSC  01.7
00A9E:  BRA    0A74
00AA0:  BTFSC  01.6
00AA2:  BRA    0A84
00AA4:  RETURN 0
*
01004:  BSF    F94.7
01006:  BTFSC  F82.7
01008:  BRA    1006
0100A:  MOVLW  08
0100C:  MOVWF  00
0100E:  CLRF   x8A
01010:  BSF    00.7
01012:  BRA    1030
01014:  BCF    00.7
01016:  BRA    1030
01018:  BCF    FD8.0
0101A:  BTFSC  F82.7
0101C:  BSF    FD8.0
0101E:  RRCF   x8A,F
01020:  BSF    00.6
01022:  BRA    1030
01024:  BCF    00.6
01026:  DECFSZ 00,F
01028:  BRA    1018
0102A:  MOVFF  8A,01
0102E:  BRA    1048
01030:  MOVLW  84
01032:  BTFSC  00.7
01034:  MOVLW  24
01036:  MOVWF  01
01038:  DECFSZ 01,F
0103A:  BRA    1038
0103C:  BRA    103E
0103E:  BTFSC  00.7
01040:  BRA    1014
01042:  BTFSC  00.6
01044:  BRA    1024
01046:  BRA    1018
01048:  RETURN 0
.................... #use rs232(baud=9600, parity=N, xmit=PIN_D2, rcv=PIN_D3, bits=8, stream=COM, FORCE_SW) //MAIN COM Communication, send CW data 
.................... #use rs232(baud=9600, parity=N, xmit=PIN_F7, rcv=PIN_F6, bits=8, stream=CAM, FORCE_SW) //MAIN CAM Communicationx
.................... #use spi(MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6,  BAUD=10000, BITS=8, STREAM=MAIN_FM, MODE=0) //MAIN flash memory port
*
00B08:  MOVF   x98,W
00B0A:  SUBLW  08
00B0C:  BZ    0B16
00B0E:  MOVWF  x9A
00B10:  RLCF   x97,F
00B12:  DECFSZ x9A,F
00B14:  BRA    0B10
00B16:  BSF    F96.0
00B18:  BCF    F96.6
00B1A:  BCF    F96.1
00B1C:  BCF    F8D.1
00B1E:  MOVFF  98,9A
00B22:  BTFSS  x97.7
00B24:  BCF    F8D.6
00B26:  BTFSC  x97.7
00B28:  BSF    F8D.6
00B2A:  RLCF   x97,F
00B2C:  BSF    F8D.1
00B2E:  MOVLW  41
00B30:  MOVWF  x9B
00B32:  DECFSZ x9B,F
00B34:  BRA    0B32
00B36:  RLCF   01,F
00B38:  BTFSS  F84.0
00B3A:  BCF    01.0
00B3C:  BTFSC  F84.0
00B3E:  BSF    01.0
00B40:  BCF    F8D.1
00B42:  MOVLW  40
00B44:  MOVWF  x9B
00B46:  DECFSZ x9B,F
00B48:  BRA    0B46
00B4A:  DECFSZ x9A,F
00B4C:  BRA    0B22
00B4E:  RETURN 0
.................... #use spi(MASTER, CLK=PIN_B2, DI=PIN_B5, DO=PIN_B4,  BAUD=10000, BITS=8, STREAM=COM_FM, MODE=0) //COM shared flash memory port
.................... #use spi(MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1,  BAUD=10000, BITS=8, STREAM=ADCS_FM, MODE=0) //ADCS shared flash memory port, Camera module (ovcam,mvcam)
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
....................     
.................... #define SPIPORT MAIN_FM
.................... #define SPIPORT2 COM_FM
.................... #define SPIPORT3 ADCS_FM    
....................     
.................... #define CS_PIN_1 PIN_E2 //OBC_FLASH_SELECT
.................... #define CS_PIN_2 PIN_B3 //COM_CHIP_SELECT
.................... #define CS_PIN_3 PIN_A2 //ADCS_CHIP_SELECT
.................... #define MX_PIN_1 PIN_G2 //OVCAM_MUX_SELECT
.................... #define MX_PIN_2 PIN_G3 //MVCAM_MUX_SELECT
.................... #define MX_PIN_3 PIN_A5 //ADCS_MUX_SELECT
.................... #define MX_PIN_4 PIN_C4 //COM_MUX_SELECT
.................... 
.................... 
.................... 
.................... #define READ_ID              0x9F
.................... #define READ_STATUS_REG      0x05 
.................... #define READ_DATA_BYTES      0x13  //0x03 for byte
.................... #define ENABLE_WRITE         0x06
.................... #define WRITE_PAGE           0x12  //0x02 for 3byte
.................... #define ERASE_SECTOR         0xDC  //0xD8 for 3byte
.................... #define ERASE_4KB_SUBSECTOR  0x21
.................... #define ERASE_32KB_SUBSECTOR 0x5C
.................... #define DIE_ERASE            0xC4
.................... #define FAST_READ            0x0B
....................     
.................... #define SHUTDOWN_COUNT_ADDRESS 0x00100010
.................... 
.................... 
.................... #define EN_SUP_3V3_1 PIN_B0
.................... #define EN_SUP_3V3_2 PIN_G1
.................... #define EN_SUP_3V3_DAQ PIN_D0
.................... #define EN_SUP_UNREG PIN_B1
.................... #define EN_SUP_5V0 PIN_D1
.................... #define KILL_SWITCH PIN_A4
....................     
.................... void WRITE_ENABLE_OF(){
....................  output_low(CS_PIN_1);
*
00D14:  BCF    F96.2
00D16:  BCF    F8D.2
....................  
....................  spi_xfer(SPIPORT,ENABLE_WRITE);                //Send 0x06
00D18:  MOVLW  06
00D1A:  MOVWF  x97
00D1C:  MOVLW  08
00D1E:  MOVWF  x98
00D20:  MOVLW  01
00D22:  MOVWF  x99
00D24:  RCALL  0B08
....................  output_high(CS_PIN_1);  
00D26:  BCF    F96.2
00D28:  BSF    F8D.2
....................  return;
00D2A:  GOTO   0E2C (RETURN)
.................... }
.................... 
.................... void WRITE_ENABLE_OF_COM(){
....................  output_low(CS_PIN_2);
....................  
....................  spi_xfer(SPIPORT,ENABLE_WRITE);                //Send 0x06
....................  output_high(CS_PIN_2);  
....................  return;
.................... }
.................... 
.................... void WRITE_DATA_NBYTES(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS: 0x%08lx\n", ADDRESS);  // Print address as hex
*
00DDA:  MOVLW  06
00DDC:  MOVWF  FF6
00DDE:  MOVLW  00
00DE0:  MOVWF  FF7
00DE2:  MOVLW  00
00DE4:  MOVWF  FF8
00DE6:  MOVLW  11
00DE8:  MOVWF  x9A
00DEA:  RCALL  0C60
00DEC:  MOVFF  8C,96
00DF0:  MOVLW  57
00DF2:  MOVWF  x97
00DF4:  RCALL  0B50
00DF6:  MOVFF  8B,96
00DFA:  MOVLW  57
00DFC:  MOVWF  x97
00DFE:  RCALL  0B50
00E00:  MOVFF  8A,96
00E04:  MOVLW  57
00E06:  MOVWF  x97
00E08:  RCALL  0B50
00E0A:  MOVFF  89,96
00E0E:  MOVLW  57
00E10:  MOVWF  x97
00E12:  RCALL  0B50
00E14:  MOVLW  0A
00E16:  MOVWF  x9E
00E18:  RCALL  0A64
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
00E1A:  MOVFF  8C,90
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
00E1E:  MOVFF  8B,91
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
00E22:  MOVFF  8A,92
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
00E26:  MOVFF  89,93
....................     WRITE_ENABLE_OF();  // Enable write operation
00E2A:  BRA    0D14
.................... 
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_1);
00E2C:  BCF    F96.2
00E2E:  BCF    F8D.2
....................     delay_us(2);  // Small delay for stabilization
00E30:  MOVLW  02
00E32:  MOVWF  00
00E34:  DECFSZ 00,F
00E36:  BRA    0E34
00E38:  NOP   
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT, WRITE_PAGE);
00E3A:  MOVLW  12
00E3C:  MOVWF  x97
00E3E:  MOVLW  08
00E40:  MOVWF  x98
00E42:  MOVLW  01
00E44:  MOVWF  x99
00E46:  RCALL  0B08
....................     spi_xfer(SPIPORT, adsress[0]);
00E48:  MOVFF  90,97
00E4C:  MOVLW  08
00E4E:  MOVWF  x98
00E50:  MOVLW  01
00E52:  MOVWF  x99
00E54:  RCALL  0B08
....................     spi_xfer(SPIPORT, adsress[1]);
00E56:  MOVFF  91,97
00E5A:  MOVLW  08
00E5C:  MOVWF  x98
00E5E:  MOVLW  01
00E60:  MOVWF  x99
00E62:  RCALL  0B08
....................     spi_xfer(SPIPORT, adsress[2]);
00E64:  MOVFF  92,97
00E68:  MOVLW  08
00E6A:  MOVWF  x98
00E6C:  MOVLW  01
00E6E:  MOVWF  x99
00E70:  RCALL  0B08
....................     spi_xfer(SPIPORT, adsress[3]);
00E72:  MOVFF  93,97
00E76:  MOVLW  08
00E78:  MOVWF  x98
00E7A:  MOVLW  01
00E7C:  MOVWF  x99
00E7E:  RCALL  0B08
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
00E80:  CLRF   x94
00E82:  MOVF   x8F,W
00E84:  SUBWF  x94,W
00E86:  BC    0EC2
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
00E88:  MOVF   x94,W
00E8A:  ADDWF  x8D,W
00E8C:  MOVWF  FE9
00E8E:  MOVLW  00
00E90:  ADDWFC x8E,W
00E92:  MOVWF  FEA
00E94:  MOVFF  FEF,97
00E98:  MOVLW  08
00E9A:  MOVWF  x98
00E9C:  MOVLW  01
00E9E:  MOVWF  x99
00EA0:  RCALL  0B08
....................         fprintf(EXT,"%02X ", data[i]);    // Print each byte as hex (optional)
00EA2:  MOVF   x94,W
00EA4:  ADDWF  x8D,W
00EA6:  MOVWF  FE9
00EA8:  MOVLW  00
00EAA:  ADDWFC x8E,W
00EAC:  MOVWF  FEA
00EAE:  MOVFF  FEF,96
00EB2:  MOVLW  37
00EB4:  MOVWF  x97
00EB6:  RCALL  0B50
00EB8:  MOVLW  20
00EBA:  MOVWF  x9E
00EBC:  RCALL  0A64
00EBE:  INCF   x94,F
00EC0:  BRA    0E82
....................     }
....................     
....................     output_high(CS_PIN_1);  // Deselect SPI device
00EC2:  BCF    F96.2
00EC4:  BSF    F8D.2
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN!\n", data_number);
00EC6:  MOVLW  0A
00EC8:  MOVWF  x9E
00ECA:  RCALL  0A64
00ECC:  MOVFF  8F,95
00ED0:  MOVLW  18
00ED2:  MOVWF  x96
00ED4:  BRA    0D2E
00ED6:  MOVLW  21
00ED8:  MOVWF  FF6
00EDA:  MOVLW  00
00EDC:  MOVWF  FF7
00EDE:  MOVLW  00
00EE0:  MOVWF  FF8
00EE2:  MOVLW  10
00EE4:  MOVWF  x9A
00EE6:  RCALL  0C60
00EE8:  RETURN 0
.................... 
.................... }
.................... 
.................... void WRITE_DATA_NBYTES_COM(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS: 0x%08lx\n", ADDRESS);  // Print address as hex
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
....................     WRITE_ENABLE_OF_COM();  // Enable write operation
.................... 
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_2);
....................     delay_us(2);  // Small delay for stabilization
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT, WRITE_PAGE);
....................     spi_xfer(SPIPORT, adsress[0]);
....................     spi_xfer(SPIPORT, adsress[1]);
....................     spi_xfer(SPIPORT, adsress[2]);
....................     spi_xfer(SPIPORT, adsress[3]);
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
....................         fprintf(EXT,"%02X ", data[i]);    // Print each byte as hex (optional)
....................     }
....................     
....................     output_high(CS_PIN_2);  // Deselect SPI device5
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN!\n", data_number);
.................... 
.................... }
.................... 
....................  
.................... void READ_DATA_NBYTES(unsigned int32 ADDRESS, unsigned char *Data_return, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................    
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
*
00B8E:  MOVFF  8C,90
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
00B92:  MOVFF  8B,91
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
00B96:  MOVFF  8A,92
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
00B9A:  MOVFF  89,93
.................... 
....................     output_low(CS_PIN_1);  // Select SPI device
00B9E:  BCF    F96.2
00BA0:  BCF    F8D.2
.................... 
....................     // Send READ DATA COMMAND (0x13 or appropriate for your flash chip)
....................     spi_xfer(SPIPORT, READ_DATA_BYTES);
00BA2:  MOVLW  13
00BA4:  MOVWF  x97
00BA6:  MOVLW  08
00BA8:  MOVWF  x98
00BAA:  MOVLW  01
00BAC:  MOVWF  x99
00BAE:  RCALL  0B08
....................     // Send address bytes
....................     spi_xfer(SPIPORT, adsress[0]);
00BB0:  MOVFF  90,97
00BB4:  MOVLW  08
00BB6:  MOVWF  x98
00BB8:  MOVLW  01
00BBA:  MOVWF  x99
00BBC:  RCALL  0B08
....................     spi_xfer(SPIPORT, adsress[1]);
00BBE:  MOVFF  91,97
00BC2:  MOVLW  08
00BC4:  MOVWF  x98
00BC6:  MOVLW  01
00BC8:  MOVWF  x99
00BCA:  RCALL  0B08
....................     spi_xfer(SPIPORT, adsress[2]);
00BCC:  MOVFF  92,97
00BD0:  MOVLW  08
00BD2:  MOVWF  x98
00BD4:  MOVLW  01
00BD6:  MOVWF  x99
00BD8:  RCALL  0B08
....................     spi_xfer(SPIPORT, adsress[3]);
00BDA:  MOVFF  93,97
00BDE:  MOVLW  08
00BE0:  MOVWF  x98
00BE2:  MOVLW  01
00BE4:  MOVWF  x99
00BE6:  RCALL  0B08
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number; i++) {
00BE8:  CLRF   x94
00BEA:  MOVF   x8F,W
00BEC:  SUBWF  x94,W
00BEE:  BC    0C2C
....................         Data_return[i] = spi_xfer(SPIPORT, 0x00);  // Send dummy byte to receive data
00BF0:  MOVF   x94,W
00BF2:  ADDWF  x8D,W
00BF4:  MOVWF  FE9
00BF6:  MOVLW  00
00BF8:  ADDWFC x8E,W
00BFA:  MOVWF  FEA
00BFC:  CLRF   x97
00BFE:  MOVLW  08
00C00:  MOVWF  x98
00C02:  MOVLW  01
00C04:  MOVWF  x99
00C06:  RCALL  0B08
00C08:  MOVFF  01,FEF
....................         fprintf(EXT,"%02X ", Data_return[i]);           // Print each byte as hex
00C0C:  MOVF   x94,W
00C0E:  ADDWF  x8D,W
00C10:  MOVWF  FE9
00C12:  MOVLW  00
00C14:  ADDWFC x8E,W
00C16:  MOVWF  FEA
00C18:  MOVFF  FEF,96
00C1C:  MOVLW  37
00C1E:  MOVWF  x97
00C20:  RCALL  0B50
00C22:  MOVLW  20
00C24:  MOVWF  x9E
00C26:  RCALL  0A64
00C28:  INCF   x94,F
00C2A:  BRA    0BEA
....................     }
.................... 
....................     output_high(CS_PIN_1);  // Deselect SPI device after reading
00C2C:  BCF    F96.2
00C2E:  BSF    F8D.2
....................     fprintf(EXT,"\n");
00C30:  MOVLW  0A
00C32:  MOVWF  x9E
00C34:  RCALL  0A64
00C36:  RETURN 0
.................... }
.................... 
.................... 
.................... int8 READ_CHIP_ID_OF()
.................... {
....................  output_low(CS_PIN_1);           //lower the CS PIN
*
00FD4:  BCF    F96.2
00FD6:  BCF    F8D.2
....................  
....................  ////////////////////////////////////////////////////////////////
....................  int8 chip_id;
....................  spi_xfer(SPIPORT,READ_ID);    //READ ID COMAND   (0x9F)
00FD8:  MOVLW  9F
00FDA:  MOVWF  x97
00FDC:  MOVLW  08
00FDE:  MOVWF  x98
00FE0:  MOVLW  01
00FE2:  MOVWF  x99
00FE4:  RCALL  0B08
....................  chip_id = spi_xfer(SPIPORT);
00FE6:  MOVLW  01
00FE8:  MOVWF  x97
00FEA:  MOVLW  08
00FEC:  MOVWF  x98
00FEE:  MOVLW  01
00FF0:  MOVWF  x99
00FF2:  RCALL  0B08
00FF4:  MOVFF  01,87
....................  ////////////////////////////////////////////////////////////////
....................  
....................  output_high(CS_PIN_1);         //take CS PIN higher back
00FF8:  BCF    F96.2
00FFA:  BSF    F8D.2
....................  
....................  return chip_id;
00FFC:  MOVFF  87,01
01000:  GOTO   17DA (RETURN)
.................... }
.................... 
.................... 
.................... //#define SHUTDOWN_COUNT_ADDRESS  0x00000500  // Address where shutdown count is stored
.................... 
.................... int8 update_shutdown_count(void) {
....................     fprintf(EXT, "Shutdown count started\n");
*
00EEA:  MOVLW  5E
00EEC:  MOVWF  FF6
00EEE:  MOVLW  00
00EF0:  MOVWF  FF7
00EF2:  MOVLW  00
00EF4:  MOVWF  FF8
00EF6:  RCALL  0AA6
.................... 
....................     unsigned int8 shutdown_count[1];
....................     READ_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
00EF8:  CLRF   x8C
00EFA:  MOVLW  10
00EFC:  MOVWF  x8B
00EFE:  CLRF   x8A
00F00:  MOVWF  x89
00F02:  CLRF   x8E
00F04:  MOVLW  87
00F06:  MOVWF  x8D
00F08:  MOVLW  01
00F0A:  MOVWF  x8F
00F0C:  RCALL  0B8E
....................     delay_ms(10);
00F0E:  MOVLW  0A
00F10:  MOVWF  x89
00F12:  RCALL  0C38
.................... 
....................     fprintf(EXT, "Read shutdown count: %u\n", shutdown_count[0]);
00F14:  MOVLW  76
00F16:  MOVWF  FF6
00F18:  MOVLW  00
00F1A:  MOVWF  FF7
00F1C:  MOVLW  00
00F1E:  MOVWF  FF8
00F20:  MOVLW  15
00F22:  MOVWF  x9A
00F24:  RCALL  0C60
00F26:  MOVFF  87,9A
00F2A:  MOVLW  1B
00F2C:  MOVWF  x9B
00F2E:  RCALL  0CAE
00F30:  MOVLW  0A
00F32:  MOVWF  x9E
00F34:  RCALL  0A64
.................... 
....................     // Check if the shutdown count is uninitialized (0xFF)
....................     if (shutdown_count[0] == 0xFF) {
00F36:  INCFSZ x87,W
00F38:  BRA    0F4A
....................         shutdown_count[0] = 0;  // Initialize to 0 if uninitialized
00F3A:  CLRF   x87
....................         fprintf(EXT, "Shutdown count uninitialized, setting to 0\n");
00F3C:  MOVLW  90
00F3E:  MOVWF  FF6
00F40:  MOVLW  00
00F42:  MOVWF  FF7
00F44:  MOVLW  00
00F46:  MOVWF  FF8
00F48:  RCALL  0AA6
....................     }
.................... 
....................     shutdown_count[0] += 1;  // Increment the shutdown count
00F4A:  MOVLW  01
00F4C:  ADDWF  x87,F
....................     WRITE_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
00F4E:  CLRF   x8C
00F50:  MOVLW  10
00F52:  MOVWF  x8B
00F54:  CLRF   x8A
00F56:  MOVWF  x89
00F58:  CLRF   x8E
00F5A:  MOVLW  87
00F5C:  MOVWF  x8D
00F5E:  MOVLW  01
00F60:  MOVWF  x8F
00F62:  RCALL  0DDA
....................     delay_ms(10);
00F64:  MOVLW  0A
00F66:  MOVWF  x89
00F68:  RCALL  0C38
.................... 
....................     // Read back to verify it was written correctly
....................     unsigned int8 verify_count[1];
....................     READ_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, verify_count, 1);
00F6A:  CLRF   x8C
00F6C:  MOVLW  10
00F6E:  MOVWF  x8B
00F70:  CLRF   x8A
00F72:  MOVWF  x89
00F74:  CLRF   x8E
00F76:  MOVLW  88
00F78:  MOVWF  x8D
00F7A:  MOVLW  01
00F7C:  MOVWF  x8F
00F7E:  RCALL  0B8E
....................     if (shutdown_count[0] == verify_count[0]) {
00F80:  MOVF   x88,W
00F82:  SUBWF  x87,W
00F84:  BNZ   0FAA
....................         fprintf(EXT, "Shutdown count successfully updated: %u\n", verify_count[0]);
00F86:  MOVLW  BC
00F88:  MOVWF  FF6
00F8A:  MOVLW  00
00F8C:  MOVWF  FF7
00F8E:  MOVLW  00
00F90:  MOVWF  FF8
00F92:  MOVLW  25
00F94:  MOVWF  x9A
00F96:  RCALL  0C60
00F98:  MOVFF  88,9A
00F9C:  MOVLW  1B
00F9E:  MOVWF  x9B
00FA0:  RCALL  0CAE
00FA2:  MOVLW  0A
00FA4:  MOVWF  x9E
00FA6:  RCALL  0A64
....................     } else {
00FA8:  BRA    0FCC
....................         fprintf(EXT, "Failed to update shutdown count. Read back: %u\n", verify_count[0]);
00FAA:  MOVLW  E6
00FAC:  MOVWF  FF6
00FAE:  MOVLW  00
00FB0:  MOVWF  FF7
00FB2:  MOVLW  00
00FB4:  MOVWF  FF8
00FB6:  MOVLW  2C
00FB8:  MOVWF  x9A
00FBA:  RCALL  0C60
00FBC:  MOVFF  88,9A
00FC0:  MOVLW  1B
00FC2:  MOVWF  x9B
00FC4:  RCALL  0CAE
00FC6:  MOVLW  0A
00FC8:  MOVWF  x9E
00FCA:  RCALL  0A64
....................     }
.................... 
....................     return shutdown_count[0];
00FCC:  MOVFF  87,01
00FD0:  GOTO   17C6 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... void set_clock(rtc_time_t &date_time)
.................... {
.................... 
....................    date_time.tm_year=00;
*
011B2:  CLRF   x88
....................    date_time.tm_mon=00;
011B4:  CLRF   x8B
....................    date_time.tm_mday=00;
011B6:  CLRF   x8A
....................    date_time.tm_wday=00;
011B8:  CLRF   x8D
....................    date_time.tm_hour=00;
011BA:  CLRF   x8C
....................    date_time.tm_min=00;
011BC:  CLRF   x8F
....................    date_time.tm_sec=0; 
011BE:  CLRF   x8E
011C0:  MOVLB  F
.................... 
.................... }
.................... //hak thuah spilt on that thang enough 
.................... // Main menu functions
.................... void handle_flash_memories() {
....................     char flash_option;
....................     fprintf(EXT, "pressed option d: Check Flash Memories\n\n");
*
0104A:  MOVLW  16
0104C:  MOVWF  FF6
0104E:  MOVLW  01
01050:  MOVWF  FF7
01052:  MOVLW  00
01054:  MOVWF  FF8
01056:  RCALL  0AA6
....................     fprintf(EXT, "Please choose which flash memory to work on (a, b, c):\n");
01058:  MOVLW  40
0105A:  MOVWF  FF6
0105C:  MOVLW  01
0105E:  MOVWF  FF7
01060:  MOVLW  00
01062:  MOVWF  FF8
01064:  RCALL  0AA6
....................     fprintf(EXT, "press a: MAIN flash memory\n");
01066:  MOVLW  78
01068:  MOVWF  FF6
0106A:  MOVLW  01
0106C:  MOVWF  FF7
0106E:  MOVLW  00
01070:  MOVWF  FF8
01072:  RCALL  0AA6
....................     fprintf(EXT, "press b: COM shared flash memory\n");
01074:  MOVLW  94
01076:  MOVWF  FF6
01078:  MOVLW  01
0107A:  MOVWF  FF7
0107C:  MOVLW  00
0107E:  MOVWF  FF8
01080:  RCALL  0AA6
....................     fprintf(EXT, "press c: ADCS shared flash memory\n");
01082:  MOVLW  B6
01084:  MOVWF  FF6
01086:  MOVLW  01
01088:  MOVWF  FF7
0108A:  MOVLW  00
0108C:  MOVWF  FF8
0108E:  RCALL  0AA6
.................... 
....................     flash_option = fgetc(EXT);
01090:  RCALL  1004
01092:  MOVFF  01,88
.................... 
....................     switch (flash_option) {
01096:  MOVF   x88,W
01098:  XORLW  61
0109A:  BZ    10A6
0109C:  XORLW  03
0109E:  BZ    10A8
010A0:  XORLW  01
010A2:  BZ    10B8
010A4:  BRA    10C8
....................         case 'a':
....................            // READ_DATA_NBYTES();
....................             break;
010A6:  BRA    10D6
....................         case 'b':
....................             fprintf(EXT, "COM shared flash memory chosen\n");
010A8:  MOVLW  DA
010AA:  MOVWF  FF6
010AC:  MOVLW  01
010AE:  MOVWF  FF7
010B0:  MOVLW  00
010B2:  MOVWF  FF8
010B4:  RCALL  0AA6
....................             // Implement COM shared flash memory handling
....................             break;
010B6:  BRA    10D6
....................         case 'c':
....................             fprintf(EXT, "ADCS shared flash memory chosen\n");
010B8:  MOVLW  FA
010BA:  MOVWF  FF6
010BC:  MOVLW  01
010BE:  MOVWF  FF7
010C0:  MOVLW  00
010C2:  MOVWF  FF8
010C4:  RCALL  0AA6
....................             // Implement ADCS shared flash memory handling
....................             break;
010C6:  BRA    10D6
....................         default:
....................             fprintf(EXT, "Invalid flash memory option. Please try again.\n");
010C8:  MOVLW  1C
010CA:  MOVWF  FF6
010CC:  MOVLW  02
010CE:  MOVWF  FF7
010D0:  MOVLW  00
010D2:  MOVWF  FF8
010D4:  RCALL  0AA6
....................             break;
....................     }
010D6:  GOTO   167A (RETURN)
.................... }
.................... 
.................... void handle_main_flash_memory() {
....................     char main_flash_option;
....................     unsigned int32 address;
....................     unsigned char data[32];
....................     unsigned char data_length;
.................... 
....................     fprintf(EXT, "MAIN flash memory chosen\n");
....................     fprintf(EXT, "press a: Read ID of the chip\n");
....................     fprintf(EXT, "press b: Write data set in specified address\n");
....................     fprintf(EXT, "press c: Read data set in specified address\n");
....................     fprintf(EXT, "press d: Return to MAIN MENU\n");
.................... 
....................     main_flash_option = fgetc(EXT);
.................... 
....................     switch (main_flash_option) {
....................         case 'a':
....................             fprintf(EXT, "Started reading chip ID of MAIN flash memory\n");
....................             READ_CHIP_ID_OF();  // Replace with actual function
....................             break;
....................         case 'b':
....................             fprintf(EXT, "Write data set in specified address\n");
....................             fprintf(EXT, "Enter address (32-bit hexadecimal): ");
....................             scanf("%x", &address);
....................             fprintf(EXT, "Enter data length (1 to 32): ");
.................... //            scanf("%d", &data_length);
....................             fprintf(EXT, "Enter data bytes (space-separated hexadecimal values): ");
....................             for (unsigned char i = 0; i < data_length; i++) {
....................                 scanf("%x", &data[i]);
....................             }
....................             WRITE_DATA_NBYTES(address, data, data_length);
....................             fprintf(EXT, "Data written to specified address.\n");
....................             break;
....................         case 'c':
....................             fprintf(EXT, "Read data set in specified address\n");
....................             fprintf(EXT, "Enter your specified address: ");
....................             scanf("%x", &address);
....................             fprintf(EXT, "Enter your specified address length : ");
.................... //            scanf("%d", &data_length);
.................... //            READ_DATA_NBYTES(address,data_length);  // Replace with actual function
....................             break;
....................         case 'd':
....................             return;
....................         default:
....................             fprintf(EXT, "Invalid MAIN flash memory option. Please try again.\n");
....................             break;
....................     }
.................... }
.................... 
.................... void handle_set_time() {
....................     rtc_time_t write_clock, read_clock;
....................     rtc_read(&read_clock);
*
010FE:  MOVLB  F
01100:  BSF    x5F.0
01102:  BSF    x5F.1
01104:  CLRF   FEA
01106:  MOVLW  91
01108:  MOVWF  FE9
0110A:  MOVLW  04
0110C:  MOVWF  01
0110E:  MOVF   x5C,W
01110:  MOVLB  0
01112:  RCALL  0ACE
01114:  MOVWF  FEE
01116:  MOVLB  F
01118:  MOVF   x5D,W
0111A:  MOVLB  0
0111C:  RCALL  0ACE
0111E:  MOVWF  FEE
01120:  DECFSZ 01,F
01122:  BRA    1126
01124:  BRA    112A
01126:  MOVLB  F
01128:  BRA    110E
....................     fprintf(EXT, "Now time is\n");
0112A:  MOVLW  94
0112C:  MOVWF  FF6
0112E:  MOVLW  04
01130:  MOVWF  FF7
01132:  MOVLW  00
01134:  MOVWF  FF8
01136:  RCALL  0AA6
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
01138:  MOVLW  0D
0113A:  MOVWF  x9E
0113C:  RCALL  0A64
0113E:  MOVFF  94,9A
01142:  MOVLW  01
01144:  MOVWF  x9B
01146:  RCALL  0CAE
01148:  MOVLW  2F
0114A:  MOVWF  x9E
0114C:  RCALL  0A64
0114E:  MOVFF  93,9A
01152:  MOVLW  01
01154:  MOVWF  x9B
01156:  RCALL  0CAE
01158:  MOVLW  AC
0115A:  MOVWF  FF6
0115C:  MOVLW  04
0115E:  MOVWF  FF7
01160:  MOVLW  00
01162:  MOVWF  FF8
01164:  MOVLW  03
01166:  MOVWF  x9A
01168:  RCALL  0C60
0116A:  MOVFF  91,9A
0116E:  MOVLW  01
01170:  MOVWF  x9B
01172:  RCALL  0CAE
01174:  MOVLW  20
01176:  MOVWF  x9E
01178:  RCALL  0A64
0117A:  MOVFF  95,9A
0117E:  MOVLW  01
01180:  MOVWF  x9B
01182:  RCALL  0CAE
01184:  MOVLW  3A
01186:  MOVWF  x9E
01188:  RCALL  0A64
0118A:  MOVFF  98,9A
0118E:  MOVLW  01
01190:  MOVWF  x9B
01192:  RCALL  0CAE
01194:  MOVLW  3A
01196:  MOVWF  x9E
01198:  RCALL  0A64
0119A:  MOVFF  97,9A
0119E:  MOVLW  01
011A0:  MOVWF  x9B
011A2:  RCALL  0CAE
....................     fprintf(EXT, "Time changing function activated\n");
011A4:  MOVLW  C4
011A6:  MOVWF  FF6
011A8:  MOVLW  04
011AA:  MOVWF  FF7
011AC:  MOVLW  00
011AE:  MOVWF  FF8
011B0:  RCALL  0AA6
....................     set_clock(write_clock);
....................     rtc_write(&write_clock);
*
011C2:  MOVLB  F
011C4:  MOVLW  55
011C6:  MOVWF  F7E
011C8:  MOVLW  AA
011CA:  MOVWF  F7E
011CC:  BSF    x5F.5
011CE:  BSF    x5F.0
011D0:  BSF    x5F.1
011D2:  CLRF   FEA
011D4:  MOVLW  88
011D6:  MOVWF  FE9
011D8:  MOVLW  04
011DA:  MOVWF  01
011DC:  MOVF   FEE,W
011DE:  MOVLB  0
011E0:  RCALL  10DA
011E2:  MOVLB  F
011E4:  MOVWF  x5C
011E6:  MOVF   FEE,W
011E8:  MOVLB  0
011EA:  RCALL  10DA
011EC:  MOVLB  F
011EE:  MOVWF  x5D
011F0:  DECFSZ 01,F
011F2:  BRA    11DC
011F4:  BCF    x5F.5
....................     fprintf(EXT, "Time successfully changed. Current time is:\n");
011F6:  MOVLW  E6
011F8:  MOVWF  FF6
011FA:  MOVLW  04
011FC:  MOVWF  FF7
011FE:  MOVLW  00
01200:  MOVWF  FF8
01202:  MOVLB  0
01204:  RCALL  0AA6
....................     rtc_read(&read_clock);
01206:  MOVLB  F
01208:  BSF    x5F.0
0120A:  BSF    x5F.1
0120C:  CLRF   FEA
0120E:  MOVLW  91
01210:  MOVWF  FE9
01212:  MOVLW  04
01214:  MOVWF  01
01216:  MOVF   x5C,W
01218:  MOVLB  0
0121A:  RCALL  0ACE
0121C:  MOVWF  FEE
0121E:  MOVLB  F
01220:  MOVF   x5D,W
01222:  MOVLB  0
01224:  RCALL  0ACE
01226:  MOVWF  FEE
01228:  DECFSZ 01,F
0122A:  BRA    122E
0122C:  BRA    1232
0122E:  MOVLB  F
01230:  BRA    1216
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
01232:  MOVLW  0D
01234:  MOVWF  x9E
01236:  RCALL  0A64
01238:  MOVFF  94,9A
0123C:  MOVLW  01
0123E:  MOVWF  x9B
01240:  RCALL  0CAE
01242:  MOVLW  2F
01244:  MOVWF  x9E
01246:  RCALL  0A64
01248:  MOVFF  93,9A
0124C:  MOVLW  01
0124E:  MOVWF  x9B
01250:  RCALL  0CAE
01252:  MOVLW  1E
01254:  MOVWF  FF6
01256:  MOVLW  05
01258:  MOVWF  FF7
0125A:  MOVLW  00
0125C:  MOVWF  FF8
0125E:  MOVLW  03
01260:  MOVWF  x9A
01262:  RCALL  0C60
01264:  MOVFF  91,9A
01268:  MOVLW  01
0126A:  MOVWF  x9B
0126C:  RCALL  0CAE
0126E:  MOVLW  20
01270:  MOVWF  x9E
01272:  CALL   0A64
01276:  MOVFF  95,9A
0127A:  MOVLW  01
0127C:  MOVWF  x9B
0127E:  RCALL  0CAE
01280:  MOVLW  3A
01282:  MOVWF  x9E
01284:  CALL   0A64
01288:  MOVFF  98,9A
0128C:  MOVLW  01
0128E:  MOVWF  x9B
01290:  RCALL  0CAE
01292:  MOVLW  3A
01294:  MOVWF  x9E
01296:  CALL   0A64
0129A:  MOVFF  97,9A
0129E:  MOVLW  01
012A0:  MOVWF  x9B
012A2:  RCALL  0CAE
012A4:  GOTO   167A (RETURN)
.................... }
.................... 
.................... void handle_io_control() {
....................     char io_option;
....................     int8 state_of_pin;
.................... 
....................     fprintf(EXT, "IO control chosen\n");
012A8:  MOVLW  36
012AA:  MOVWF  FF6
012AC:  MOVLW  05
012AE:  MOVWF  FF7
012B0:  MOVLW  00
012B2:  MOVWF  FF8
012B4:  CALL   0AA6
.................... 
....................     // Check and display the state of each pin before providing options
....................     state_of_pin = input_state(EN_SUP_3V3_1);
012B8:  CLRF   x89
012BA:  BTFSC  F81.0
012BC:  INCF   x89,F
....................     fprintf(EXT, "    press a: Toggle EN_SUP_3V3_1 /is currently/");
012BE:  MOVLW  4A
012C0:  MOVWF  FF6
012C2:  MOVLW  05
012C4:  MOVWF  FF7
012C6:  MOVLW  00
012C8:  MOVWF  FF8
012CA:  CALL   0AA6
....................     if(state_of_pin == 1 ){
012CE:  DECFSZ x89,W
012D0:  BRA    12E4
....................         fprintf(EXT, "HIGH\n");
012D2:  MOVLW  7A
012D4:  MOVWF  FF6
012D6:  MOVLW  05
012D8:  MOVWF  FF7
012DA:  MOVLW  00
012DC:  MOVWF  FF8
012DE:  CALL   0AA6
....................     }else if(state_of_pin == 0){
012E2:  BRA    130A
012E4:  MOVF   x89,F
012E6:  BNZ   12FA
....................         fprintf(EXT, "LOW\n");
012E8:  MOVLW  80
012EA:  MOVWF  FF6
012EC:  MOVLW  05
012EE:  MOVWF  FF7
012F0:  MOVLW  00
012F2:  MOVWF  FF8
012F4:  CALL   0AA6
....................     }else {
012F8:  BRA    130A
....................         fprintf(EXT, "Invalid\n"); 
012FA:  MOVLW  86
012FC:  MOVWF  FF6
012FE:  MOVLW  05
01300:  MOVWF  FF7
01302:  MOVLW  00
01304:  MOVWF  FF8
01306:  CALL   0AA6
....................     }
....................     state_of_pin = input_state(EN_SUP_3V3_2);
0130A:  CLRF   x89
0130C:  BTFSC  F86.1
0130E:  INCF   x89,F
....................     fprintf(EXT, "    press b: Toggle EN_SUP_3V3_2 /is currently/");
01310:  MOVLW  90
01312:  MOVWF  FF6
01314:  MOVLW  05
01316:  MOVWF  FF7
01318:  MOVLW  00
0131A:  MOVWF  FF8
0131C:  CALL   0AA6
....................     if(state_of_pin == 1 ){
01320:  DECFSZ x89,W
01322:  BRA    1336
....................         fprintf(EXT, "HIGH\n");
01324:  MOVLW  C0
01326:  MOVWF  FF6
01328:  MOVLW  05
0132A:  MOVWF  FF7
0132C:  MOVLW  00
0132E:  MOVWF  FF8
01330:  CALL   0AA6
....................     }else if(state_of_pin == 0){
01334:  BRA    135C
01336:  MOVF   x89,F
01338:  BNZ   134C
....................         fprintf(EXT, "LOW\n");
0133A:  MOVLW  C6
0133C:  MOVWF  FF6
0133E:  MOVLW  05
01340:  MOVWF  FF7
01342:  MOVLW  00
01344:  MOVWF  FF8
01346:  CALL   0AA6
....................     }else {
0134A:  BRA    135C
....................         fprintf(EXT, "Invalid\n"); 
0134C:  MOVLW  CC
0134E:  MOVWF  FF6
01350:  MOVLW  05
01352:  MOVWF  FF7
01354:  MOVLW  00
01356:  MOVWF  FF8
01358:  CALL   0AA6
....................     }
....................      state_of_pin = input_state(EN_SUP_3V3_DAQ);
0135C:  CLRF   x89
0135E:  BTFSC  F83.0
01360:  INCF   x89,F
....................     fprintf(EXT, "    press c: Toggle EN_SUP_3V3_DAQ /is currently/");
01362:  MOVLW  D6
01364:  MOVWF  FF6
01366:  MOVLW  05
01368:  MOVWF  FF7
0136A:  MOVLW  00
0136C:  MOVWF  FF8
0136E:  CALL   0AA6
....................     if(state_of_pin == 1 ){
01372:  DECFSZ x89,W
01374:  BRA    1388
....................         fprintf(EXT, "HIGH\n");
01376:  MOVLW  08
01378:  MOVWF  FF6
0137A:  MOVLW  06
0137C:  MOVWF  FF7
0137E:  MOVLW  00
01380:  MOVWF  FF8
01382:  CALL   0AA6
....................     }else if(state_of_pin == 0){
01386:  BRA    13AE
01388:  MOVF   x89,F
0138A:  BNZ   139E
....................         fprintf(EXT, "LOW\n");
0138C:  MOVLW  0E
0138E:  MOVWF  FF6
01390:  MOVLW  06
01392:  MOVWF  FF7
01394:  MOVLW  00
01396:  MOVWF  FF8
01398:  CALL   0AA6
....................     }else {
0139C:  BRA    13AE
....................         fprintf(EXT, "Invalid\n"); 
0139E:  MOVLW  14
013A0:  MOVWF  FF6
013A2:  MOVLW  06
013A4:  MOVWF  FF7
013A6:  MOVLW  00
013A8:  MOVWF  FF8
013AA:  CALL   0AA6
....................     }
....................     state_of_pin = input_state(EN_SUP_UNREG);
013AE:  CLRF   x89
013B0:  BTFSC  F81.1
013B2:  INCF   x89,F
....................     fprintf(EXT, "    press d: Toggle EN_SUP_UNREG /is currently/");
013B4:  MOVLW  1E
013B6:  MOVWF  FF6
013B8:  MOVLW  06
013BA:  MOVWF  FF7
013BC:  MOVLW  00
013BE:  MOVWF  FF8
013C0:  CALL   0AA6
....................     if(state_of_pin == 1 ){
013C4:  DECFSZ x89,W
013C6:  BRA    13DA
....................         fprintf(EXT, "HIGH\n");
013C8:  MOVLW  4E
013CA:  MOVWF  FF6
013CC:  MOVLW  06
013CE:  MOVWF  FF7
013D0:  MOVLW  00
013D2:  MOVWF  FF8
013D4:  CALL   0AA6
....................     }else if(state_of_pin == 0){
013D8:  BRA    1400
013DA:  MOVF   x89,F
013DC:  BNZ   13F0
....................         fprintf(EXT, "LOW\n");
013DE:  MOVLW  54
013E0:  MOVWF  FF6
013E2:  MOVLW  06
013E4:  MOVWF  FF7
013E6:  MOVLW  00
013E8:  MOVWF  FF8
013EA:  CALL   0AA6
....................     }else {
013EE:  BRA    1400
....................         fprintf(EXT, "Invalid\n"); 
013F0:  MOVLW  5A
013F2:  MOVWF  FF6
013F4:  MOVLW  06
013F6:  MOVWF  FF7
013F8:  MOVLW  00
013FA:  MOVWF  FF8
013FC:  CALL   0AA6
....................     }
....................     state_of_pin = input_state(EN_SUP_5V0);
01400:  CLRF   x89
01402:  BTFSC  F83.1
01404:  INCF   x89,F
....................     fprintf(EXT, "    press e: Toggle EN_SUP_5V0 /is currently/");
01406:  MOVLW  64
01408:  MOVWF  FF6
0140A:  MOVLW  06
0140C:  MOVWF  FF7
0140E:  MOVLW  00
01410:  MOVWF  FF8
01412:  CALL   0AA6
....................     if(state_of_pin == 1 ){
01416:  DECFSZ x89,W
01418:  BRA    142C
....................         fprintf(EXT, "HIGH\n");
0141A:  MOVLW  92
0141C:  MOVWF  FF6
0141E:  MOVLW  06
01420:  MOVWF  FF7
01422:  MOVLW  00
01424:  MOVWF  FF8
01426:  CALL   0AA6
....................     }else if(state_of_pin == 0){
0142A:  BRA    1452
0142C:  MOVF   x89,F
0142E:  BNZ   1442
....................         fprintf(EXT, "LOW\n");
01430:  MOVLW  98
01432:  MOVWF  FF6
01434:  MOVLW  06
01436:  MOVWF  FF7
01438:  MOVLW  00
0143A:  MOVWF  FF8
0143C:  CALL   0AA6
....................     }else {
01440:  BRA    1452
....................         fprintf(EXT, "Invalid\n"); 
01442:  MOVLW  9E
01444:  MOVWF  FF6
01446:  MOVLW  06
01448:  MOVWF  FF7
0144A:  MOVLW  00
0144C:  MOVWF  FF8
0144E:  CALL   0AA6
....................     }
....................     state_of_pin = input_state(KILL_SWITCH);
01452:  CLRF   x89
01454:  BTFSC  F80.4
01456:  INCF   x89,F
....................     fprintf(EXT, "    press f: Toggle KILL_SWITCH /is currently/");
01458:  MOVLW  A8
0145A:  MOVWF  FF6
0145C:  MOVLW  06
0145E:  MOVWF  FF7
01460:  MOVLW  00
01462:  MOVWF  FF8
01464:  CALL   0AA6
....................     if(state_of_pin == 1 ){
01468:  DECFSZ x89,W
0146A:  BRA    147E
....................         fprintf(EXT, "HIGH\n");
0146C:  MOVLW  D8
0146E:  MOVWF  FF6
01470:  MOVLW  06
01472:  MOVWF  FF7
01474:  MOVLW  00
01476:  MOVWF  FF8
01478:  CALL   0AA6
....................     }else if(state_of_pin == 0){
0147C:  BRA    14A4
0147E:  MOVF   x89,F
01480:  BNZ   1494
....................         fprintf(EXT, "LOW\n");
01482:  MOVLW  DE
01484:  MOVWF  FF6
01486:  MOVLW  06
01488:  MOVWF  FF7
0148A:  MOVLW  00
0148C:  MOVWF  FF8
0148E:  CALL   0AA6
....................     }else {
01492:  BRA    14A4
....................         fprintf(EXT, "Invalid\n"); 
01494:  MOVLW  E4
01496:  MOVWF  FF6
01498:  MOVLW  06
0149A:  MOVWF  FF7
0149C:  MOVLW  00
0149E:  MOVWF  FF8
014A0:  CALL   0AA6
....................     }
....................     fprintf(EXT, "    press g: Toggle all Pins");
014A4:  MOVLW  EE
014A6:  MOVWF  FF6
014A8:  MOVLW  06
014AA:  MOVWF  FF7
014AC:  MOVLW  00
014AE:  MOVWF  FF8
014B0:  CALL   0AA6
....................     
.................... 
....................     io_option = fgetc(EXT);
014B4:  RCALL  1004
014B6:  MOVFF  01,88
.................... 
....................     switch (io_option) {
014BA:  MOVF   x88,W
014BC:  XORLW  61
014BE:  BZ    14DE
014C0:  XORLW  03
014C2:  BZ    14E4
014C4:  XORLW  01
014C6:  BZ    14EA
014C8:  XORLW  07
014CA:  BZ    14F0
014CC:  XORLW  01
014CE:  BZ    14F6
014D0:  XORLW  03
014D2:  BZ    14FC
014D4:  XORLW  01
014D6:  BZ    1502
014D8:  XORLW  1F
014DA:  BZ    151C
014DC:  BRA    151E
....................         case 'a':
....................             output_toggle(EN_SUP_3V3_1);
014DE:  BCF    F93.0
014E0:  BTG    F8A.0
....................             break;
014E2:  BRA    152E
....................         case 'b':
....................             output_toggle(EN_SUP_3V3_2);
014E4:  BCF    F98.1
014E6:  BTG    F8F.1
....................             break;
014E8:  BRA    152E
....................         case 'c':
....................             output_toggle(EN_SUP_3V3_DAQ);
014EA:  BCF    F95.0
014EC:  BTG    F8C.0
....................             break;
014EE:  BRA    152E
....................         case 'd':
....................             output_toggle(EN_SUP_UNREG);
014F0:  BCF    F93.1
014F2:  BTG    F8A.1
....................             break;
014F4:  BRA    152E
....................         case 'e':
....................             output_toggle(EN_SUP_5V0);
014F6:  BCF    F95.1
014F8:  BTG    F8C.1
....................             break;
014FA:  BRA    152E
....................         case 'f':
....................             output_toggle(KILL_SWITCH);
014FC:  BCF    F92.4
014FE:  BTG    F89.4
....................             break;
01500:  BRA    152E
....................         case 'g':
....................             output_toggle(KILL_SWITCH);
01502:  BCF    F92.4
01504:  BTG    F89.4
....................             output_toggle(EN_SUP_5V0);
01506:  BCF    F95.1
01508:  BTG    F8C.1
....................             output_toggle(EN_SUP_UNREG);
0150A:  BCF    F93.1
0150C:  BTG    F8A.1
....................             output_toggle(EN_SUP_3V3_DAQ);
0150E:  BCF    F95.0
01510:  BTG    F8C.0
....................             output_toggle(EN_SUP_3V3_2);
01512:  BCF    F98.1
01514:  BTG    F8F.1
....................             output_toggle(EN_SUP_3V3_1);
01516:  BCF    F93.0
01518:  BTG    F8A.0
....................             break;
0151A:  BRA    152E
....................         case 'x':
....................             return;
0151C:  BRA    152E
....................         default:
....................             fprintf(EXT, "Invalid IO option. Please try again.\n");
0151E:  MOVLW  0C
01520:  MOVWF  FF6
01522:  MOVLW  07
01524:  MOVWF  FF7
01526:  MOVLW  00
01528:  MOVWF  FF8
0152A:  CALL   0AA6
....................             break;
....................     }
0152E:  GOTO   167A (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void main_menu(void) {
....................     char option;
.................... //    char flash_option;           // Variable to capture flash memory option
.................... //    char main_flash_option;      // Variable to capture MAIN flash memory option
.................... //    char com_flash_option;       // Variable to capture COM flash memory option
.................... //    char adcs_flash_option;      // Variable to capture ADCS flash memory option
.................... 
.................... //    unsigned int32 address;
.................... //    unsigned char data[32]; // Maximum data length
.................... //    unsigned char data_length;
.................... 
....................     while (1) {
....................         // Display Main Menu
....................         fprintf(EXT, "\n-----------------Main Menu-----------------\n");
01532:  MOVLW  32
01534:  MOVWF  FF6
01536:  MOVLW  07
01538:  MOVWF  FF7
0153A:  MOVLW  00
0153C:  MOVWF  FF8
0153E:  CALL   0AA6
....................         fprintf(EXT, "    press a: Get House keeping data\n");
01542:  MOVLW  60
01544:  MOVWF  FF6
01546:  MOVLW  07
01548:  MOVWF  FF7
0154A:  MOVLW  00
0154C:  MOVWF  FF8
0154E:  CALL   0AA6
....................         fprintf(EXT, "    press b: EPS Power output control\n");
01552:  MOVLW  86
01554:  MOVWF  FF6
01556:  MOVLW  07
01558:  MOVWF  FF7
0155A:  MOVLW  00
0155C:  MOVWF  FF8
0155E:  CALL   0AA6
....................         fprintf(EXT, "    press c: House keeping data collection\n");
01562:  MOVLW  AE
01564:  MOVWF  FF6
01566:  MOVLW  07
01568:  MOVWF  FF7
0156A:  MOVLW  00
0156C:  MOVWF  FF8
0156E:  CALL   0AA6
....................         fprintf(EXT, "    press d: Check Flash Memories\n");
01572:  MOVLW  DA
01574:  MOVWF  FF6
01576:  MOVLW  07
01578:  MOVWF  FF7
0157A:  MOVLW  00
0157C:  MOVWF  FF8
0157E:  CALL   0AA6
....................         fprintf(EXT, "    press e: See satellite Log\n");
01582:  MOVLW  FE
01584:  MOVWF  FF6
01586:  MOVLW  07
01588:  MOVWF  FF7
0158A:  MOVLW  00
0158C:  MOVWF  FF8
0158E:  CALL   0AA6
....................         fprintf(EXT, "    press f: Set time of RTC\n");
01592:  MOVLW  1E
01594:  MOVWF  FF6
01596:  MOVLW  08
01598:  MOVWF  FF7
0159A:  MOVLW  00
0159C:  MOVWF  FF8
0159E:  CALL   0AA6
....................         fprintf(EXT, "    press g: Satellite log downlink command\n");
015A2:  MOVLW  3C
015A4:  MOVWF  FF6
015A6:  MOVLW  08
015A8:  MOVWF  FF7
015AA:  MOVLW  00
015AC:  MOVWF  FF8
015AE:  CALL   0AA6
....................         fprintf(EXT, "    press h: IHC Mission start\n");
015B2:  MOVLW  6A
015B4:  MOVWF  FF6
015B6:  MOVLW  08
015B8:  MOVWF  FF7
015BA:  MOVLW  00
015BC:  MOVWF  FF8
015BE:  CALL   0AA6
....................         fprintf(EXT, "    press i: SEL current Measurement\n");
015C2:  MOVLW  8A
015C4:  MOVWF  FF6
015C6:  MOVLW  08
015C8:  MOVWF  FF7
015CA:  MOVLW  00
015CC:  MOVWF  FF8
015CE:  CALL   0AA6
....................         fprintf(EXT, "    press j: H8 COM Reset\n");
015D2:  MOVLW  B0
015D4:  MOVWF  FF6
015D6:  MOVLW  08
015D8:  MOVWF  FF7
015DA:  MOVLW  00
015DC:  MOVWF  FF8
015DE:  CALL   0AA6
....................         fprintf(EXT, "    press k: IO control\n");
015E2:  MOVLW  CC
015E4:  MOVWF  FF6
015E6:  MOVLW  08
015E8:  MOVWF  FF7
015EA:  MOVLW  00
015EC:  MOVWF  FF8
015EE:  CALL   0AA6
....................         fprintf(EXT, "    press x: Exit Main Menu\n");
015F2:  MOVLW  E6
015F4:  MOVWF  FF6
015F6:  MOVLW  08
015F8:  MOVWF  FF7
015FA:  MOVLW  00
015FC:  MOVWF  FF8
015FE:  CALL   0AA6
....................         fprintf(EXT, "    DO NOT USE CAPITAL CHARACTERS TO WRITE!\n\n");
01602:  MOVLW  04
01604:  MOVWF  FF6
01606:  MOVLW  09
01608:  MOVWF  FF7
0160A:  MOVLW  00
0160C:  MOVWF  FF8
0160E:  CALL   0AA6
.................... 
....................         // Read the user's choice
....................         option = fgetc(EXT);
01612:  RCALL  1004
01614:  MOVFF  01,87
.................... 
....................         // Main menu switch
....................         switch (option) {
01618:  MOVF   x87,W
0161A:  XORLW  61
0161C:  BZ    164C
0161E:  XORLW  03
01620:  BZ    164E
01622:  XORLW  01
01624:  BZ    1650
01626:  XORLW  07
01628:  BZ    1652
0162A:  XORLW  01
0162C:  BZ    1656
0162E:  XORLW  03
01630:  BZ    1658
01632:  XORLW  01
01634:  BZ    165C
01636:  XORLW  0F
01638:  BZ    165E
0163A:  XORLW  01
0163C:  BZ    1660
0163E:  XORLW  03
01640:  BZ    1662
01642:  XORLW  01
01644:  BZ    1664
01646:  XORLW  13
01648:  BZ    1668
0164A:  BRA    166A
....................             case 'a':
....................                 // Call a function to get housekeeping data
....................                 // get_housekeeping_data();
....................                 break;
0164C:  BRA    167A
....................             case 'b':
....................                 // Call a function to control EPS power output
....................                 // control_eps_power();
....................                 break;
0164E:  BRA    167A
....................             case 'c':
....................                 // Call a function to collect housekeeping data
....................                 // collect_housekeeping_data();
....................                 break;
01650:  BRA    167A
....................             case 'd':
....................                 handle_flash_memories();
01652:  BRA    104A
....................                 break;
01654:  BRA    167A
....................             case 'e':
....................                 // Call a function to see satellite log
....................                 // see_satellite_log();
....................                 break;
01656:  BRA    167A
....................             case 'f':
....................                 handle_set_time();
01658:  BRA    10FE
....................                 break;
0165A:  BRA    167A
....................             case 'g':
....................                 // Call a function for satellite log downlink command
....................                 // satellite_log_downlink_command();
....................                 break;
0165C:  BRA    167A
....................             case 'h':
....................                 // Call a function for IHC mission start
....................                 // ihc_mission_start();
....................                 break;
0165E:  BRA    167A
....................             case 'i':
....................                 // Call a function for SEL current measurement
....................                 // sel_current_measurement();
....................                 break;
01660:  BRA    167A
....................             case 'j':
....................                 // Call a function for H8 COM reset
....................                 // h8_com_reset();
....................                 break;
01662:  BRA    167A
....................             case 'k':
....................                 handle_io_control();
01664:  BRA    12A8
....................                 break;
01666:  BRA    167A
....................             case 'x':
....................                 return;
01668:  BRA    167C
....................             default:
....................                 fprintf(EXT, "Invalid option. Please try again.\n");
0166A:  MOVLW  32
0166C:  MOVWF  FF6
0166E:  MOVLW  09
01670:  MOVWF  FF7
01672:  MOVLW  00
01674:  MOVWF  FF8
01676:  CALL   0AA6
....................                 break;
....................         }
0167A:  BRA    1532
....................     }
0167C:  GOTO   18B4 (RETURN)
.................... }
.................... 
.................... 
.................... // Implement the helper functions as required, e.g., READ_DATA_FROM_ADDRESS, WRITE_DATA_NBYTES, etc.
.................... 
.................... 
.................... 
.................... #ifdef	__cplusplus
.................... }
.................... #endif
.................... 
.................... #endif	/* SPI_H */
.................... 
.................... 
.................... 
.................... 
.................... /*
....................  * 
....................  */
.................... 
.................... 
.................... #fuses NOWDT, STVREN, NOXINST, FRC, SOSC, PR, NOCLOCKOUT, HS
.................... #use delay(clock=16MHz, crystal)
.................... #use delay(crystal=16MHz)
*
00AE0:  CLRF   FEA
00AE2:  MOVLW  88
00AE4:  MOVWF  FE9
00AE6:  MOVF   FEF,W
00AE8:  BZ    0B06
00AEA:  MOVLW  05
00AEC:  MOVWF  01
00AEE:  CLRF   00
00AF0:  DECFSZ 00,F
00AF2:  BRA    0AF0
00AF4:  DECFSZ 01,F
00AF6:  BRA    0AEE
00AF8:  MOVLW  2E
00AFA:  MOVWF  00
00AFC:  DECFSZ 00,F
00AFE:  BRA    0AFC
00B00:  BRA    0B02
00B02:  DECFSZ FEF,F
00B04:  BRA    0AEA
00B06:  RETURN 0
.................... //int8 setup_oscillator(OSC_PRIMARY|OSC_SOSC_ENABLED);
.................... char bichig[21] = "test data update with";
.................... char read_data[80];
.................... 
.................... void main() {
*
01680:  CLRF   FF8
01682:  BCF    FD0.7
01684:  CLRF   F9B
01686:  CLRF   F64
01688:  CLRF   F65
0168A:  CLRF   F66
0168C:  MOVLW  02
0168E:  MOVWF  FD3
01690:  BCF    F96.5
01692:  BSF    F8D.5
01694:  BCF    F94.6
01696:  BSF    F8B.6
01698:  BCF    F95.2
0169A:  BSF    F8C.2
0169C:  BCF    F97.7
0169E:  BSF    F8E.7
016A0:  BSF    F96.0
016A2:  BCF    F96.6
016A4:  BCF    F96.1
016A6:  BCF    F8D.1
016A8:  BSF    F93.5
016AA:  BCF    F93.4
016AC:  BCF    F93.2
016AE:  BCF    F8A.2
016B0:  BSF    F92.0
016B2:  BCF    F92.1
016B4:  BCF    F92.3
016B6:  BCF    F89.3
016B8:  CLRF   05
016BA:  CLRF   04
016BC:  BRA    16F0
016BE:  DATA 15,00
016C0:  DATA 06,74
016C2:  DATA 65,73
016C4:  DATA 74,20
016C6:  DATA 64,61
016C8:  DATA 74,61
016CA:  DATA 20,75
016CC:  DATA 70,64
016CE:  DATA 61,74
016D0:  DATA 65,20
016D2:  DATA 77,69
016D4:  DATA 74,68
016D6:  DATA 03,0E
016D8:  DATA 45,00
016DA:  DATA 00,00
016DC:  DATA 08,4E
016DE:  DATA CE,00
016E0:  DATA 02,0E
016E2:  DATA D9,00
016E4:  DATA 00,02
016E6:  DATA 0F,37
016E8:  DATA 00,00
016EA:  DATA 01,0F
016EC:  DATA 53,00
016EE:  DATA 00,00
016F0:  MOVLW  00
016F2:  MOVWF  FF8
016F4:  MOVLW  16
016F6:  MOVWF  FF7
016F8:  MOVLW  BE
016FA:  MOVWF  FF6
016FC:  TBLRD*+
016FE:  MOVF   FF5,W
01700:  MOVWF  00
01702:  XORLW  00
01704:  BZ    172C
01706:  TBLRD*+
01708:  MOVF   FF5,W
0170A:  MOVWF  01
0170C:  BTFSC  FE8.7
0170E:  BRA    171A
01710:  ANDLW  3F
01712:  MOVWF  FEA
01714:  TBLRD*+
01716:  MOVFF  FF5,FE9
0171A:  BTFSC  01.6
0171C:  TBLRD*+
0171E:  BTFSS  01.6
01720:  TBLRD*+
01722:  MOVFF  FF5,FEE
01726:  DCFSNZ 00,F
01728:  BRA    16FC
0172A:  BRA    171E
0172C:  CLRF   FF8
....................     fprintf(EPS, "start_writing\n");
0172E:  MOVLW  56
01730:  MOVWF  FF6
01732:  MOVLW  09
01734:  MOVWF  FF7
01736:  MOVLW  00
01738:  MOVWF  FF8
0173A:  GOTO   0A3A
....................     fprintf(EXT, "POWER ON!\n");
0173E:  MOVLW  66
01740:  MOVWF  FF6
01742:  MOVLW  09
01744:  MOVWF  FF7
01746:  MOVLW  00
01748:  MOVWF  FF8
0174A:  CALL   0AA6
....................     //--------------------------RTC-------------------------
....................     setup_lcd(LCD_DISABLED);
0174E:  MOVLB  E
01750:  CLRF   xD6
01752:  CLRF   xD7
01754:  CLRF   xDA
01756:  CLRF   xD8
01758:  CLRF   xD9
0175A:  MOVLB  F
....................     rtc_time_t write_clock, read_clock;
....................     setup_rtc(RTC_ENABLE | RTC_CLOCK_SOSC | RTC_CLOCK_INT, 0);
0175C:  MOVLB  F
0175E:  MOVLW  55
01760:  MOVWF  F7E
01762:  MOVLW  AA
01764:  MOVWF  F7E
01766:  BSF    x5F.5
01768:  CLRF   x5E
0176A:  MOVLW  04
0176C:  MOVWF  x57
0176E:  MOVLW  80
01770:  MOVWF  x5F
01772:  BCF    x5F.5
....................     RTC_CLOCK_INT;
....................     rtc_read(&read_clock);
01774:  BSF    x5F.0
01776:  BSF    x5F.1
01778:  CLRF   FEA
0177A:  MOVLW  74
0177C:  MOVWF  FE9
0177E:  MOVLW  04
01780:  MOVWF  01
01782:  MOVF   x5C,W
01784:  MOVLB  0
01786:  CALL   0ACE
0178A:  MOVWF  FEE
0178C:  MOVLB  F
0178E:  MOVF   x5D,W
01790:  MOVLB  0
01792:  CALL   0ACE
01796:  MOVWF  FEE
01798:  DECFSZ 01,F
0179A:  BRA    179E
0179C:  BRA    17A2
0179E:  MOVLB  F
017A0:  BRA    1782
.................... 
....................     //------------------------Start_Indicator-----------------------
....................     delay_ms(1000);
017A2:  MOVLW  04
017A4:  MOVWF  x87
017A6:  MOVLW  FA
017A8:  MOVWF  x88
017AA:  CALL   0AE0
017AE:  DECFSZ x87,F
017B0:  BRA    17A6
....................     fprintf(EXT, "POWER ON!\n");
017B2:  MOVLW  72
017B4:  MOVWF  FF6
017B6:  MOVLW  09
017B8:  MOVWF  FF7
017BA:  MOVLW  00
017BC:  MOVWF  FF8
017BE:  CALL   0AA6
....................     //------------------------restart_indicator-----------------------
.................... //     #define SHUTDOWN_COUNT_ADDRESS  0x00000500
....................       update_shutdown_count();
017C2:  GOTO   0EEA
.................... //       #define SHUTDOWN_COUNT_ADDRESS  0x00000500  // Address where shutdown count is stored
.................... //         fprintf(EXT, "Shutdown count started\n");
.................... //        unsigned int8 shutdown_count[1];  
.................... //        READ_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
.................... //        delay_ms(10);
.................... //    
.................... //        // Check if the shutdown count is uninitialized
.................... //        if (shutdown_count[0] == 0xFF) {
.................... //            shutdown_count[0] = 0;  // Initialize to 0 if uninitialized
.................... //             fprintf(EXT, "Shutdown count uninitialized, setting to 0\n");
.................... //        }
.................... //    
.................... //        shutdown_count[0] += 1;  // Increment the shutdown count
.................... //        WRITE_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
.................... //        delay_ms(10);
....................     
....................         // Print the updated shutdown count
.................... //         fprintf(EXT, "Shutdown count: %u\n", shutdown_count[0]);
....................         fprintf(EXT, "Reading chip ID\n");
017C6:  MOVLW  7E
017C8:  MOVWF  FF6
017CA:  MOVLW  09
017CC:  MOVWF  FF7
017CE:  MOVLW  00
017D0:  MOVWF  FF8
017D2:  CALL   0AA6
....................     unsigned char chip_id[8];
....................     READ_CHIP_ID_OF();
017D6:  GOTO   0FD4
....................     for (int i = 0; i < 8; i++) {
017DA:  CLRF   x85
017DC:  MOVF   x85,W
017DE:  SUBLW  07
017E0:  BNC   17FC
....................         fprintf(EXT, "%c", chip_id[i]);
017E2:  CLRF   03
017E4:  MOVF   x85,W
017E6:  ADDLW  7D
017E8:  MOVWF  FE9
017EA:  MOVLW  00
017EC:  ADDWFC 03,W
017EE:  MOVWF  FEA
017F0:  MOVFF  FEF,9E
017F4:  CALL   0A64
017F8:  INCF   x85,F
017FA:  BRA    17DC
....................     }
....................     fprintf(EXT, "\n");
017FC:  MOVLW  0A
017FE:  MOVWF  x9E
01800:  CALL   0A64
....................     delay_ms(1000);
01804:  MOVLW  04
01806:  MOVWF  x87
01808:  MOVLW  FA
0180A:  MOVWF  x88
0180C:  CALL   0AE0
01810:  DECFSZ x87,F
01812:  BRA    1808
....................     fprintf(EXT, "Done reading chip ID\n");
01814:  MOVLW  90
01816:  MOVWF  FF6
01818:  MOVLW  09
0181A:  MOVWF  FF7
0181C:  MOVLW  00
0181E:  MOVWF  FF8
01820:  CALL   0AA6
....................     //  fprintf(EXT, "Starting to write data\n");
....................     //WRITE_DATA_NBYTES(0x00000160,bichig,29);
....................     //   WRITE_DATA_NBYTES(0x00000250,bichig,40);
....................     WRITE_DATA_NBYTES(0x00000300, bichig, 20);
01824:  CLRF   x8C
01826:  CLRF   x8B
01828:  MOVLW  03
0182A:  MOVWF  x8A
0182C:  CLRF   x89
0182E:  CLRF   x8E
01830:  MOVLW  06
01832:  MOVWF  x8D
01834:  MOVLW  14
01836:  MOVWF  x8F
01838:  CALL   0DDA
....................     fprintf(EXT, "Byte saved\n");
0183C:  MOVLW  A6
0183E:  MOVWF  FF6
01840:  MOVLW  09
01842:  MOVWF  FF7
01844:  MOVLW  00
01846:  MOVWF  FF8
01848:  CALL   0AA6
....................     fprintf(EXT, "Reading desired address\n");
0184C:  MOVLW  B2
0184E:  MOVWF  FF6
01850:  MOVLW  09
01852:  MOVWF  FF7
01854:  MOVLW  00
01856:  MOVWF  FF8
01858:  CALL   0AA6
....................     fprintf(EXT, "Reading... \n");
0185C:  MOVLW  CC
0185E:  MOVWF  FF6
01860:  MOVLW  09
01862:  MOVWF  FF7
01864:  MOVLW  00
01866:  MOVWF  FF8
01868:  CALL   0AA6
....................     READ_DATA_NBYTES(0x00000300, read_data, 20);
0186C:  CLRF   x8C
0186E:  CLRF   x8B
01870:  MOVLW  03
01872:  MOVWF  x8A
01874:  CLRF   x89
01876:  CLRF   x8E
01878:  MOVLW  1B
0187A:  MOVWF  x8D
0187C:  MOVLW  14
0187E:  MOVWF  x8F
01880:  CALL   0B8E
....................     for (int i = 0; i < 16; i++) {
01884:  CLRF   x86
01886:  MOVF   x86,W
01888:  SUBLW  0F
0188A:  BNC   18A6
....................         fprintf(EXT, "%c", read_data[i]);
0188C:  CLRF   03
0188E:  MOVF   x86,W
01890:  ADDLW  1B
01892:  MOVWF  FE9
01894:  MOVLW  00
01896:  ADDWFC 03,W
01898:  MOVWF  FEA
0189A:  MOVFF  FEF,9E
0189E:  CALL   0A64
018A2:  INCF   x86,F
018A4:  BRA    1886
....................     }
....................     fprintf(EXT, "\n");
018A6:  MOVLW  0A
018A8:  MOVWF  x9E
018AA:  CALL   0A64
....................     while (1) {
....................         if (kbhit(EXT)) {
018AE:  BTFSC  F82.7
018B0:  BRA    18C4
....................             main_menu();
018B2:  BRA    1532
....................             fprintf(EXT, "exiting main menu function");
018B4:  MOVLW  DA
018B6:  MOVWF  FF6
018B8:  MOVLW  09
018BA:  MOVWF  FF7
018BC:  MOVLW  00
018BE:  MOVWF  FF8
018C0:  CALL   0AA6
....................         }
018C4:  BRA    18AE
....................     }
.................... }
.................... 
018C6:  BRA    18C6
.................... 

Configuration Fuses:
   Word  1: F700   NOSTVREN NOXINST DEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS DSWDT_ DSWDT DSWDTOSC_INT

   Some fuses have been forced to be compatible with the ICD debugger.
