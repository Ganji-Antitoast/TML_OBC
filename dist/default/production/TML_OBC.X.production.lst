CCS PCH C Compiler, Version 5.112, 5967               11-Nov-24 23:58

               Filename:   C:\Users\Ganji\Documents\------TEMUULEL------\CODE\TML_OBC.X\dist\default\production\TML_OBC.X.production.lst

               ROM used:   12610 bytes (10%)
                           Largest free fragment is 65520
               RAM used:   130 (4%) at main() level
                           459 (13%) worst case
               Stack used: 3 locations
               Stack size: 30

*
00000:  NOP   
00002:  GOTO   2DEE
.................... #import(file="build/default/production/main.o")
.................... /* 
.................... /* 
....................  * File:   main.c
....................  * Author: Ganji
....................  *  ____    _    _   _     _ ___ 
....................    / ___|  / \  | \ | |   | |_ _|
....................   | |  _  / _ \ |  \| |_  | || | 
....................   | |_| |/ ___ \| |\  | |_| || | 
....................    \____/_/   \_\_| \_|\___/|___| 
....................  *
....................  * Created on September 12, 2024, 7:31 AM
....................  */
.................... 
.................... #include <main.h>
.................... /* 
....................  * File:   main.h
....................  * Author: Ganji
....................  *
....................  * Created on October 22, 2024, 3:31 PM
....................  */
.................... 
.................... #ifndef MAIN_H
.................... #define	MAIN_H
.................... 
.................... #ifdef	__cplusplus
.................... extern "C" {
.................... #endif
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
00006:  DATA 57,52
00008:  DATA 49,54
0000A:  DATA 45,20
0000C:  DATA 41,44
0000E:  DATA 44,52
00010:  DATA 45,53
00012:  DATA 53,3A
00014:  DATA 20,30
00016:  DATA 78,25
00018:  DATA 30,38
0001A:  DATA 6C,78
0001C:  DATA 0A,00
0001E:  DATA 0A,25
00020:  DATA 64,20
00022:  DATA 42,59
00024:  DATA 54,45
00026:  DATA 53,20
00028:  DATA 57,52
0002A:  DATA 49,54
0002C:  DATA 54,45
0002E:  DATA 4E,20
00030:  DATA 49,4E
00032:  DATA 20,4D
00034:  DATA 41,49
00036:  DATA 4E,21
00038:  DATA 0A,00
0003A:  DATA 57,52
0003C:  DATA 49,54
0003E:  DATA 45,20
00040:  DATA 41,44
00042:  DATA 44,52
00044:  DATA 45,53
00046:  DATA 53,20
00048:  DATA 49,4E
0004A:  DATA 20,43
0004C:  DATA 4F,4D
0004E:  DATA 3A,20
00050:  DATA 30,78
00052:  DATA 25,30
00054:  DATA 38,6C
00056:  DATA 78,0A
00058:  DATA 00,00
0005A:  DATA 0A,25
0005C:  DATA 64,20
0005E:  DATA 42,59
00060:  DATA 54,45
00062:  DATA 53,20
00064:  DATA 57,52
00066:  DATA 49,54
00068:  DATA 54,45
0006A:  DATA 4E,20
0006C:  DATA 49,4E
0006E:  DATA 20,43
00070:  DATA 4F,4D
00072:  DATA 21,0A
00074:  DATA 00,00
00076:  DATA 57,52
00078:  DATA 49,54
0007A:  DATA 45,20
0007C:  DATA 41,44
0007E:  DATA 44,52
00080:  DATA 45,53
00082:  DATA 53,20
00084:  DATA 49,4E
00086:  DATA 20,41
00088:  DATA 44,43
0008A:  DATA 53,3A
0008C:  DATA 20,30
0008E:  DATA 78,25
00090:  DATA 30,38
00092:  DATA 6C,78
00094:  DATA 0A,00
00096:  DATA 0A,25
00098:  DATA 64,20
0009A:  DATA 42,59
0009C:  DATA 54,45
0009E:  DATA 53,20
000A0:  DATA 57,52
000A2:  DATA 49,54
000A4:  DATA 54,45
000A6:  DATA 4E,20
000A8:  DATA 49,4E
000AA:  DATA 20,41
000AC:  DATA 44,43
000AE:  DATA 53,21
000B0:  DATA 0A,00
000B2:  DATA 50,4F
000B4:  DATA 57,45
000B6:  DATA 52,20
000B8:  DATA 4F,4E
000BA:  DATA 21,0A
000BC:  DATA 00,00
000BE:  DATA 44,69
000C0:  DATA 67,69
000C2:  DATA 74,61
000C4:  DATA 6C,20
000C6:  DATA 70,69
000C8:  DATA 6E,20
000CA:  DATA 6F,75
000CC:  DATA 74,20
000CE:  DATA 63,6F
000D0:  DATA 6E,66
000D2:  DATA 69,67
000D4:  DATA 75,72
000D6:  DATA 65,64
000D8:  DATA 20,0A
000DA:  DATA 00,00
000DC:  DATA 52,54
000DE:  DATA 43,43
000E0:  DATA 20,73
000E2:  DATA 65,74
000E4:  DATA 75,70
000E6:  DATA 20,66
000E8:  DATA 69,6E
000EA:  DATA 69,73
000EC:  DATA 68,65
000EE:  DATA 64,21
000F0:  DATA 0A,00
000F2:  DATA 53,68
000F4:  DATA 75,74
000F6:  DATA 64,6F
000F8:  DATA 77,6E
000FA:  DATA 20,63
000FC:  DATA 6F,75
000FE:  DATA 6E,74
00100:  DATA 20,73
00102:  DATA 74,61
00104:  DATA 72,74
00106:  DATA 65,64
00108:  DATA 0A,00
0010A:  DATA 52,65
0010C:  DATA 61,64
0010E:  DATA 20,73
00110:  DATA 68,75
00112:  DATA 74,64
00114:  DATA 6F,77
00116:  DATA 6E,20
00118:  DATA 63,6F
0011A:  DATA 75,6E
0011C:  DATA 74,3A
0011E:  DATA 20,25
00120:  DATA 75,0A
00122:  DATA 00,00
00124:  DATA 49,6E
00126:  DATA 63,72
00128:  DATA 65,6D
0012A:  DATA 65,6E
0012C:  DATA 74,65
0012E:  DATA 64,20
00130:  DATA 73,68
00132:  DATA 75,74
00134:  DATA 64,6F
00136:  DATA 77,6E
00138:  DATA 20,63
0013A:  DATA 6F,75
0013C:  DATA 6E,74
0013E:  DATA 3A,20
00140:  DATA 25,75
00142:  DATA 0A,00
00144:  DATA 4E,6F
00146:  DATA 77,20
00148:  DATA 73,68
0014A:  DATA 75,74
0014C:  DATA 64,6F
0014E:  DATA 77,6E
00150:  DATA 20,63
00152:  DATA 6F,75
00154:  DATA 6E,74
00156:  DATA 20,69
00158:  DATA 73,20
0015A:  DATA 3A,20
0015C:  DATA 25,75
0015E:  DATA 0A,0A
00160:  DATA 00,00
00162:  DATA 0A,45
00164:  DATA 6E,74
00166:  DATA 65,72
00168:  DATA 20,41
0016A:  DATA 64,64
0016C:  DATA 72,65
0016E:  DATA 73,73
00170:  DATA 20,28
00172:  DATA 68,65
00174:  DATA 78,2C
00176:  DATA 20,30
00178:  DATA 78,31
0017A:  DATA 32,33
0017C:  DATA 34,29
0017E:  DATA 3A,20
00180:  DATA 30,78
00182:  DATA 00,00
00184:  DATA 0A,45
00186:  DATA 6E,74
00188:  DATA 65,72
0018A:  DATA 20,6E
0018C:  DATA 75,6D
0018E:  DATA 62,65
00190:  DATA 72,20
00192:  DATA 6F,66
00194:  DATA 20,62
00196:  DATA 79,74
00198:  DATA 65,73
0019A:  DATA 20,74
0019C:  DATA 6F,20
0019E:  DATA 77,72
001A0:  DATA 69,74
001A2:  DATA 65,20
001A4:  DATA 28,6D
001A6:  DATA 61,78
001A8:  DATA 20,32
001AA:  DATA 35,36
001AC:  DATA 29,3A
001AE:  DATA 20,00
001B0:  DATA 45,72
001B2:  DATA 72,6F
001B4:  DATA 72,3A
001B6:  DATA 20,4D
001B8:  DATA 61,78
001BA:  DATA 69,6D
001BC:  DATA 75,6D
001BE:  DATA 20,64
001C0:  DATA 61,74
001C2:  DATA 61,20
001C4:  DATA 6C,65
001C6:  DATA 6E,67
001C8:  DATA 74,68
001CA:  DATA 20,69
001CC:  DATA 73,20
001CE:  DATA 32,35
001D0:  DATA 36,20
001D2:  DATA 62,79
001D4:  DATA 74,65
001D6:  DATA 73,2E
001D8:  DATA 0A,00
001DA:  DATA 45,6E
001DC:  DATA 74,65
001DE:  DATA 72,20
001E0:  DATA 25,64
001E2:  DATA 20,62
001E4:  DATA 79,74
001E6:  DATA 65,73
001E8:  DATA 20,6F
001EA:  DATA 66,20
001EC:  DATA 64,61
001EE:  DATA 74,61
001F0:  DATA 20,28
001F2:  DATA 69,6E
001F4:  DATA 20,68
001F6:  DATA 65,78
001F8:  DATA 29,3A
001FA:  DATA 0A,00
001FC:  DATA 42,79
001FE:  DATA 74,65
00200:  DATA 20,25
00202:  DATA 64,3A
00204:  DATA 20,30
00206:  DATA 78,00
00208:  DATA 0A,44
0020A:  DATA 61,74
0020C:  DATA 61,20
0020E:  DATA 73,75
00210:  DATA 63,63
00212:  DATA 65,73
00214:  DATA 73,66
00216:  DATA 75,6C
00218:  DATA 6C,79
0021A:  DATA 20,77
0021C:  DATA 72,69
0021E:  DATA 74,74
00220:  DATA 65,6E
00222:  DATA 2E,0A
00224:  DATA 00,00
00226:  DATA 4D,41
00228:  DATA 49,4E
0022A:  DATA 20,66
0022C:  DATA 6C,61
0022E:  DATA 73,68
00230:  DATA 20,6D
00232:  DATA 65,6D
00234:  DATA 6F,72
00236:  DATA 79,20
00238:  DATA 63,68
0023A:  DATA 6F,73
0023C:  DATA 65,6E
0023E:  DATA 0A,00
00240:  DATA 70,72
00242:  DATA 65,73
00244:  DATA 73,20
00246:  DATA 61,3A
00248:  DATA 20,52
0024A:  DATA 65,61
0024C:  DATA 64,20
0024E:  DATA 49,44
00250:  DATA 20,6F
00252:  DATA 66,20
00254:  DATA 74,68
00256:  DATA 65,20
00258:  DATA 63,68
0025A:  DATA 69,70
0025C:  DATA 0A,00
0025E:  DATA 70,72
00260:  DATA 65,73
00262:  DATA 73,20
00264:  DATA 62,3A
00266:  DATA 20,57
00268:  DATA 72,69
0026A:  DATA 74,65
0026C:  DATA 20,64
0026E:  DATA 61,74
00270:  DATA 61,20
00272:  DATA 73,65
00274:  DATA 74,20
00276:  DATA 69,6E
00278:  DATA 20,73
0027A:  DATA 70,65
0027C:  DATA 63,69
0027E:  DATA 66,69
00280:  DATA 65,64
00282:  DATA 20,61
00284:  DATA 64,64
00286:  DATA 72,65
00288:  DATA 73,73
0028A:  DATA 0A,00
0028C:  DATA 70,72
0028E:  DATA 65,73
00290:  DATA 73,20
00292:  DATA 63,3A
00294:  DATA 20,52
00296:  DATA 65,61
00298:  DATA 64,20
0029A:  DATA 64,61
0029C:  DATA 74,61
0029E:  DATA 20,73
002A0:  DATA 65,74
002A2:  DATA 20,69
002A4:  DATA 6E,20
002A6:  DATA 73,70
002A8:  DATA 65,63
002AA:  DATA 69,66
002AC:  DATA 69,65
002AE:  DATA 64,20
002B0:  DATA 61,64
002B2:  DATA 64,72
002B4:  DATA 65,73
002B6:  DATA 73,0A
002B8:  DATA 00,00
002BA:  DATA 70,72
002BC:  DATA 65,73
002BE:  DATA 73,20
002C0:  DATA 78,3A
002C2:  DATA 20,52
002C4:  DATA 65,74
002C6:  DATA 75,72
002C8:  DATA 6E,20
002CA:  DATA 74,6F
002CC:  DATA 20,4D
002CE:  DATA 41,49
002D0:  DATA 4E,20
002D2:  DATA 4D,45
002D4:  DATA 4E,55
002D6:  DATA 0A,00
002D8:  DATA 53,74
002DA:  DATA 61,72
002DC:  DATA 74,65
002DE:  DATA 64,20
002E0:  DATA 72,65
002E2:  DATA 61,64
002E4:  DATA 69,6E
002E6:  DATA 67,20
002E8:  DATA 63,68
002EA:  DATA 69,70
002EC:  DATA 20,49
002EE:  DATA 44,20
002F0:  DATA 6F,66
002F2:  DATA 20,4D
002F4:  DATA 41,49
002F6:  DATA 4E,20
002F8:  DATA 66,6C
002FA:  DATA 61,73
002FC:  DATA 68,20
002FE:  DATA 6D,65
00300:  DATA 6D,6F
00302:  DATA 72,79
00304:  DATA 0A,00
00306:  DATA 52,65
00308:  DATA 61,64
0030A:  DATA 20,64
0030C:  DATA 61,74
0030E:  DATA 61,20
00310:  DATA 73,65
00312:  DATA 74,20
00314:  DATA 69,6E
00316:  DATA 20,73
00318:  DATA 70,65
0031A:  DATA 63,69
0031C:  DATA 66,69
0031E:  DATA 65,64
00320:  DATA 20,61
00322:  DATA 64,64
00324:  DATA 72,65
00326:  DATA 73,73
00328:  DATA 0A,00
0032A:  DATA 45,6E
0032C:  DATA 74,65
0032E:  DATA 72,20
00330:  DATA 79,6F
00332:  DATA 75,72
00334:  DATA 20,73
00336:  DATA 70,65
00338:  DATA 63,69
0033A:  DATA 66,69
0033C:  DATA 65,64
0033E:  DATA 20,61
00340:  DATA 64,64
00342:  DATA 72,65
00344:  DATA 73,73
00346:  DATA 20,61
00348:  DATA 6E,64
0034A:  DATA 20,6C
0034C:  DATA 65,6E
0034E:  DATA 67,74
00350:  DATA 68,20
00352:  DATA 28,65
00354:  DATA 2E,67
00356:  DATA 2E,2C
00358:  DATA 20,30
0035A:  DATA 78,31
0035C:  DATA 32,33
0035E:  DATA 34,20
00360:  DATA 31,30
00362:  DATA 29,3A
00364:  DATA 20,00
00366:  DATA 41,64
00368:  DATA 64,72
0036A:  DATA 65,73
0036C:  DATA 73,3A
0036E:  DATA 20,30
00370:  DATA 78,25
00372:  DATA 30,39
00374:  DATA 78,2C
00376:  DATA 20,4C
00378:  DATA 65,6E
0037A:  DATA 67,74
0037C:  DATA 68,3A
0037E:  DATA 20,25
00380:  DATA 64,0A
00382:  DATA 00,00
00384:  DATA 49,6E
00386:  DATA 76,61
00388:  DATA 6C,69
0038A:  DATA 64,20
0038C:  DATA 69,6E
0038E:  DATA 70,75
00390:  DATA 74,2E
00392:  DATA 20,50
00394:  DATA 6C,65
00396:  DATA 61,73
00398:  DATA 65,20
0039A:  DATA 65,6E
0039C:  DATA 74,65
0039E:  DATA 72,20
003A0:  DATA 61,20
003A2:  DATA 76,61
003A4:  DATA 6C,69
003A6:  DATA 64,20
003A8:  DATA 61,64
003AA:  DATA 64,72
003AC:  DATA 65,73
003AE:  DATA 73,20
003B0:  DATA 61,6E
003B2:  DATA 64,20
003B4:  DATA 6C,65
003B6:  DATA 6E,67
003B8:  DATA 74,68
003BA:  DATA 2E,0A
003BC:  DATA 00,00
003BE:  DATA 49,6E
003C0:  DATA 76,61
003C2:  DATA 6C,69
003C4:  DATA 64,20
003C6:  DATA 4D,41
003C8:  DATA 49,4E
003CA:  DATA 20,66
003CC:  DATA 6C,61
003CE:  DATA 73,68
003D0:  DATA 20,6D
003D2:  DATA 65,6D
003D4:  DATA 6F,72
003D6:  DATA 79,20
003D8:  DATA 6F,70
003DA:  DATA 74,69
003DC:  DATA 6F,6E
003DE:  DATA 2E,20
003E0:  DATA 50,6C
003E2:  DATA 65,61
003E4:  DATA 73,65
003E6:  DATA 20,74
003E8:  DATA 72,79
003EA:  DATA 20,61
003EC:  DATA 67,61
003EE:  DATA 69,6E
003F0:  DATA 2E,0A
003F2:  DATA 00,00
003F4:  DATA 70,72
003F6:  DATA 65,73
003F8:  DATA 73,65
003FA:  DATA 64,20
003FC:  DATA 6F,70
003FE:  DATA 74,69
00400:  DATA 6F,6E
00402:  DATA 20,64
00404:  DATA 3A,20
00406:  DATA 43,68
00408:  DATA 65,63
0040A:  DATA 6B,20
0040C:  DATA 46,6C
0040E:  DATA 61,73
00410:  DATA 68,20
00412:  DATA 4D,65
00414:  DATA 6D,6F
00416:  DATA 72,69
00418:  DATA 65,73
0041A:  DATA 0A,0A
0041C:  DATA 00,00
0041E:  DATA 50,6C
00420:  DATA 65,61
00422:  DATA 73,65
00424:  DATA 20,63
00426:  DATA 68,6F
00428:  DATA 6F,73
0042A:  DATA 65,20
0042C:  DATA 77,68
0042E:  DATA 69,63
00430:  DATA 68,20
00432:  DATA 66,6C
00434:  DATA 61,73
00436:  DATA 68,20
00438:  DATA 6D,65
0043A:  DATA 6D,6F
0043C:  DATA 72,79
0043E:  DATA 20,74
00440:  DATA 6F,20
00442:  DATA 77,6F
00444:  DATA 72,6B
00446:  DATA 20,6F
00448:  DATA 6E,20
0044A:  DATA 28,61
0044C:  DATA 2C,20
0044E:  DATA 62,2C
00450:  DATA 20,63
00452:  DATA 29,3A
00454:  DATA 0A,00
00456:  DATA 70,72
00458:  DATA 65,73
0045A:  DATA 73,20
0045C:  DATA 61,3A
0045E:  DATA 20,4D
00460:  DATA 41,49
00462:  DATA 4E,20
00464:  DATA 66,6C
00466:  DATA 61,73
00468:  DATA 68,20
0046A:  DATA 6D,65
0046C:  DATA 6D,6F
0046E:  DATA 72,79
00470:  DATA 0A,00
00472:  DATA 70,72
00474:  DATA 65,73
00476:  DATA 73,20
00478:  DATA 62,3A
0047A:  DATA 20,43
0047C:  DATA 4F,4D
0047E:  DATA 20,73
00480:  DATA 68,61
00482:  DATA 72,65
00484:  DATA 64,20
00486:  DATA 66,6C
00488:  DATA 61,73
0048A:  DATA 68,20
0048C:  DATA 6D,65
0048E:  DATA 6D,6F
00490:  DATA 72,79
00492:  DATA 0A,00
00494:  DATA 70,72
00496:  DATA 65,73
00498:  DATA 73,20
0049A:  DATA 63,3A
0049C:  DATA 20,41
0049E:  DATA 44,43
004A0:  DATA 53,20
004A2:  DATA 73,68
004A4:  DATA 61,72
004A6:  DATA 65,64
004A8:  DATA 20,66
004AA:  DATA 6C,61
004AC:  DATA 73,68
004AE:  DATA 20,6D
004B0:  DATA 65,6D
004B2:  DATA 6F,72
004B4:  DATA 79,0A
004B6:  DATA 00,00
004B8:  DATA 70,72
004BA:  DATA 65,73
004BC:  DATA 73,20
004BE:  DATA 64,3A
004C0:  DATA 20,4F
004C2:  DATA 56,43
004C4:  DATA 41,4D
004C6:  DATA 20,73
004C8:  DATA 68,61
004CA:  DATA 72,65
004CC:  DATA 64,20
004CE:  DATA 66,6C
004D0:  DATA 61,73
004D2:  DATA 68,20
004D4:  DATA 6D,65
004D6:  DATA 6D,6F
004D8:  DATA 72,79
004DA:  DATA 0A,00
004DC:  DATA 70,72
004DE:  DATA 65,73
004E0:  DATA 73,20
004E2:  DATA 65,3A
004E4:  DATA 20,4D
004E6:  DATA 56,43
004E8:  DATA 41,4D
004EA:  DATA 20,73
004EC:  DATA 68,61
004EE:  DATA 72,65
004F0:  DATA 64,20
004F2:  DATA 66,6C
004F4:  DATA 61,73
004F6:  DATA 68,20
004F8:  DATA 6D,65
004FA:  DATA 6D,6F
004FC:  DATA 72,79
004FE:  DATA 0A,00
00500:  DATA 70,72
00502:  DATA 65,73
00504:  DATA 73,20
00506:  DATA 78,3A
00508:  DATA 20,52
0050A:  DATA 65,74
0050C:  DATA 75,72
0050E:  DATA 6E,20
00510:  DATA 74,6F
00512:  DATA 20,4D
00514:  DATA 41,49
00516:  DATA 4E,20
00518:  DATA 4D,45
0051A:  DATA 4E,55
0051C:  DATA 0A,00
0051E:  DATA 4D,41
00520:  DATA 49,4E
00522:  DATA 20,73
00524:  DATA 68,61
00526:  DATA 72,65
00528:  DATA 64,20
0052A:  DATA 66,6C
0052C:  DATA 61,73
0052E:  DATA 68,20
00530:  DATA 6D,65
00532:  DATA 6D,6F
00534:  DATA 72,79
00536:  DATA 20,63
00538:  DATA 68,6F
0053A:  DATA 73,65
0053C:  DATA 6E,0A
0053E:  DATA 00,00
00540:  DATA 43,4F
00542:  DATA 4D,20
00544:  DATA 73,68
00546:  DATA 61,72
00548:  DATA 65,64
0054A:  DATA 20,66
0054C:  DATA 6C,61
0054E:  DATA 73,68
00550:  DATA 20,6D
00552:  DATA 65,6D
00554:  DATA 6F,72
00556:  DATA 79,20
00558:  DATA 63,68
0055A:  DATA 6F,73
0055C:  DATA 65,6E
0055E:  DATA 0A,00
00560:  DATA 41,44
00562:  DATA 43,53
00564:  DATA 20,73
00566:  DATA 68,61
00568:  DATA 72,65
0056A:  DATA 64,20
0056C:  DATA 66,6C
0056E:  DATA 61,73
00570:  DATA 68,20
00572:  DATA 6D,65
00574:  DATA 6D,6F
00576:  DATA 72,79
00578:  DATA 20,63
0057A:  DATA 68,6F
0057C:  DATA 73,65
0057E:  DATA 6E,0A
00580:  DATA 00,00
00582:  DATA 4F,56
00584:  DATA 43,41
00586:  DATA 4D,20
00588:  DATA 73,68
0058A:  DATA 61,72
0058C:  DATA 65,64
0058E:  DATA 20,66
00590:  DATA 6C,61
00592:  DATA 73,68
00594:  DATA 20,6D
00596:  DATA 65,6D
00598:  DATA 6F,72
0059A:  DATA 79,20
0059C:  DATA 63,68
0059E:  DATA 6F,73
005A0:  DATA 65,6E
005A2:  DATA 0A,00
005A4:  DATA 4D,56
005A6:  DATA 43,41
005A8:  DATA 4D,20
005AA:  DATA 73,68
005AC:  DATA 61,72
005AE:  DATA 65,64
005B0:  DATA 20,66
005B2:  DATA 6C,61
005B4:  DATA 73,68
005B6:  DATA 20,6D
005B8:  DATA 65,6D
005BA:  DATA 6F,72
005BC:  DATA 79,20
005BE:  DATA 63,68
005C0:  DATA 6F,73
005C2:  DATA 65,6E
005C4:  DATA 0A,00
005C6:  DATA 49,6E
005C8:  DATA 76,61
005CA:  DATA 6C,69
005CC:  DATA 64,20
005CE:  DATA 66,6C
005D0:  DATA 61,73
005D2:  DATA 68,20
005D4:  DATA 6D,65
005D6:  DATA 6D,6F
005D8:  DATA 72,79
005DA:  DATA 20,6F
005DC:  DATA 70,74
005DE:  DATA 69,6F
005E0:  DATA 6E,2E
005E2:  DATA 20,50
005E4:  DATA 6C,65
005E6:  DATA 61,73
005E8:  DATA 65,20
005EA:  DATA 74,72
005EC:  DATA 79,20
005EE:  DATA 61,67
005F0:  DATA 61,69
005F2:  DATA 6E,2E
005F4:  DATA 0A,00
005F6:  DATA 53,65
005F8:  DATA 74,74
005FA:  DATA 69,6E
005FC:  DATA 67,73
005FE:  DATA 20,6F
00600:  DATA 66,20
00602:  DATA 52,54
00604:  DATA 43,20
00606:  DATA 63,68
00608:  DATA 6F,73
0060A:  DATA 65,6E
0060C:  DATA 0A,00
0060E:  DATA 20,20
00610:  DATA 20,20
00612:  DATA 70,72
00614:  DATA 65,73
00616:  DATA 73,20
00618:  DATA 61,3A
0061A:  DATA 20,74
0061C:  DATA 6F,20
0061E:  DATA 72,65
00620:  DATA 73,65
00622:  DATA 74,20
00624:  DATA 74,68
00626:  DATA 65,20
00628:  DATA 52,54
0062A:  DATA 43,20
0062C:  DATA 2F,61
0062E:  DATA 6C,6C
00630:  DATA 20,63
00632:  DATA 75,72
00634:  DATA 72,65
00636:  DATA 6E,74
00638:  DATA 20,74
0063A:  DATA 69,6D
0063C:  DATA 65,20
0063E:  DATA 77,69
00640:  DATA 6C,6C
00642:  DATA 20,62
00644:  DATA 65,20
00646:  DATA 73,65
00648:  DATA 74,20
0064A:  DATA 7A,65
0064C:  DATA 72,6F
0064E:  DATA 2F,0A
00650:  DATA 00,00
00652:  DATA 20,20
00654:  DATA 20,20
00656:  DATA 70,72
00658:  DATA 65,73
0065A:  DATA 73,20
0065C:  DATA 62,3A
0065E:  DATA 20,64
00660:  DATA 69,73
00662:  DATA 70,6C
00664:  DATA 61,79
00666:  DATA 20,63
00668:  DATA 75,72
0066A:  DATA 72,65
0066C:  DATA 6E,74
0066E:  DATA 20,74
00670:  DATA 69,6D
00672:  DATA 65,0A
00674:  DATA 00,00
00676:  DATA 4E,6F
00678:  DATA 77,20
0067A:  DATA 74,69
0067C:  DATA 6D,65
0067E:  DATA 20,69
00680:  DATA 73,0A
00682:  DATA 00,00
00684:  DATA 0D,25
00686:  DATA 30,32
00688:  DATA 75,2F
0068A:  DATA 25,30
0068C:  DATA 32,75
0068E:  DATA 2F,32
00690:  DATA 30,25
00692:  DATA 30,32
00694:  DATA 75,20
00696:  DATA 25,30
00698:  DATA 32,75
0069A:  DATA 3A,25
0069C:  DATA 30,32
0069E:  DATA 75,3A
006A0:  DATA 25,30
006A2:  DATA 32,75
006A4:  DATA 00,00
006A6:  DATA 54,69
006A8:  DATA 6D,65
006AA:  DATA 20,63
006AC:  DATA 68,61
006AE:  DATA 6E,67
006B0:  DATA 69,6E
006B2:  DATA 67,20
006B4:  DATA 66,75
006B6:  DATA 6E,63
006B8:  DATA 74,69
006BA:  DATA 6F,6E
006BC:  DATA 20,61
006BE:  DATA 63,74
006C0:  DATA 69,76
006C2:  DATA 61,74
006C4:  DATA 65,64
006C6:  DATA 0A,00
006C8:  DATA 54,69
006CA:  DATA 6D,65
006CC:  DATA 20,73
006CE:  DATA 75,63
006D0:  DATA 63,65
006D2:  DATA 73,73
006D4:  DATA 66,75
006D6:  DATA 6C,6C
006D8:  DATA 79,20
006DA:  DATA 63,68
006DC:  DATA 61,6E
006DE:  DATA 67,65
006E0:  DATA 64,2E
006E2:  DATA 20,43
006E4:  DATA 75,72
006E6:  DATA 72,65
006E8:  DATA 6E,74
006EA:  DATA 20,74
006EC:  DATA 69,6D
006EE:  DATA 65,20
006F0:  DATA 69,73
006F2:  DATA 3A,0A
006F4:  DATA 00,00
006F6:  DATA 0D,25
006F8:  DATA 30,32
006FA:  DATA 75,2F
006FC:  DATA 25,30
006FE:  DATA 32,75
00700:  DATA 2F,32
00702:  DATA 30,25
00704:  DATA 30,32
00706:  DATA 75,20
00708:  DATA 25,30
0070A:  DATA 32,75
0070C:  DATA 3A,25
0070E:  DATA 30,32
00710:  DATA 75,3A
00712:  DATA 25,30
00714:  DATA 32,75
00716:  DATA 00,00
00718:  DATA 0D,25
0071A:  DATA 30,32
0071C:  DATA 75,2F
0071E:  DATA 25,30
00720:  DATA 32,75
00722:  DATA 2F,32
00724:  DATA 30,25
00726:  DATA 30,32
00728:  DATA 75,20
0072A:  DATA 25,30
0072C:  DATA 32,75
0072E:  DATA 3A,25
00730:  DATA 30,32
00732:  DATA 75,3A
00734:  DATA 25,30
00736:  DATA 32,75
00738:  DATA 00,00
0073A:  DATA 49,6E
0073C:  DATA 76,61
0073E:  DATA 6C,69
00740:  DATA 64,20
00742:  DATA 49,4F
00744:  DATA 20,6F
00746:  DATA 70,74
00748:  DATA 69,6F
0074A:  DATA 6E,2E
0074C:  DATA 20,50
0074E:  DATA 6C,65
00750:  DATA 61,73
00752:  DATA 65,20
00754:  DATA 74,72
00756:  DATA 79,20
00758:  DATA 61,67
0075A:  DATA 61,69
0075C:  DATA 6E,2E
0075E:  DATA 0A,00
00760:  DATA 49,4F
00762:  DATA 20,63
00764:  DATA 6F,6E
00766:  DATA 74,72
00768:  DATA 6F,6C
0076A:  DATA 20,63
0076C:  DATA 68,6F
0076E:  DATA 73,65
00770:  DATA 6E,0A
00772:  DATA 00,00
00774:  DATA 20,20
00776:  DATA 20,20
00778:  DATA 70,72
0077A:  DATA 65,73
0077C:  DATA 73,20
0077E:  DATA 61,3A
00780:  DATA 20,54
00782:  DATA 6F,67
00784:  DATA 67,6C
00786:  DATA 65,20
00788:  DATA 45,4E
0078A:  DATA 5F,53
0078C:  DATA 55,50
0078E:  DATA 5F,33
00790:  DATA 56,33
00792:  DATA 5F,31
00794:  DATA 20,2F
00796:  DATA 69,73
00798:  DATA 20,63
0079A:  DATA 75,72
0079C:  DATA 72,65
0079E:  DATA 6E,74
007A0:  DATA 6C,79
007A2:  DATA 2F,00
007A4:  DATA 48,49
007A6:  DATA 47,48
007A8:  DATA 0A,00
007AA:  DATA 4C,4F
007AC:  DATA 57,0A
007AE:  DATA 00,00
007B0:  DATA 49,6E
007B2:  DATA 76,61
007B4:  DATA 6C,69
007B6:  DATA 64,0A
007B8:  DATA 00,00
007BA:  DATA 20,20
007BC:  DATA 20,20
007BE:  DATA 70,72
007C0:  DATA 65,73
007C2:  DATA 73,20
007C4:  DATA 62,3A
007C6:  DATA 20,54
007C8:  DATA 6F,67
007CA:  DATA 67,6C
007CC:  DATA 65,20
007CE:  DATA 45,4E
007D0:  DATA 5F,53
007D2:  DATA 55,50
007D4:  DATA 5F,33
007D6:  DATA 56,33
007D8:  DATA 5F,32
007DA:  DATA 20,2F
007DC:  DATA 69,73
007DE:  DATA 20,63
007E0:  DATA 75,72
007E2:  DATA 72,65
007E4:  DATA 6E,74
007E6:  DATA 6C,79
007E8:  DATA 2F,00
007EA:  DATA 48,49
007EC:  DATA 47,48
007EE:  DATA 0A,00
007F0:  DATA 4C,4F
007F2:  DATA 57,0A
007F4:  DATA 00,00
007F6:  DATA 49,6E
007F8:  DATA 76,61
007FA:  DATA 6C,69
007FC:  DATA 64,0A
007FE:  DATA 00,00
00800:  DATA 20,20
00802:  DATA 20,20
00804:  DATA 70,72
00806:  DATA 65,73
00808:  DATA 73,20
0080A:  DATA 63,3A
0080C:  DATA 20,54
0080E:  DATA 6F,67
00810:  DATA 67,6C
00812:  DATA 65,20
00814:  DATA 45,4E
00816:  DATA 5F,53
00818:  DATA 55,50
0081A:  DATA 5F,33
0081C:  DATA 56,33
0081E:  DATA 5F,44
00820:  DATA 41,51
00822:  DATA 20,2F
00824:  DATA 69,73
00826:  DATA 20,63
00828:  DATA 75,72
0082A:  DATA 72,65
0082C:  DATA 6E,74
0082E:  DATA 6C,79
00830:  DATA 2F,00
00832:  DATA 48,49
00834:  DATA 47,48
00836:  DATA 0A,00
00838:  DATA 4C,4F
0083A:  DATA 57,0A
0083C:  DATA 00,00
0083E:  DATA 49,6E
00840:  DATA 76,61
00842:  DATA 6C,69
00844:  DATA 64,0A
00846:  DATA 00,00
00848:  DATA 20,20
0084A:  DATA 20,20
0084C:  DATA 70,72
0084E:  DATA 65,73
00850:  DATA 73,20
00852:  DATA 64,3A
00854:  DATA 20,54
00856:  DATA 6F,67
00858:  DATA 67,6C
0085A:  DATA 65,20
0085C:  DATA 45,4E
0085E:  DATA 5F,53
00860:  DATA 55,50
00862:  DATA 5F,55
00864:  DATA 4E,52
00866:  DATA 45,47
00868:  DATA 20,2F
0086A:  DATA 69,73
0086C:  DATA 20,63
0086E:  DATA 75,72
00870:  DATA 72,65
00872:  DATA 6E,74
00874:  DATA 6C,79
00876:  DATA 2F,00
00878:  DATA 48,49
0087A:  DATA 47,48
0087C:  DATA 0A,00
0087E:  DATA 4C,4F
00880:  DATA 57,0A
00882:  DATA 00,00
00884:  DATA 49,6E
00886:  DATA 76,61
00888:  DATA 6C,69
0088A:  DATA 64,0A
0088C:  DATA 00,00
0088E:  DATA 20,20
00890:  DATA 20,20
00892:  DATA 70,72
00894:  DATA 65,73
00896:  DATA 73,20
00898:  DATA 65,3A
0089A:  DATA 20,54
0089C:  DATA 6F,67
0089E:  DATA 67,6C
008A0:  DATA 65,20
008A2:  DATA 45,4E
008A4:  DATA 5F,53
008A6:  DATA 55,50
008A8:  DATA 5F,35
008AA:  DATA 56,30
008AC:  DATA 20,2F
008AE:  DATA 69,73
008B0:  DATA 20,63
008B2:  DATA 75,72
008B4:  DATA 72,65
008B6:  DATA 6E,74
008B8:  DATA 6C,79
008BA:  DATA 2F,00
008BC:  DATA 48,49
008BE:  DATA 47,48
008C0:  DATA 0A,00
008C2:  DATA 4C,4F
008C4:  DATA 57,0A
008C6:  DATA 00,00
008C8:  DATA 49,6E
008CA:  DATA 76,61
008CC:  DATA 6C,69
008CE:  DATA 64,0A
008D0:  DATA 00,00
008D2:  DATA 20,20
008D4:  DATA 20,20
008D6:  DATA 70,72
008D8:  DATA 65,73
008DA:  DATA 73,20
008DC:  DATA 66,3A
008DE:  DATA 20,54
008E0:  DATA 6F,67
008E2:  DATA 67,6C
008E4:  DATA 65,20
008E6:  DATA 4B,49
008E8:  DATA 4C,4C
008EA:  DATA 5F,53
008EC:  DATA 57,49
008EE:  DATA 54,43
008F0:  DATA 48,20
008F2:  DATA 2F,69
008F4:  DATA 73,20
008F6:  DATA 63,75
008F8:  DATA 72,72
008FA:  DATA 65,6E
008FC:  DATA 74,6C
008FE:  DATA 79,2F
00900:  DATA 00,00
00902:  DATA 48,49
00904:  DATA 47,48
00906:  DATA 0A,00
00908:  DATA 4C,4F
0090A:  DATA 57,0A
0090C:  DATA 00,00
0090E:  DATA 49,6E
00910:  DATA 76,61
00912:  DATA 6C,69
00914:  DATA 64,0A
00916:  DATA 00,00
00918:  DATA 20,20
0091A:  DATA 20,20
0091C:  DATA 70,72
0091E:  DATA 65,73
00920:  DATA 73,20
00922:  DATA 67,3A
00924:  DATA 20,54
00926:  DATA 6F,67
00928:  DATA 67,6C
0092A:  DATA 65,20
0092C:  DATA 4D,56
0092E:  DATA 43,41
00930:  DATA 4D,5F
00932:  DATA 50,57
00934:  DATA 52,20
00936:  DATA 2F,69
00938:  DATA 73,20
0093A:  DATA 63,75
0093C:  DATA 72,72
0093E:  DATA 65,6E
00940:  DATA 74,6C
00942:  DATA 79,2F
00944:  DATA 00,00
00946:  DATA 48,49
00948:  DATA 47,48
0094A:  DATA 0A,00
0094C:  DATA 4C,4F
0094E:  DATA 57,0A
00950:  DATA 00,00
00952:  DATA 49,6E
00954:  DATA 76,61
00956:  DATA 6C,69
00958:  DATA 64,0A
0095A:  DATA 00,00
0095C:  DATA 20,20
0095E:  DATA 20,20
00960:  DATA 70,72
00962:  DATA 65,73
00964:  DATA 73,20
00966:  DATA 68,3A
00968:  DATA 20,54
0096A:  DATA 6F,67
0096C:  DATA 67,6C
0096E:  DATA 65,20
00970:  DATA 4F,56
00972:  DATA 43,41
00974:  DATA 4D,5F
00976:  DATA 50,57
00978:  DATA 52,20
0097A:  DATA 2F,69
0097C:  DATA 73,20
0097E:  DATA 63,75
00980:  DATA 72,72
00982:  DATA 65,6E
00984:  DATA 74,6C
00986:  DATA 79,2F
00988:  DATA 00,00
0098A:  DATA 48,49
0098C:  DATA 47,48
0098E:  DATA 0A,00
00990:  DATA 4C,4F
00992:  DATA 57,0A
00994:  DATA 00,00
00996:  DATA 49,6E
00998:  DATA 76,61
0099A:  DATA 6C,69
0099C:  DATA 64,0A
0099E:  DATA 00,00
009A0:  DATA 20,20
009A2:  DATA 20,20
009A4:  DATA 70,72
009A6:  DATA 65,73
009A8:  DATA 73,20
009AA:  DATA 69,3A
009AC:  DATA 20,54
009AE:  DATA 6F,67
009B0:  DATA 67,6C
009B2:  DATA 65,20
009B4:  DATA 41,44
009B6:  DATA 43,53
009B8:  DATA 5F,50
009BA:  DATA 57,52
009BC:  DATA 20,2F
009BE:  DATA 69,73
009C0:  DATA 20,63
009C2:  DATA 75,72
009C4:  DATA 72,65
009C6:  DATA 6E,74
009C8:  DATA 6C,79
009CA:  DATA 2F,00
009CC:  DATA 48,49
009CE:  DATA 47,48
009D0:  DATA 0A,00
009D2:  DATA 4C,4F
009D4:  DATA 57,0A
009D6:  DATA 00,00
009D8:  DATA 49,6E
009DA:  DATA 76,61
009DC:  DATA 6C,69
009DE:  DATA 64,0A
009E0:  DATA 00,00
009E2:  DATA 20,20
009E4:  DATA 20,20
009E6:  DATA 70,72
009E8:  DATA 65,73
009EA:  DATA 73,20
009EC:  DATA 6A,3A
009EE:  DATA 20,54
009F0:  DATA 6F,67
009F2:  DATA 67,6C
009F4:  DATA 65,20
009F6:  DATA 61,6C
009F8:  DATA 6C,20
009FA:  DATA 50,69
009FC:  DATA 6E,73
009FE:  DATA 00,00
00A00:  DATA 49,6E
00A02:  DATA 76,61
00A04:  DATA 6C,69
00A06:  DATA 64,20
00A08:  DATA 49,4F
00A0A:  DATA 20,6F
00A0C:  DATA 70,74
00A0E:  DATA 69,6F
00A10:  DATA 6E,2E
00A12:  DATA 20,50
00A14:  DATA 6C,65
00A16:  DATA 61,73
00A18:  DATA 65,20
00A1A:  DATA 74,72
00A1C:  DATA 79,20
00A1E:  DATA 61,67
00A20:  DATA 61,69
00A22:  DATA 6E,2E
00A24:  DATA 0A,00
00A26:  DATA 20,5F
00A28:  DATA 5F,20
00A2A:  DATA 20,5F
00A2C:  DATA 5F,20
00A2E:  DATA 5F,5F
00A30:  DATA 5F,5F
00A32:  DATA 5F,20
00A34:  DATA 5F,20
00A36:  DATA 20,20
00A38:  DATA 5F,20
00A3A:  DATA 5F,20
00A3C:  DATA 20,20
00A3E:  DATA 5F,20
00A40:  DATA 20,20
00A42:  DATA 5F,5F
00A44:  DATA 5F,5F
00A46:  DATA 5F,20
00A48:  DATA 20,20
00A4A:  DATA 20,20
00A4C:  DATA 20,20
00A4E:  DATA 20,20
00A50:  DATA 20,20
00A52:  DATA 20,20
00A54:  DATA 20,20
00A56:  DATA 20,20
00A58:  DATA 5F,20
00A5A:  DATA 20,20
00A5C:  DATA 5F,20
00A5E:  DATA 20,20
00A60:  DATA 20,20
00A62:  DATA 20,20
00A64:  DATA 20,20
00A66:  DATA 20,20
00A68:  DATA 20,20
00A6A:  DATA 0A,00
00A6C:  DATA 7C,20
00A6E:  DATA 20,5C
00A70:  DATA 2F,20
00A72:  DATA 20,7C
00A74:  DATA 20,5F
00A76:  DATA 5F,5F
00A78:  DATA 5F,7C
00A7A:  DATA 20,5C
00A7C:  DATA 20,7C
00A7E:  DATA 20,7C
00A80:  DATA 20,7C
00A82:  DATA 20,7C
00A84:  DATA 20,7C
00A86:  DATA 20,7C
00A88:  DATA 20,20
00A8A:  DATA 5F,5F
00A8C:  DATA 5F,7C
00A8E:  DATA 20,20
00A90:  DATA 20,5F
00A92:  DATA 20,5F
00A94:  DATA 20,5F
00A96:  DATA 5F,20
00A98:  DATA 20,20
00A9A:  DATA 5F,5F
00A9C:  DATA 5F,7C
00A9E:  DATA 20,7C
00AA0:  DATA 5F,28
00AA2:  DATA 5F,29
00AA4:  DATA 20,5F
00AA6:  DATA 5F,5F
00AA8:  DATA 20,20
00AAA:  DATA 5F,20
00AAC:  DATA 5F,5F
00AAE:  DATA 20,20
00AB0:  DATA 0A,00
00AB2:  DATA 7C,20
00AB4:  DATA 7C,5C
00AB6:  DATA 2F,7C
00AB8:  DATA 20,7C
00ABA:  DATA 20,20
00ABC:  DATA 5F,7C
00ABE:  DATA 20,7C
00AC0:  DATA 20,20
00AC2:  DATA 5C,7C
00AC4:  DATA 20,7C
00AC6:  DATA 20,7C
00AC8:  DATA 20,7C
00ACA:  DATA 20,7C
00ACC:  DATA 20,7C
00ACE:  DATA 20,7C
00AD0:  DATA 5F,20
00AD2:  DATA 7C,20
00AD4:  DATA 7C,20
00AD6:  DATA 7C,20
00AD8:  DATA 7C,20
00ADA:  DATA 27,5F
00ADC:  DATA 20,5C
00ADE:  DATA 20,2F
00AE0:  DATA 20,5F
00AE2:  DATA 5F,7C
00AE4:  DATA 20,5F
00AE6:  DATA 5F,7C
00AE8:  DATA 20,7C
00AEA:  DATA 2F,20
00AEC:  DATA 5F,20
00AEE:  DATA 5C,7C
00AF0:  DATA 20,27
00AF2:  DATA 5F,20
00AF4:  DATA 5C,20
00AF6:  DATA 0A,00
00AF8:  DATA 7C,20
00AFA:  DATA 7C,20
00AFC:  DATA 20,7C
00AFE:  DATA 20,7C
00B00:  DATA 20,7C
00B02:  DATA 5F,5F
00B04:  DATA 5F,7C
00B06:  DATA 20,7C
00B08:  DATA 5C,20
00B0A:  DATA 20,7C
00B0C:  DATA 20,7C
00B0E:  DATA 5F,7C
00B10:  DATA 20,7C
00B12:  DATA 20,7C
00B14:  DATA 20,20
00B16:  DATA 5F,7C
00B18:  DATA 7C,20
00B1A:  DATA 7C,5F
00B1C:  DATA 7C,20
00B1E:  DATA 7C,20
00B20:  DATA 7C,20
00B22:  DATA 7C,20
00B24:  DATA 7C,20
00B26:  DATA 28,5F
00B28:  DATA 5F,7C
00B2A:  DATA 20,7C
00B2C:  DATA 5F,7C
00B2E:  DATA 20,7C
00B30:  DATA 20,28
00B32:  DATA 5F,29
00B34:  DATA 20,7C
00B36:  DATA 20,7C
00B38:  DATA 20,7C
00B3A:  DATA 20,7C
00B3C:  DATA 0A,00
00B3E:  DATA 7C,5F
00B40:  DATA 7C,20
00B42:  DATA 5F,7C
00B44:  DATA 5F,7C
00B46:  DATA 5F,5F
00B48:  DATA 5F,5F
00B4A:  DATA 5F,7C
00B4C:  DATA 5F,7C
00B4E:  DATA 20,5C
00B50:  DATA 5F,7C
00B52:  DATA 5C,5F
00B54:  DATA 5F,5F
00B56:  DATA 2F,20
00B58:  DATA 20,7C
00B5A:  DATA 5F,7C
00B5C:  DATA 5F,20
00B5E:  DATA 20,5C
00B60:  DATA 5F,5F
00B62:  DATA 2C,5F
00B64:  DATA 7C,5F
00B66:  DATA 7C,20
00B68:  DATA 7C,5F
00B6A:  DATA 7C,5C
00B6C:  DATA 5F,5F
00B6E:  DATA 5F,7C
00B70:  DATA 5C,5F
00B72:  DATA 5F,7C
00B74:  DATA 5F,7C
00B76:  DATA 5C,5F
00B78:  DATA 5F,5F
00B7A:  DATA 2F,7C
00B7C:  DATA 5F,7C
00B7E:  DATA 20,7C
00B80:  DATA 5F,7C
00B82:  DATA 0A,00
00B84:  DATA 20,20
00B86:  DATA 20,2F
00B88:  DATA 20,5C
00B8A:  DATA 20,20
00B8C:  DATA 20,5F
00B8E:  DATA 5F,5F
00B90:  DATA 7C,20
00B92:  DATA 7C,5F
00B94:  DATA 28,5F
00B96:  DATA 29,5F
00B98:  DATA 20,20
00B9A:  DATA 20,5F
00B9C:  DATA 5F,5F
00B9E:  DATA 5F,20
00BA0:  DATA 5F,7C
00BA2:  DATA 20,7C
00BA4:  DATA 5F,20
00BA6:  DATA 5F,5F
00BA8:  DATA 5F,20
00BAA:  DATA 20,5F
00BAC:  DATA 5F,7C
00BAE:  DATA 20,7C
00BB0:  DATA 20,7C
00BB2:  DATA 20,20
00BB4:  DATA 20,20
00BB6:  DATA 20,20
00BB8:  DATA 20,20
00BBA:  DATA 20,20
00BBC:  DATA 20,20
00BBE:  DATA 20,20
00BC0:  DATA 20,20
00BC2:  DATA 20,20
00BC4:  DATA 20,20
00BC6:  DATA 20,20
00BC8:  DATA 0A,00
00BCA:  DATA 20,20
00BCC:  DATA 2F,20
00BCE:  DATA 5F,20
00BD0:  DATA 5C,20
00BD2:  DATA 2F,20
00BD4:  DATA 5F,5F
00BD6:  DATA 7C,20
00BD8:  DATA 5F,5F
00BDA:  DATA 7C,20
00BDC:  DATA 5C,20
00BDE:  DATA 5C,20
00BE0:  DATA 2F,20
00BE2:  DATA 2F,20
00BE4:  DATA 5F,60
00BE6:  DATA 20,7C
00BE8:  DATA 20,5F
00BEA:  DATA 5F,2F
00BEC:  DATA 20,5F
00BEE:  DATA 20,5C
00BF0:  DATA 2F,20
00BF2:  DATA 5F,60
00BF4:  DATA 20,7C
00BF6:  DATA 20,7C
00BF8:  DATA 20,20
00BFA:  DATA 20,20
00BFC:  DATA 20,20
00BFE:  DATA 20,20
00C00:  DATA 20,20
00C02:  DATA 20,20
00C04:  DATA 20,20
00C06:  DATA 20,20
00C08:  DATA 20,20
00C0A:  DATA 20,20
00C0C:  DATA 20,20
00C0E:  DATA 0A,00
00C10:  DATA 20,2F
00C12:  DATA 20,5F
00C14:  DATA 5F,5F
00C16:  DATA 20,5C
00C18:  DATA 20,28
00C1A:  DATA 5F,5F
00C1C:  DATA 7C,20
00C1E:  DATA 7C,5F
00C20:  DATA 7C,20
00C22:  DATA 7C,5C
00C24:  DATA 20,56
00C26:  DATA 20,2F
00C28:  DATA 20,28
00C2A:  DATA 5F,7C
00C2C:  DATA 20,7C
00C2E:  DATA 20,7C
00C30:  DATA 7C,20
00C32:  DATA 20,5F
00C34:  DATA 5F,2F
00C36:  DATA 20,28
00C38:  DATA 5F,7C
00C3A:  DATA 20,7C
00C3C:  DATA 5F,7C
00C3E:  DATA 20,20
00C40:  DATA 20,20
00C42:  DATA 20,20
00C44:  DATA 20,20
00C46:  DATA 20,20
00C48:  DATA 20,20
00C4A:  DATA 20,20
00C4C:  DATA 20,20
00C4E:  DATA 20,20
00C50:  DATA 20,20
00C52:  DATA 20,20
00C54:  DATA 0A,00
00C56:  DATA 2F,5F
00C58:  DATA 2F,20
00C5A:  DATA 20,20
00C5C:  DATA 5C,5F
00C5E:  DATA 5C,5F
00C60:  DATA 5F,5F
00C62:  DATA 7C,5C
00C64:  DATA 5F,5F
00C66:  DATA 7C,5F
00C68:  DATA 7C,20
00C6A:  DATA 5C,5F
00C6C:  DATA 2F,20
00C6E:  DATA 5C,5F
00C70:  DATA 5F,2C
00C72:  DATA 5F,7C
00C74:  DATA 5C,5F
00C76:  DATA 5F,5C
00C78:  DATA 5F,5F
00C7A:  DATA 5F,7C
00C7C:  DATA 5C,5F
00C7E:  DATA 5F,2C
00C80:  DATA 5F,28
00C82:  DATA 5F,29
00C84:  DATA 20,20
00C86:  DATA 20,20
00C88:  DATA 20,20
00C8A:  DATA 20,20
00C8C:  DATA 20,20
00C8E:  DATA 20,20
00C90:  DATA 20,20
00C92:  DATA 20,20
00C94:  DATA 20,20
00C96:  DATA 20,20
00C98:  DATA 20,20
00C9A:  DATA 0A,00
00C9C:  DATA 0A,2D
00C9E:  DATA 2D,2D
00CA0:  DATA 2D,2D
00CA2:  DATA 2D,2D
00CA4:  DATA 2D,2D
00CA6:  DATA 2D,2D
00CA8:  DATA 2D,2D
00CAA:  DATA 2D,2D
00CAC:  DATA 2D,2D
00CAE:  DATA 4D,61
00CB0:  DATA 69,6E
00CB2:  DATA 20,4D
00CB4:  DATA 65,6E
00CB6:  DATA 75,2D
00CB8:  DATA 2D,2D
00CBA:  DATA 2D,2D
00CBC:  DATA 2D,2D
00CBE:  DATA 2D,2D
00CC0:  DATA 2D,2D
00CC2:  DATA 2D,2D
00CC4:  DATA 2D,2D
00CC6:  DATA 2D,2D
00CC8:  DATA 0A,00
00CCA:  DATA 20,20
00CCC:  DATA 20,20
00CCE:  DATA 70,72
00CD0:  DATA 65,73
00CD2:  DATA 73,20
00CD4:  DATA 62,3A
00CD6:  DATA 20,45
00CD8:  DATA 50,53
00CDA:  DATA 20,50
00CDC:  DATA 6F,77
00CDE:  DATA 65,72
00CE0:  DATA 20,6F
00CE2:  DATA 75,74
00CE4:  DATA 70,75
00CE6:  DATA 74,20
00CE8:  DATA 63,6F
00CEA:  DATA 6E,74
00CEC:  DATA 72,6F
00CEE:  DATA 6C,0A
00CF0:  DATA 00,00
00CF2:  DATA 20,20
00CF4:  DATA 20,20
00CF6:  DATA 70,72
00CF8:  DATA 65,73
00CFA:  DATA 73,20
00CFC:  DATA 63,3A
00CFE:  DATA 20,48
00D00:  DATA 6F,75
00D02:  DATA 73,65
00D04:  DATA 20,6B
00D06:  DATA 65,65
00D08:  DATA 70,69
00D0A:  DATA 6E,67
00D0C:  DATA 20,64
00D0E:  DATA 61,74
00D10:  DATA 61,20
00D12:  DATA 63,6F
00D14:  DATA 6C,6C
00D16:  DATA 65,63
00D18:  DATA 74,69
00D1A:  DATA 6F,6E
00D1C:  DATA 0A,00
00D1E:  DATA 20,20
00D20:  DATA 20,20
00D22:  DATA 70,72
00D24:  DATA 65,73
00D26:  DATA 73,20
00D28:  DATA 64,3A
00D2A:  DATA 20,43
00D2C:  DATA 68,65
00D2E:  DATA 63,6B
00D30:  DATA 20,46
00D32:  DATA 6C,61
00D34:  DATA 73,68
00D36:  DATA 20,4D
00D38:  DATA 65,6D
00D3A:  DATA 6F,72
00D3C:  DATA 69,65
00D3E:  DATA 73,0A
00D40:  DATA 00,00
00D42:  DATA 20,20
00D44:  DATA 20,20
00D46:  DATA 70,72
00D48:  DATA 65,73
00D4A:  DATA 73,20
00D4C:  DATA 66,3A
00D4E:  DATA 20,53
00D50:  DATA 65,74
00D52:  DATA 74,69
00D54:  DATA 6E,67
00D56:  DATA 73,20
00D58:  DATA 6F,66
00D5A:  DATA 20,52
00D5C:  DATA 54,43
00D5E:  DATA 0A,00
00D60:  DATA 20,20
00D62:  DATA 20,20
00D64:  DATA 70,72
00D66:  DATA 65,73
00D68:  DATA 73,20
00D6A:  DATA 6B,3A
00D6C:  DATA 20,55
00D6E:  DATA 41,52
00D70:  DATA 54,20
00D72:  DATA 72,65
00D74:  DATA 70,65
00D76:  DATA 61,74
00D78:  DATA 65,72
00D7A:  DATA 20,6F
00D7C:  DATA 66,20
00D7E:  DATA 45,50
00D80:  DATA 53,0A
00D82:  DATA 00,00
00D84:  DATA 20,20
00D86:  DATA 20,20
00D88:  DATA 70,72
00D8A:  DATA 65,73
00D8C:  DATA 73,20
00D8E:  DATA 78,3A
00D90:  DATA 20,45
00D92:  DATA 78,69
00D94:  DATA 74,20
00D96:  DATA 4D,61
00D98:  DATA 69,6E
00D9A:  DATA 20,4D
00D9C:  DATA 65,6E
00D9E:  DATA 75,0A
00DA0:  DATA 00,00
00DA2:  DATA 20,20
00DA4:  DATA 20,20
00DA6:  DATA 44,4F
00DA8:  DATA 20,4E
00DAA:  DATA 4F,54
00DAC:  DATA 20,55
00DAE:  DATA 53,45
00DB0:  DATA 20,43
00DB2:  DATA 41,50
00DB4:  DATA 49,54
00DB6:  DATA 41,4C
00DB8:  DATA 20,43
00DBA:  DATA 48,41
00DBC:  DATA 52,41
00DBE:  DATA 43,54
00DC0:  DATA 45,52
00DC2:  DATA 53,20
00DC4:  DATA 54,4F
00DC6:  DATA 20,57
00DC8:  DATA 52,49
00DCA:  DATA 54,45
00DCC:  DATA 21,0A
00DCE:  DATA 0A,00
00DD0:  DATA 55,41
00DD2:  DATA 52,54
00DD4:  DATA 20,52
00DD6:  DATA 65,70
00DD8:  DATA 65,61
00DDA:  DATA 74,65
00DDC:  DATA 72,20
00DDE:  DATA 49,6E
00DE0:  DATA 69,74
00DE2:  DATA 69,61
00DE4:  DATA 6C,69
00DE6:  DATA 7A,65
00DE8:  DATA 64,2E
00DEA:  DATA 0A,00
00DEC:  DATA 49,6E
00DEE:  DATA 76,61
00DF0:  DATA 6C,69
00DF2:  DATA 64,20
00DF4:  DATA 6F,70
00DF6:  DATA 74,69
00DF8:  DATA 6F,6E
00DFA:  DATA 2E,20
00DFC:  DATA 50,6C
00DFE:  DATA 65,61
00E00:  DATA 73,65
00E02:  DATA 20,74
00E04:  DATA 72,79
00E06:  DATA 20,61
00E08:  DATA 67,61
00E0A:  DATA 69,6E
00E0C:  DATA 2E,0A
00E0E:  DATA 00,00
00E10:  DATA 52,65
00E12:  DATA 61,64
00E14:  DATA 69,6E
00E16:  DATA 67,20
00E18:  DATA 63,68
00E1A:  DATA 69,70
00E1C:  DATA 20,49
00E1E:  DATA 44,20
00E20:  DATA 6F,66
00E22:  DATA 20,6D
00E24:  DATA 61,69
00E26:  DATA 6E,0A
00E28:  DATA 00,00
00E2A:  DATA 52,65
00E2C:  DATA 61,64
00E2E:  DATA 69,6E
00E30:  DATA 67,20
00E32:  DATA 63,68
00E34:  DATA 69,70
00E36:  DATA 20,49
00E38:  DATA 44,20
00E3A:  DATA 6F,66
00E3C:  DATA 20,43
00E3E:  DATA 4F,4D
00E40:  DATA 0A,00
00E42:  DATA 52,65
00E44:  DATA 61,64
00E46:  DATA 69,6E
00E48:  DATA 67,20
00E4A:  DATA 63,68
00E4C:  DATA 69,70
00E4E:  DATA 20,49
00E50:  DATA 44,20
00E52:  DATA 6F,66
00E54:  DATA 20,41
00E56:  DATA 44,43
00E58:  DATA 53,0A
00E5A:  DATA 00,00
00E5C:  DATA 44,6F
00E5E:  DATA 6E,65
00E60:  DATA 20,72
00E62:  DATA 65,61
00E64:  DATA 64,69
00E66:  DATA 6E,67
00E68:  DATA 20,63
00E6A:  DATA 68,69
00E6C:  DATA 70,20
00E6E:  DATA 49,44
00E70:  DATA 0A,00
00E72:  DATA 53,74
00E74:  DATA 61,72
00E76:  DATA 74,69
00E78:  DATA 6E,67
00E7A:  DATA 20,74
00E7C:  DATA 6F,20
00E7E:  DATA 77,72
00E80:  DATA 69,74
00E82:  DATA 65,20
00E84:  DATA 64,61
00E86:  DATA 74,61
00E88:  DATA 20,69
00E8A:  DATA 6E,20
00E8C:  DATA 4D,41
00E8E:  DATA 49,4E
00E90:  DATA 20,66
00E92:  DATA 6C,61
00E94:  DATA 73,68
00E96:  DATA 20,6D
00E98:  DATA 65,6D
00E9A:  DATA 6F,72
00E9C:  DATA 79,0A
00E9E:  DATA 00,00
00EA0:  DATA 53,74
00EA2:  DATA 61,72
00EA4:  DATA 74,69
00EA6:  DATA 6E,67
00EA8:  DATA 20,74
00EAA:  DATA 6F,20
00EAC:  DATA 77,72
00EAE:  DATA 69,74
00EB0:  DATA 65,20
00EB2:  DATA 64,61
00EB4:  DATA 74,61
00EB6:  DATA 20,69
00EB8:  DATA 6E,20
00EBA:  DATA 43,4F
00EBC:  DATA 4D,20
00EBE:  DATA 66,6C
00EC0:  DATA 61,73
00EC2:  DATA 68,20
00EC4:  DATA 6D,65
00EC6:  DATA 6D,6F
00EC8:  DATA 72,79
00ECA:  DATA 0A,00
00ECC:  DATA 53,74
00ECE:  DATA 61,72
00ED0:  DATA 74,69
00ED2:  DATA 6E,67
00ED4:  DATA 20,74
00ED6:  DATA 6F,20
00ED8:  DATA 77,72
00EDA:  DATA 69,74
00EDC:  DATA 65,20
00EDE:  DATA 64,61
00EE0:  DATA 74,61
00EE2:  DATA 20,69
00EE4:  DATA 6E,20
00EE6:  DATA 41,44
00EE8:  DATA 43,53
00EEA:  DATA 20,66
00EEC:  DATA 6C,61
00EEE:  DATA 73,68
00EF0:  DATA 20,6D
00EF2:  DATA 65,6D
00EF4:  DATA 6F,72
00EF6:  DATA 79,0A
00EF8:  DATA 00,00
00EFA:  DATA 65,78
00EFC:  DATA 69,74
00EFE:  DATA 69,6E
00F00:  DATA 67,20
00F02:  DATA 6D,61
00F04:  DATA 69,6E
00F06:  DATA 20,6D
00F08:  DATA 65,6E
00F0A:  DATA 75,20
00F0C:  DATA 66,75
00F0E:  DATA 6E,63
00F10:  DATA 74,69
00F12:  DATA 6F,6E
00F14:  DATA 00,00
*
00F84:  TBLRD*+
00F86:  MOVF   FF5,F
00F88:  BZ    0FAA
00F8A:  MOVFF  FF6,1B0
00F8E:  MOVFF  FF7,1B1
00F92:  MOVFF  FF8,1B2
00F96:  MOVFF  FF5,1C2
00F9A:  RCALL  0F3E
00F9C:  MOVFF  1B0,FF6
00FA0:  MOVFF  1B1,FF7
00FA4:  MOVFF  1B2,FF8
00FA8:  BRA    0F84
00FAA:  RETURN 0
*
01016:  MOVWF  00
01018:  SWAPF  00,W
0101A:  ANDLW  0F
0101C:  MULLW  0A
0101E:  MOVF   00,W
01020:  ANDLW  0F
01022:  ADDWF  FF3,W
01024:  RETURN 0
01026:  RETURN 0
*
011B6:  TBLRD*+
011B8:  MOVFF  FF6,1BD
011BC:  MOVFF  FF7,1BE
011C0:  MOVFF  FF8,1BF
011C4:  MOVFF  FF5,1C2
011C8:  RCALL  0F3E
011CA:  MOVFF  1BD,FF6
011CE:  MOVFF  1BE,FF7
011D2:  MOVFF  1BF,FF8
011D6:  MOVLB  1
011D8:  DECFSZ xBC,F
011DA:  BRA    11DE
011DC:  BRA    11E2
011DE:  MOVLB  0
011E0:  BRA    11B6
011E2:  MOVLB  0
011E4:  RETURN 0
011E6:  MOVLB  1
011E8:  MOVF   xC3,W
011EA:  CLRF   01
011EC:  SUBWF  xC2,W
011EE:  BC    11F6
011F0:  MOVFF  1C2,00
011F4:  BRA    120E
011F6:  CLRF   00
011F8:  MOVLW  08
011FA:  MOVWF  xC4
011FC:  RLCF   xC2,F
011FE:  RLCF   00,F
01200:  MOVF   xC3,W
01202:  SUBWF  00,W
01204:  BTFSC  FD8.0
01206:  MOVWF  00
01208:  RLCF   01,F
0120A:  DECFSZ xC4,F
0120C:  BRA    11FC
0120E:  MOVLB  0
01210:  RETURN 0
01212:  MOVF   01,W
01214:  MOVFF  95,1C2
01218:  MOVLW  64
0121A:  MOVLB  1
0121C:  MOVWF  xC3
0121E:  MOVLB  0
01220:  RCALL  11E6
01222:  MOVFF  00,95
01226:  MOVF   01,W
01228:  MOVLW  30
0122A:  BNZ   123A
0122C:  BTFSS  x96.1
0122E:  BRA    1248
01230:  BTFSC  x96.3
01232:  BRA    1248
01234:  BTFSC  x96.4
01236:  MOVLW  20
01238:  BRA    1240
0123A:  BCF    x96.3
0123C:  BCF    x96.4
0123E:  BSF    x96.0
01240:  ADDWF  01,F
01242:  MOVFF  01,1C2
01246:  RCALL  0F3E
01248:  MOVFF  95,1C2
0124C:  MOVLW  0A
0124E:  MOVLB  1
01250:  MOVWF  xC3
01252:  MOVLB  0
01254:  RCALL  11E6
01256:  MOVFF  00,95
0125A:  MOVF   01,W
0125C:  MOVLW  30
0125E:  BNZ   126C
01260:  BTFSC  x96.3
01262:  BRA    1274
01264:  BTFSS  x96.0
01266:  BRA    1274
01268:  BTFSC  x96.4
0126A:  MOVLW  20
0126C:  ADDWF  01,F
0126E:  MOVFF  01,1C2
01272:  RCALL  0F3E
01274:  MOVLW  30
01276:  ADDWF  x95,F
01278:  MOVFF  95,1C2
0127C:  RCALL  0F3E
0127E:  RETURN 0
01280:  MOVLB  1
01282:  BTFSC  xBD.7
01284:  BRA    12A8
01286:  MOVLW  0F
01288:  MOVWF  00
0128A:  SWAPF  xBC,W
0128C:  ANDWF  00,F
0128E:  MOVLW  0A
01290:  SUBWF  00,W
01292:  BC    129A
01294:  MOVLW  30
01296:  ADDWF  00,F
01298:  BRA    129E
0129A:  MOVF   xBD,W
0129C:  ADDWF  00,F
0129E:  MOVFF  00,1C2
012A2:  MOVLB  0
012A4:  RCALL  0F3E
012A6:  MOVLB  1
012A8:  MOVLW  0F
012AA:  ANDWF  xBC,F
012AC:  MOVLW  0A
012AE:  SUBWF  xBC,W
012B0:  BC    12B6
012B2:  MOVLW  30
012B4:  BRA    12BA
012B6:  BCF    xBD.7
012B8:  MOVF   xBD,W
012BA:  ADDWF  xBC,F
012BC:  MOVFF  1BC,1C2
012C0:  MOVLB  0
012C2:  RCALL  0F3E
012C4:  RETURN 0
*
012E4:  MOVLW  20
012E6:  MOVLB  1
012E8:  BTFSS  xBD.4
012EA:  MOVLW  30
012EC:  MOVWF  xBE
012EE:  MOVFF  1BC,00
012F2:  BTFSS  00.7
012F4:  BRA    1306
012F6:  COMF   00,F
012F8:  INCF   00,F
012FA:  MOVFF  00,1BC
012FE:  MOVLW  2D
01300:  MOVWF  xBE
01302:  BSF    xBD.7
01304:  BSF    xBD.0
01306:  MOVF   01,W
01308:  MOVFF  1BC,1C2
0130C:  MOVLW  64
0130E:  MOVWF  xC3
01310:  MOVLB  0
01312:  RCALL  11E6
01314:  MOVFF  00,1BC
01318:  MOVLW  30
0131A:  ADDWF  01,W
0131C:  MOVLB  1
0131E:  MOVWF  xBF
01320:  MOVFF  1BC,1C2
01324:  MOVLW  0A
01326:  MOVWF  xC3
01328:  MOVLB  0
0132A:  RCALL  11E6
0132C:  MOVLW  30
0132E:  ADDWF  00,W
01330:  MOVLB  1
01332:  MOVWF  xC1
01334:  MOVLW  30
01336:  ADDWF  01,W
01338:  MOVWF  xC0
0133A:  MOVFF  1BE,00
0133E:  MOVLW  30
01340:  SUBWF  xBF,W
01342:  BZ    134C
01344:  BSF    xBD.1
01346:  BTFSC  xBD.7
01348:  BSF    xBD.2
0134A:  BRA    1370
0134C:  MOVFF  1BE,1BF
01350:  MOVLW  20
01352:  MOVWF  xBE
01354:  MOVLW  30
01356:  SUBWF  xC0,W
01358:  BZ    1362
0135A:  BSF    xBD.0
0135C:  BTFSC  xBD.7
0135E:  BSF    xBD.1
01360:  BRA    1370
01362:  BTFSS  FD8.2
01364:  BSF    xBD.0
01366:  BNZ   1370
01368:  MOVFF  1BF,1C0
0136C:  MOVLW  20
0136E:  MOVWF  xBF
01370:  BTFSC  xBD.2
01372:  BRA    137E
01374:  BTFSC  xBD.1
01376:  BRA    1386
01378:  BTFSC  xBD.0
0137A:  BRA    138E
0137C:  BRA    1396
0137E:  MOVFF  1BE,1C2
01382:  MOVLB  0
01384:  RCALL  0F3E
01386:  MOVFF  1BF,1C2
0138A:  MOVLB  0
0138C:  RCALL  0F3E
0138E:  MOVFF  1C0,1C2
01392:  MOVLB  0
01394:  RCALL  0F3E
01396:  MOVFF  1C1,1C2
0139A:  MOVLB  0
0139C:  RCALL  0F3E
0139E:  RETURN 0
*
02100:  MOVLB  1
02102:  CLRF   xC5
02104:  CLRF   xC6
02106:  MOVLW  01
02108:  MOVWF  xC7
0210A:  CLRF   FDA
0210C:  CLRF   FD9
0210E:  MOVWF  xCA
02110:  MOVLW  BD
02112:  MOVWF  xC9
02114:  MOVLW  01
02116:  MOVWF  FEA
02118:  MOVLW  C1
0211A:  MOVWF  FE9
0211C:  MOVFF  1CA,FE2
02120:  MOVFF  1C9,FE1
02124:  MOVFF  1C7,1C8
02128:  BCF    FD8.0
0212A:  MOVF   FE5,W
0212C:  MULWF  FEE
0212E:  MOVF   FF3,W
02130:  ADDWFC xC5,F
02132:  MOVF   FF4,W
02134:  ADDWFC xC6,F
02136:  DECFSZ xC8,F
02138:  BRA    2128
0213A:  MOVFF  1C5,FDE
0213E:  MOVFF  1C6,1C5
02142:  CLRF   xC6
02144:  BTFSC  FD8.0
02146:  INCF   xC6,F
02148:  INCF   xC9,F
0214A:  BTFSC  FD8.2
0214C:  INCF   xCA,F
0214E:  INCF   xC7,F
02150:  MOVF   xC7,W
02152:  SUBLW  05
02154:  BNZ   2114
02156:  MOVLB  0
02158:  GOTO   2200 (RETURN)
0215C:  MOVF   03,W
0215E:  SUBLW  20
02160:  BZ    2172
02162:  MOVF   03,W
02164:  SUBLW  08
02166:  BC    216E
02168:  MOVF   03,W
0216A:  SUBLW  0D
0216C:  BC    2172
0216E:  CLRF   01
02170:  BRA    2176
02172:  MOVLW  01
02174:  MOVWF  01
02176:  RETURN 0
02178:  MOVLB  1
0217A:  CLRF   xB7
0217C:  CLRF   xBB
0217E:  CLRF   xBA
02180:  CLRF   xB9
02182:  CLRF   xB8
02184:  BTFSS  xB5.7
02186:  BRA    218E
02188:  MOVF   xB4,F
0218A:  BTFSC  FD8.2
0218C:  BRA    2264
0218E:  MOVLB  0
02190:  RCALL  1D0E
02192:  MOVFF  01,1B6
02196:  MOVLB  1
02198:  MOVF   xB6,F
0219A:  BTFSC  FD8.2
0219C:  BRA    2264
0219E:  INCF   xB7,F
021A0:  MOVF   xB6,W
021A2:  SUBLW  20
021A4:  BC    2230
021A6:  MOVF   xB6,W
021A8:  SUBLW  58
021AA:  BZ    224E
021AC:  MOVF   xB6,W
021AE:  SUBLW  78
021B0:  BZ    224E
021B2:  MOVF   xB6,W
021B4:  SUBLW  2F
021B6:  BC    2260
021B8:  MOVLW  30
021BA:  SUBWF  xB6,F
021BC:  MOVF   xB6,W
021BE:  SUBLW  09
021C0:  BC    21E2
021C2:  MOVLW  07
021C4:  SUBWF  xB6,F
021C6:  MOVF   xB6,W
021C8:  SUBLW  09
021CA:  BC    2260
021CC:  MOVF   xB6,W
021CE:  SUBLW  0F
021D0:  BC    21E2
021D2:  MOVLW  20
021D4:  SUBWF  xB6,F
021D6:  MOVF   xB6,W
021D8:  SUBLW  09
021DA:  BC    2260
021DC:  MOVF   xB6,W
021DE:  SUBLW  0F
021E0:  BNC   2260
021E2:  MOVFF  1BB,1C0
021E6:  MOVFF  1BA,1BF
021EA:  MOVFF  1B9,1BE
021EE:  MOVFF  1B8,1BD
021F2:  CLRF   xC4
021F4:  CLRF   xC3
021F6:  CLRF   xC2
021F8:  MOVLW  10
021FA:  MOVWF  xC1
021FC:  MOVLB  0
021FE:  BRA    2100
02200:  MOVLB  1
02202:  MOVF   xB6,W
02204:  ADDWF  00,W
02206:  MOVWF  xB8
02208:  MOVLW  00
0220A:  ADDWFC 01,W
0220C:  MOVWF  xB9
0220E:  MOVLW  00
02210:  ADDWFC 02,W
02212:  MOVWF  xBA
02214:  MOVLW  00
02216:  ADDWFC 03,W
02218:  MOVWF  xBB
0221A:  BTFSC  xB5.7
0221C:  DECF   xB4,F
0221E:  BTFSC  xB5.0
02220:  BRA    222A
02222:  MOVF   xB6,F
02224:  BNZ   222A
02226:  BSF    xB5.1
02228:  BRA    2184
0222A:  BCF    xB5.1
0222C:  BSF    xB5.0
0222E:  BRA    2184
02230:  MOVFF  1B6,03
02234:  MOVLB  0
02236:  RCALL  215C
02238:  MOVF   01,F
0223A:  BTFSS  FD8.2
0223C:  BRA    2242
0223E:  MOVLB  1
02240:  BRA    2260
02242:  MOVLB  1
02244:  BTFSC  xB5.0
02246:  BRA    2264
02248:  BTFSC  xB5.1
0224A:  BRA    2264
0224C:  BRA    2184
0224E:  BTFSC  xB5.0
02250:  BRA    2260
02252:  BTFSS  xB5.1
02254:  BRA    2260
02256:  BTFSC  xB5.7
02258:  INCF   xB4,F
0225A:  BCF    xB5.1
0225C:  BSF    xB5.0
0225E:  BRA    2184
02260:  CLRF   xB7
02262:  BRA    2280
02264:  BTFSC  xB5.6
02266:  BRA    2280
02268:  MOVFF  1B3,FEA
0226C:  MOVFF  1B2,FE9
02270:  MOVFF  1B8,FEF
02274:  MOVFF  1B9,FEC
02278:  MOVFF  1BA,FEC
0227C:  MOVFF  1BB,FEC
02280:  MOVFF  1B7,01
02284:  MOVLB  0
02286:  RETURN 0
02288:  MOVLB  1
0228A:  CLRF   xB9
0228C:  CLRF   xBA
0228E:  BTFSS  xB7.7
02290:  BRA    2296
02292:  MOVF   xB6,F
02294:  BZ    2340
02296:  MOVLB  0
02298:  RCALL  1D0E
0229A:  MOVFF  01,1B8
0229E:  MOVLB  1
022A0:  MOVF   xB8,F
022A2:  BZ    2340
022A4:  INCF   xB9,F
022A6:  MOVF   xB8,W
022A8:  SUBLW  20
022AA:  BC    230C
022AC:  MOVF   xB8,W
022AE:  SUBLW  58
022B0:  BZ    232A
022B2:  MOVF   xB8,W
022B4:  SUBLW  78
022B6:  BZ    232A
022B8:  MOVF   xB8,W
022BA:  SUBLW  2F
022BC:  BC    233C
022BE:  MOVLW  30
022C0:  SUBWF  xB8,F
022C2:  MOVF   xB8,W
022C4:  SUBLW  09
022C6:  BC    22E8
022C8:  MOVLW  07
022CA:  SUBWF  xB8,F
022CC:  MOVF   xB8,W
022CE:  SUBLW  09
022D0:  BC    233C
022D2:  MOVF   xB8,W
022D4:  SUBLW  0F
022D6:  BC    22E8
022D8:  MOVLW  20
022DA:  SUBWF  xB8,F
022DC:  MOVF   xB8,W
022DE:  SUBLW  09
022E0:  BC    233C
022E2:  MOVF   xB8,W
022E4:  SUBLW  0F
022E6:  BNC   233C
022E8:  MOVF   xBA,W
022EA:  MULLW  10
022EC:  MOVFF  FF3,01
022F0:  MOVF   xB8,W
022F2:  ADDWF  01,W
022F4:  MOVWF  xBA
022F6:  BTFSC  xB7.7
022F8:  DECF   xB6,F
022FA:  BTFSC  xB7.0
022FC:  BRA    2306
022FE:  MOVF   xB8,F
02300:  BNZ   2306
02302:  BSF    xB7.1
02304:  BRA    228E
02306:  BCF    xB7.1
02308:  BSF    xB7.0
0230A:  BRA    228E
0230C:  MOVFF  1B8,03
02310:  MOVLB  0
02312:  RCALL  215C
02314:  MOVF   01,F
02316:  BTFSS  FD8.2
02318:  BRA    231E
0231A:  MOVLB  1
0231C:  BRA    233C
0231E:  MOVLB  1
02320:  BTFSC  xB7.0
02322:  BRA    2340
02324:  BTFSC  xB7.1
02326:  BRA    2340
02328:  BRA    228E
0232A:  BTFSC  xB7.0
0232C:  BRA    233C
0232E:  BTFSS  xB7.1
02330:  BRA    233C
02332:  BTFSC  xB7.7
02334:  INCF   xB6,F
02336:  BCF    xB7.1
02338:  BSF    xB7.0
0233A:  BRA    228E
0233C:  CLRF   xB9
0233E:  BRA    2350
02340:  BTFSC  xB7.6
02342:  BRA    2350
02344:  MOVFF  1B5,FEA
02348:  MOVFF  1B4,FE9
0234C:  MOVFF  1BA,FEF
02350:  MOVFF  1B9,01
02354:  MOVLB  0
02356:  RETURN 0
*
024CE:  CLRF   00
024D0:  CLRF   01
024D2:  MOVF   xB4,W
024D4:  BCF    FD8.0
024D6:  BTFSC  xB5.0
024D8:  ADDWF  00,F
024DA:  RRCF   00,F
024DC:  RRCF   01,F
024DE:  BTFSC  xB5.1
024E0:  ADDWF  00,F
024E2:  RRCF   00,F
024E4:  RRCF   01,F
024E6:  BTFSC  xB5.2
024E8:  ADDWF  00,F
024EA:  RRCF   00,F
024EC:  RRCF   01,F
024EE:  BTFSC  xB5.3
024F0:  ADDWF  00,F
024F2:  RRCF   00,F
024F4:  RRCF   01,F
024F6:  BTFSC  xB5.4
024F8:  ADDWF  00,F
024FA:  RRCF   00,F
024FC:  RRCF   01,F
024FE:  BTFSC  xB5.5
02500:  ADDWF  00,F
02502:  RRCF   00,F
02504:  RRCF   01,F
02506:  BTFSC  xB5.6
02508:  ADDWF  00,F
0250A:  RRCF   00,F
0250C:  RRCF   01,F
0250E:  BTFSC  xB5.7
02510:  ADDWF  00,F
02512:  RRCF   00,F
02514:  RRCF   01,F
02516:  GOTO   2566 (RETURN)
0251A:  CLRF   xB1
0251C:  CLRF   xB2
0251E:  BTFSS  xAC.7
02520:  BRA    2526
02522:  MOVF   xAB,F
02524:  BZ    25C8
02526:  CALL   1D0E
0252A:  MOVFF  01,B0
0252E:  MOVF   xB0,F
02530:  BZ    25C8
02532:  INCF   xB1,F
02534:  MOVF   xB0,W
02536:  SUBLW  20
02538:  BC    2596
0253A:  MOVF   xB0,W
0253C:  SUBLW  2D
0253E:  BZ    25AE
02540:  MOVF   xB0,W
02542:  SUBLW  2B
02544:  BZ    25B2
02546:  MOVF   xB0,W
02548:  SUBLW  2F
0254A:  BC    25C4
0254C:  MOVLW  30
0254E:  SUBWF  xB0,F
02550:  MOVF   xAF,W
02552:  SUBWF  xB0,W
02554:  BC    25C4
02556:  BTFSS  xAC.4
02558:  BRA    255C
0255A:  NEGF   xB0
0255C:  MOVFF  B2,B4
02560:  MOVFF  AF,B5
02564:  BRA    24CE
02566:  MOVF   01,W
02568:  MOVFF  01,B2
0256C:  MOVF   xB0,W
0256E:  ADDWF  xB2,F
02570:  BTFSC  xAC.7
02572:  DECF   xAB,F
02574:  MOVF   xAF,W
02576:  SUBLW  08
02578:  BNZ   2590
0257A:  BTFSC  xAC.0
0257C:  BRA    2588
0257E:  MOVF   xB0,F
02580:  BNZ   2590
02582:  BSF    xAC.1
02584:  BSF    xAC.0
02586:  BRA    251E
02588:  BTFSS  xAC.1
0258A:  BRA    2590
0258C:  BTFSC  xAC.7
0258E:  INCF   xAB,F
02590:  BSF    xAC.0
02592:  BCF    xAC.1
02594:  BRA    251E
02596:  MOVFF  B0,03
0259A:  RCALL  215C
0259C:  MOVF   01,F
0259E:  BZ    25C4
025A0:  BTFSC  xAC.0
025A2:  BRA    25C8
025A4:  BTFSC  xAC.1
025A6:  BRA    25C8
025A8:  BTFSC  xAC.2
025AA:  BRA    25C4
025AC:  BRA    251E
025AE:  BSF    xAC.4
025B0:  BRA    25B4
025B2:  BCF    xAC.4
025B4:  BTFSC  xAC.0
025B6:  BRA    25C4
025B8:  BTFSC  xAC.1
025BA:  BRA    25C4
025BC:  BTFSC  xAC.2
025BE:  BRA    25C4
025C0:  BSF    xAC.2
025C2:  BRA    251E
025C4:  CLRF   xB1
025C6:  BRA    25D8
025C8:  BTFSC  xAC.6
025CA:  BRA    25D8
025CC:  MOVFF  AE,FEA
025D0:  MOVFF  AD,FE9
025D4:  MOVFF  B2,FEF
025D8:  MOVFF  B1,01
025DC:  GOTO   26BA (RETURN)
*
02894:  MOVWF  00
02896:  SWAPF  00,W
02898:  ADDWF  00,W
0289A:  ANDLW  0F
0289C:  BTFSC  FD8.1
0289E:  ADDLW  16
028A0:  DAW   
028A2:  BTFSC  00.4
028A4:  ADDLW  15
028A6:  BTFSC  00.5
028A8:  ADDLW  30
028AA:  BTFSC  00.6
028AC:  ADDLW  60
028AE:  BTFSC  00.7
028B0:  ADDLW  20
028B2:  DAW   
028B4:  RETURN 0
028B6:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <Menu_function.c>
.................... //#include <MT25Q_.h>
.................... #device ADC=16
.................... #device ICD=TRUE
.................... 
.................... #FUSES NOWDT NOBROWNOUT
.................... #use delay(crystal=16Mhz, clock=16Mhz)
*
00F16:  CLRF   FEA
00F18:  MOVLW  82
00F1A:  MOVWF  FE9
00F1C:  MOVF   FEF,W
00F1E:  BZ    0F3C
00F20:  MOVLW  05
00F22:  MOVWF  01
00F24:  CLRF   00
00F26:  DECFSZ 00,F
00F28:  BRA    0F26
00F2A:  DECFSZ 01,F
00F2C:  BRA    0F24
00F2E:  MOVLW  2E
00F30:  MOVWF  00
00F32:  DECFSZ 00,F
00F34:  BRA    0F32
00F36:  BRA    0F38
00F38:  DECFSZ FEF,F
00F3A:  BRA    0F20
00F3C:  RETURN 0
....................  
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... #use rs232(baud=9600, parity=N, xmit=PIN_E5, rcv=PIN_E4, bits=8, stream=EPS) //EPS DATA ACQUISITION
*
02BFA:  BSF    F96.4
02BFC:  BTFSC  F84.4
02BFE:  BRA    2BFC
02C00:  MOVLW  08
02C02:  MOVWF  00
02C04:  CLRF   x83
02C06:  BSF    00.7
02C08:  BRA    2C26
02C0A:  BCF    00.7
02C0C:  BRA    2C26
02C0E:  BCF    FD8.0
02C10:  BTFSC  F84.4
02C12:  BSF    FD8.0
02C14:  RRCF   x83,F
02C16:  BSF    00.6
02C18:  BRA    2C26
02C1A:  BCF    00.6
02C1C:  DECFSZ 00,F
02C1E:  BRA    2C0E
02C20:  MOVFF  83,01
02C24:  BRA    2C3E
02C26:  MOVLW  84
02C28:  BTFSC  00.7
02C2A:  MOVLW  24
02C2C:  MOVWF  01
02C2E:  DECFSZ 01,F
02C30:  BRA    2C2E
02C32:  BRA    2C34
02C34:  BTFSC  00.7
02C36:  BRA    2C0A
02C38:  BTFSC  00.6
02C3A:  BRA    2C1A
02C3C:  BRA    2C0E
02C3E:  GOTO   2C48 (RETURN)
.................... #use rs232(baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8, stream=EXT) //MAIN RAB Rear access board 
*
00F3E:  BCF    F94.6
00F40:  BCF    F8B.6
00F42:  MOVLW  08
00F44:  MOVWF  01
00F46:  BRA    0F48
00F48:  NOP   
00F4A:  BSF    01.7
00F4C:  BRA    0F6E
00F4E:  BCF    01.7
00F50:  MOVLB  1
00F52:  RRCF   xC2,F
00F54:  MOVLB  0
00F56:  BTFSC  FD8.0
00F58:  BSF    F8B.6
00F5A:  BTFSS  FD8.0
00F5C:  BCF    F8B.6
00F5E:  BSF    01.6
00F60:  BRA    0F6E
00F62:  BCF    01.6
00F64:  DECFSZ 01,F
00F66:  BRA    0F50
00F68:  BRA    0F6A
00F6A:  NOP   
00F6C:  BSF    F8B.6
00F6E:  MOVLW  84
00F70:  MOVWF  FE9
00F72:  DECFSZ FE9,F
00F74:  BRA    0F72
00F76:  BRA    0F78
00F78:  NOP   
00F7A:  BTFSC  01.7
00F7C:  BRA    0F4E
00F7E:  BTFSC  01.6
00F80:  BRA    0F62
00F82:  RETURN 0
*
01D0E:  BSF    F94.7
01D10:  BTFSC  F82.7
01D12:  BRA    1D10
01D14:  MOVLW  08
01D16:  MOVWF  00
01D18:  MOVLB  1
01D1A:  CLRF   xBD
01D1C:  BSF    00.7
01D1E:  BRA    1D3C
01D20:  BCF    00.7
01D22:  BRA    1D3C
01D24:  BCF    FD8.0
01D26:  BTFSC  F82.7
01D28:  BSF    FD8.0
01D2A:  RRCF   xBD,F
01D2C:  BSF    00.6
01D2E:  BRA    1D3C
01D30:  BCF    00.6
01D32:  DECFSZ 00,F
01D34:  BRA    1D24
01D36:  MOVFF  1BD,01
01D3A:  BRA    1D54
01D3C:  MOVLW  84
01D3E:  BTFSC  00.7
01D40:  MOVLW  24
01D42:  MOVWF  01
01D44:  DECFSZ 01,F
01D46:  BRA    1D44
01D48:  BRA    1D4A
01D4A:  BTFSC  00.7
01D4C:  BRA    1D20
01D4E:  BTFSC  00.6
01D50:  BRA    1D30
01D52:  BRA    1D24
01D54:  MOVLB  0
01D56:  RETURN 0
.................... #use rs232(baud=57600, parity=N, xmit=PIN_D2, rcv=PIN_D3, bits=8, stream=COM, FORCE_SW) //MAIN COM Communication, send CW data 
.................... #use rs232(baud=57600, parity=N, xmit=PIN_F7, rcv=PIN_F6, bits=8, stream=CAM, FORCE_SW) //MAIN CAM Communicationx
.................... #use spi(MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6,  BAUD=10000, BITS=8, STREAM=MAIN_FM, MODE=0) //MAIN flash memory port
*
0108A:  MOVLB  1
0108C:  MOVF   xBE,W
0108E:  SUBLW  08
01090:  BZ    109A
01092:  MOVWF  xC0
01094:  RLCF   xBD,F
01096:  DECFSZ xC0,F
01098:  BRA    1094
0109A:  BSF    F96.0
0109C:  BCF    F96.6
0109E:  BCF    F96.1
010A0:  BCF    F8D.1
010A2:  MOVFF  1BE,1C0
010A6:  BTFSS  xBD.7
010A8:  BCF    F8D.6
010AA:  BTFSC  xBD.7
010AC:  BSF    F8D.6
010AE:  RLCF   xBD,F
010B0:  BSF    F8D.1
010B2:  MOVLW  41
010B4:  MOVWF  xC1
010B6:  DECFSZ xC1,F
010B8:  BRA    10B6
010BA:  RLCF   01,F
010BC:  BTFSS  F84.0
010BE:  BCF    01.0
010C0:  BTFSC  F84.0
010C2:  BSF    01.0
010C4:  BCF    F8D.1
010C6:  MOVLW  40
010C8:  MOVWF  xC1
010CA:  DECFSZ xC1,F
010CC:  BRA    10CA
010CE:  DECFSZ xC0,F
010D0:  BRA    10A6
010D2:  MOVLB  0
010D4:  RETURN 0
.................... #use spi(MASTER, CLK=PIN_B2, DI=PIN_B5, DO=PIN_B4,  BAUD=10000, BITS=8, STREAM=COM_FM, MODE=0) //COM shared flash memory port
.................... #use spi(MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1,  BAUD=10000, BITS=8, STREAM=ADCS_FM, MODE=0) //ADCS shared flash memory port, Camera module (ovcam,mvcam)
*
01730:  MOVLB  1
01732:  MOVF   x8E,W
01734:  SUBLW  08
01736:  BZ    1740
01738:  MOVWF  x90
0173A:  RLCF   x8D,F
0173C:  DECFSZ x90,F
0173E:  BRA    173A
01740:  BSF    F92.0
01742:  BCF    F92.1
01744:  BCF    F92.3
01746:  BCF    F89.3
01748:  MOVFF  18E,190
0174C:  BTFSS  x8D.7
0174E:  BCF    F89.1
01750:  BTFSC  x8D.7
01752:  BSF    F89.1
01754:  RLCF   x8D,F
01756:  BSF    F89.3
01758:  MOVLW  41
0175A:  MOVWF  x91
0175C:  DECFSZ x91,F
0175E:  BRA    175C
01760:  RLCF   01,F
01762:  BTFSS  F80.0
01764:  BCF    01.0
01766:  BTFSC  F80.0
01768:  BSF    01.0
0176A:  BCF    F89.3
0176C:  MOVLW  40
0176E:  MOVWF  x91
01770:  DECFSZ x91,F
01772:  BRA    1770
01774:  DECFSZ x90,F
01776:  BRA    174C
01778:  MOVLB  0
0177A:  RETURN 0
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... #use spi(MASTER, CLK=PIN_B2, DI=PIN_B5, DO=PIN_B4,  BAUD=10000, BITS=8, STREAM=COM_FM, MODE=0, FORCE_SW) //COM shared flash memory port
*
01660:  MOVLB  1
01662:  MOVF   x8E,W
01664:  SUBLW  08
01666:  BZ    1670
01668:  MOVWF  x90
0166A:  RLCF   x8D,F
0166C:  DECFSZ x90,F
0166E:  BRA    166A
01670:  BSF    F93.5
01672:  BCF    F93.4
01674:  BCF    F93.2
01676:  BCF    F8A.2
01678:  MOVFF  18E,190
0167C:  BTFSS  x8D.7
0167E:  BCF    F8A.4
01680:  BTFSC  x8D.7
01682:  BSF    F8A.4
01684:  RLCF   x8D,F
01686:  BSF    F8A.2
01688:  MOVLW  41
0168A:  MOVWF  x91
0168C:  DECFSZ x91,F
0168E:  BRA    168C
01690:  RLCF   01,F
01692:  BTFSS  F81.5
01694:  BCF    01.0
01696:  BTFSC  F81.5
01698:  BSF    01.0
0169A:  BCF    F8A.2
0169C:  MOVLW  40
0169E:  MOVWF  x91
016A0:  DECFSZ x91,F
016A2:  BRA    16A0
016A4:  DECFSZ x90,F
016A6:  BRA    167C
016A8:  MOVLB  0
016AA:  RETURN 0
.................... //SPI Stream alter name 
.................... #define SPIPORT MAIN_FM
.................... #define SPIPORT2 COM_FM
.................... #define SPIPORT3 ADCS_FM  //cam system futher added 
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
....................     
.................... //Flash memory chip select pins and mux control 
.................... #define CS_PIN_1 PIN_E2 //OBC_FLASH_SELECT
.................... #define CS_PIN_COM PIN_B3 //COM_CHIP_SELECT
.................... #define CS_PIN_ADCS PIN_A2 //ADCS_CHIP_SELECT
.................... #define MX_PIN_OVCAM PIN_G2 //OVCAM_MUX_SELECT
.................... #define MX_PIN_MVCAM PIN_G3 //MVCAM_MUX_SELECT
.................... #define MX_PIN_ADCS PIN_A5 //ADCS_MUX_SELECT
.................... #define MX_PIN_COM PIN_C4 //COM_MUX_SELECT
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... //mt25q flash memory command assigment
.................... #define READ_ID              0x9F
.................... #define READ_STATUS_REG      0x05 
.................... #define READ_DATA_BYTES      0x13  //0x03 for byte
.................... #define ENABLE_WRITE         0x06
.................... #define WRITE_PAGE           0x12  //0x02 for 3byte 
.................... #define ERASE_SECTOR         0xDC  //0xD8 for 3byte
.................... #define ERASE_4KB_SUBSECTOR  0x21
.................... #define ERASE_32KB_SUBSECTOR 0x5C
.................... #define DIE_ERASE            0xC4
.................... #define FAST_READ            0x0B
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... //memory maping     
.................... #define SHUTDOWN_COUNT_ADDRESS 0x00100011
.................... 
.................... //digtal control pins 
.................... #define EN_SUP_3V3_1 PIN_B0
.................... #define EN_SUP_3V3_2 PIN_G1
.................... #define EN_SUP_3V3_DAQ PIN_D0
.................... #define EN_SUP_UNREG PIN_B1
.................... #define EN_SUP_5V0 PIN_D1
.................... #define KILL_SWITCH PIN_A4
.................... #define MVCAM_PWR PIN_G0
.................... #define OVCAM_PWR PIN_D7
.................... #define ADCS_PWR PIN_D6
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //FLAG variable
.................... //    int8 EPS_UART = 0;
.................... //    int8 COM_UART = 0;
.................... //    int8 ADCS_HK_ADDRESS = 0x00010000;
.................... //    int8 ADCS_HK_ADDRESS_COUNTER = 0x00000000;
.................... //    int8 SHUT_DOWN_COUNT_ADD = 0x00010000;
.................... //    int8 ADCS_COMMAND = 0x02;
.................... //    unsigned char *READ_HK_ADCS[16];
....................     
....................     
.................... void WRITE_ENABLE_OF(){
....................  output_low(CS_PIN_1);
*
012C6:  BCF    F96.2
012C8:  BCF    F8D.2
....................  spi_xfer(SPIPORT,ENABLE_WRITE);                //Send 0x06
012CA:  MOVLW  06
012CC:  MOVLB  1
012CE:  MOVWF  xBD
012D0:  MOVLW  08
012D2:  MOVWF  xBE
012D4:  MOVLW  01
012D6:  MOVWF  xBF
012D8:  MOVLB  0
012DA:  RCALL  108A
....................  output_high(CS_PIN_1);  
012DC:  BCF    F96.2
012DE:  BSF    F8D.2
....................  return;
012E0:  GOTO   1416 (RETURN)
.................... }
.................... 
.................... void WRITE_ENABLE_OF_COM(){
....................      // Lower CS to select the SPI device
....................     output_low(CS_PIN_COM);
*
01804:  BCF    F93.3
01806:  BCF    F8A.3
....................     // Lower MX to connect to flash device
....................     output_low(MX_PIN_COM);
01808:  BCF    F94.4
0180A:  BCF    F8B.4
....................     spi_xfer(SPIPORT2,ENABLE_WRITE);                //Send 0x06
0180C:  MOVLW  06
0180E:  MOVLB  1
01810:  MOVWF  x8D
01812:  MOVLW  08
01814:  MOVWF  x8E
01816:  MOVLW  01
01818:  MOVWF  x8F
0181A:  MOVLB  0
0181C:  RCALL  1660
....................     output_high(CS_PIN_COM);
0181E:  BCF    F93.3
01820:  BSF    F8A.3
....................     output_high(MX_PIN_COM);
01822:  BCF    F94.4
01824:  BSF    F8B.4
....................  return;
01826:  GOTO   1896 (RETURN)
.................... }
.................... 
.................... void WRITE_ENABLE_OF_ADCS(){
....................     // Lower MX to connect to flash device
....................     output_low(MX_PIN_ADCS);
*
01A82:  BCF    F92.5
01A84:  BCF    F89.5
....................      // Lower CS to select the SPI device
....................     output_low(CS_PIN_ADCS);
01A86:  BCF    F92.2
01A88:  BCF    F89.2
....................     spi_xfer(SPIPORT3,ENABLE_WRITE);                //Send 0x06
01A8A:  MOVLW  06
01A8C:  MOVLB  1
01A8E:  MOVWF  x8D
01A90:  MOVLW  08
01A92:  MOVWF  x8E
01A94:  MOVLW  01
01A96:  MOVWF  x8F
01A98:  MOVLB  0
01A9A:  RCALL  1730
....................     output_high(CS_PIN_ADCS);  
01A9C:  BCF    F92.2
01A9E:  BSF    F89.2
....................     output_high(MX_PIN_ADCS);
01AA0:  BCF    F92.5
01AA2:  BSF    F89.5
....................  return;
01AA4:  GOTO   1B1E (RETURN)
.................... }
.................... 
.................... void WRITE_DATA_NBYTES(unsigned int32 ADDRESS, unsigned int8* data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS: 0x%08lx\n", ADDRESS);  // Print address as hex
*
013A0:  MOVLW  06
013A2:  MOVWF  FF6
013A4:  MOVLW  00
013A6:  MOVWF  FF7
013A8:  MOVLW  00
013AA:  MOVWF  FF8
013AC:  MOVLW  11
013AE:  MOVLB  1
013B0:  MOVWF  xBC
013B2:  MOVLB  0
013B4:  RCALL  11B6
013B6:  MOVFF  1B3,1BC
013BA:  MOVLW  57
013BC:  MOVLB  1
013BE:  MOVWF  xBD
013C0:  MOVLB  0
013C2:  RCALL  1280
013C4:  MOVFF  1B2,1BC
013C8:  MOVLW  57
013CA:  MOVLB  1
013CC:  MOVWF  xBD
013CE:  MOVLB  0
013D0:  RCALL  1280
013D2:  MOVFF  1B1,1BC
013D6:  MOVLW  57
013D8:  MOVLB  1
013DA:  MOVWF  xBD
013DC:  MOVLB  0
013DE:  RCALL  1280
013E0:  MOVFF  1B0,1BC
013E4:  MOVLW  57
013E6:  MOVLB  1
013E8:  MOVWF  xBD
013EA:  MOVLB  0
013EC:  RCALL  1280
013EE:  MOVLW  0A
013F0:  MOVLB  1
013F2:  MOVWF  xC2
013F4:  MOVLB  0
013F6:  RCALL  0F3E
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
013F8:  MOVLB  1
013FA:  MOVFF  1B3,1B7
013FE:  CLRF   03
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01400:  MOVFF  1B2,1B8
01404:  CLRF   03
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
01406:  MOVFF  1B1,1B9
0140A:  CLRF   03
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
0140C:  MOVFF  1B0,1BA
01410:  CLRF   03
....................     WRITE_ENABLE_OF();  // Enable write operation
01412:  MOVLB  0
01414:  BRA    12C6
.................... 
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_1);
01416:  BCF    F96.2
01418:  BCF    F8D.2
....................     delay_us(2);  // Small delay for stabilization
0141A:  MOVLW  02
0141C:  MOVWF  00
0141E:  DECFSZ 00,F
01420:  BRA    141E
01422:  NOP   
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT, WRITE_PAGE);
01424:  MOVLW  12
01426:  MOVLB  1
01428:  MOVWF  xBD
0142A:  MOVLW  08
0142C:  MOVWF  xBE
0142E:  MOVLW  01
01430:  MOVWF  xBF
01432:  MOVLB  0
01434:  RCALL  108A
....................     spi_xfer(SPIPORT, adsress[0]);
01436:  MOVFF  1B7,1BD
0143A:  MOVLW  08
0143C:  MOVLB  1
0143E:  MOVWF  xBE
01440:  MOVLW  01
01442:  MOVWF  xBF
01444:  MOVLB  0
01446:  RCALL  108A
....................     spi_xfer(SPIPORT, adsress[1]);
01448:  MOVFF  1B8,1BD
0144C:  MOVLW  08
0144E:  MOVLB  1
01450:  MOVWF  xBE
01452:  MOVLW  01
01454:  MOVWF  xBF
01456:  MOVLB  0
01458:  RCALL  108A
....................     spi_xfer(SPIPORT, adsress[2]);
0145A:  MOVFF  1B9,1BD
0145E:  MOVLW  08
01460:  MOVLB  1
01462:  MOVWF  xBE
01464:  MOVLW  01
01466:  MOVWF  xBF
01468:  MOVLB  0
0146A:  RCALL  108A
....................     spi_xfer(SPIPORT, adsress[3]);
0146C:  MOVFF  1BA,1BD
01470:  MOVLW  08
01472:  MOVLB  1
01474:  MOVWF  xBE
01476:  MOVLW  01
01478:  MOVWF  xBF
0147A:  MOVLB  0
0147C:  RCALL  108A
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
0147E:  MOVLB  1
01480:  CLRF   xBB
01482:  MOVF   xB6,W
01484:  SUBWF  xBB,W
01486:  BC    14D6
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
01488:  MOVF   xBB,W
0148A:  ADDWF  xB4,W
0148C:  MOVWF  FE9
0148E:  MOVLW  00
01490:  ADDWFC xB5,W
01492:  MOVWF  FEA
01494:  MOVFF  FEF,1BD
01498:  MOVLW  08
0149A:  MOVWF  xBE
0149C:  MOVLW  01
0149E:  MOVWF  xBF
014A0:  MOVLB  0
014A2:  RCALL  108A
....................         fprintf(EXT,"%02c", data[i]);    // Print each byte as hex (optional)
014A4:  MOVLB  1
014A6:  MOVF   xBB,W
014A8:  ADDWF  xB4,W
014AA:  MOVWF  FE9
014AC:  MOVLW  00
014AE:  ADDWFC xB5,W
014B0:  MOVWF  FEA
014B2:  MOVFF  FEF,1BC
014B6:  MOVLW  01
014B8:  MOVWF  xBD
014BA:  MOVLW  20
014BC:  MOVWF  xC2
014BE:  MOVLB  0
014C0:  RCALL  0F3E
014C2:  MOVLB  1
014C4:  DECFSZ xBD,F
014C6:  BRA    14BA
014C8:  MOVFF  1BC,1C2
014CC:  MOVLB  0
014CE:  RCALL  0F3E
014D0:  MOVLB  1
014D2:  INCF   xBB,F
014D4:  BRA    1482
....................     }
.................... //    for (int i = 0; i < data_number; i++) {
.................... //        spi_xfer(SPIPORT, data[i]);  // Send data byte
.................... //        fprintf(EXT,"%02d", data[i]);    // Print each byte as hex (optional)
.................... //    } for futhre use this is for displaying in hex format 
....................     
....................     output_high(CS_PIN_1);  // Deselect SPI device
014D6:  BCF    F96.2
014D8:  BSF    F8D.2
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN IN MAIN!\n", data_number);
014DA:  MOVLW  0A
014DC:  MOVWF  xC2
014DE:  MOVLB  0
014E0:  RCALL  0F3E
014E2:  MOVFF  1B6,1BC
014E6:  MOVLW  18
014E8:  MOVLB  1
014EA:  MOVWF  xBD
014EC:  MOVLB  0
014EE:  RCALL  12E4
014F0:  MOVLW  21
014F2:  MOVWF  FF6
014F4:  MOVLW  00
014F6:  MOVWF  FF7
014F8:  MOVLW  00
014FA:  MOVWF  FF8
014FC:  MOVLW  18
014FE:  MOVLB  1
01500:  MOVWF  xBC
01502:  MOVLB  0
01504:  RCALL  11B6
....................     return;
01506:  RETURN 0
.................... }
.................... 
.................... 
.................... void WRITE_DATA_NBYTES_COM(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS IN COM: 0x%08lx\n", ADDRESS);  // Print address as hex
*
0182A:  MOVLW  3A
0182C:  MOVWF  FF6
0182E:  MOVLW  00
01830:  MOVWF  FF7
01832:  MOVLW  00
01834:  MOVWF  FF8
01836:  MOVLW  18
01838:  MOVLB  1
0183A:  MOVWF  xBC
0183C:  MOVLB  0
0183E:  RCALL  11B6
01840:  MOVFF  84,1BC
01844:  MOVLW  57
01846:  MOVLB  1
01848:  MOVWF  xBD
0184A:  MOVLB  0
0184C:  RCALL  1280
0184E:  MOVFF  83,1BC
01852:  MOVLW  57
01854:  MOVLB  1
01856:  MOVWF  xBD
01858:  MOVLB  0
0185A:  RCALL  1280
0185C:  MOVFF  82,1BC
01860:  MOVLW  57
01862:  MOVLB  1
01864:  MOVWF  xBD
01866:  MOVLB  0
01868:  RCALL  1280
0186A:  MOVFF  81,1BC
0186E:  MOVLW  57
01870:  MOVLB  1
01872:  MOVWF  xBD
01874:  MOVLB  0
01876:  RCALL  1280
01878:  MOVLW  0A
0187A:  MOVLB  1
0187C:  MOVWF  xC2
0187E:  MOVLB  0
01880:  CALL   0F3E
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
01884:  MOVFF  84,88
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01888:  MOVFF  83,89
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
0188C:  MOVFF  82,8A
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
01890:  MOVFF  81,8B
....................     WRITE_ENABLE_OF_COM();  // Enable write operation
01894:  BRA    1804
.................... 
....................     // Lower MX to connect to flash device
....................     output_low(MX_PIN_COM);
01896:  BCF    F94.4
01898:  BCF    F8B.4
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_COM);
0189A:  BCF    F93.3
0189C:  BCF    F8A.3
....................     delay_us(2);  // Small delay for stabilization
0189E:  MOVLW  02
018A0:  MOVWF  00
018A2:  DECFSZ 00,F
018A4:  BRA    18A2
018A6:  NOP   
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT2, WRITE_PAGE);
018A8:  MOVLW  12
018AA:  MOVLB  1
018AC:  MOVWF  x8D
018AE:  MOVLW  08
018B0:  MOVWF  x8E
018B2:  MOVLW  01
018B4:  MOVWF  x8F
018B6:  MOVLB  0
018B8:  RCALL  1660
....................     spi_xfer(SPIPORT2, adsress[0]);
018BA:  MOVFF  88,18D
018BE:  MOVLW  08
018C0:  MOVLB  1
018C2:  MOVWF  x8E
018C4:  MOVLW  01
018C6:  MOVWF  x8F
018C8:  MOVLB  0
018CA:  RCALL  1660
....................     spi_xfer(SPIPORT2, adsress[1]);
018CC:  MOVFF  89,18D
018D0:  MOVLW  08
018D2:  MOVLB  1
018D4:  MOVWF  x8E
018D6:  MOVLW  01
018D8:  MOVWF  x8F
018DA:  MOVLB  0
018DC:  RCALL  1660
....................     spi_xfer(SPIPORT2, adsress[2]);
018DE:  MOVFF  8A,18D
018E2:  MOVLW  08
018E4:  MOVLB  1
018E6:  MOVWF  x8E
018E8:  MOVLW  01
018EA:  MOVWF  x8F
018EC:  MOVLB  0
018EE:  RCALL  1660
....................     spi_xfer(SPIPORT2, adsress[3]);
018F0:  MOVFF  8B,18D
018F4:  MOVLW  08
018F6:  MOVLB  1
018F8:  MOVWF  x8E
018FA:  MOVLW  01
018FC:  MOVWF  x8F
018FE:  MOVLB  0
01900:  RCALL  1660
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
01902:  CLRF   x8C
01904:  MOVF   x87,W
01906:  SUBWF  x8C,W
01908:  BC    1958
....................         spi_xfer(SPIPORT2, data[i]);  // Send data byte
0190A:  MOVF   x8C,W
0190C:  ADDWF  x85,W
0190E:  MOVWF  FE9
01910:  MOVLW  00
01912:  ADDWFC x86,W
01914:  MOVWF  FEA
01916:  MOVFF  FEF,18D
0191A:  MOVLW  08
0191C:  MOVLB  1
0191E:  MOVWF  x8E
01920:  MOVLW  01
01922:  MOVWF  x8F
01924:  MOVLB  0
01926:  RCALL  1660
....................         fprintf(EXT,"%02c", data[i]);    // Print each byte as hex (debugging purpose)
01928:  MOVF   x8C,W
0192A:  ADDWF  x85,W
0192C:  MOVWF  FE9
0192E:  MOVLW  00
01930:  ADDWFC x86,W
01932:  MOVWF  FEA
01934:  MOVFF  FEF,8D
01938:  MOVLW  01
0193A:  MOVWF  x8E
0193C:  MOVLW  20
0193E:  MOVLB  1
01940:  MOVWF  xC2
01942:  MOVLB  0
01944:  CALL   0F3E
01948:  DECFSZ x8E,F
0194A:  BRA    193C
0194C:  MOVFF  8D,1C2
01950:  CALL   0F3E
01954:  INCF   x8C,F
01956:  BRA    1904
....................     }
....................     
....................     output_high(CS_PIN_COM);  // Deselect SPI devices
01958:  BCF    F93.3
0195A:  BSF    F8A.3
....................     output_high(MX_PIN_COM);  //Deselect MUX from flash
0195C:  BCF    F94.4
0195E:  BSF    F8B.4
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN IN COM!\n", data_number);
01960:  MOVLW  0A
01962:  MOVLB  1
01964:  MOVWF  xC2
01966:  MOVLB  0
01968:  CALL   0F3E
0196C:  MOVFF  87,1BC
01970:  MOVLW  18
01972:  MOVLB  1
01974:  MOVWF  xBD
01976:  MOVLB  0
01978:  RCALL  12E4
0197A:  MOVLW  5D
0197C:  MOVWF  FF6
0197E:  MOVLW  00
01980:  MOVWF  FF7
01982:  MOVLW  00
01984:  MOVWF  FF8
01986:  MOVLW  17
01988:  MOVLB  1
0198A:  MOVWF  xBC
0198C:  MOVLB  0
0198E:  RCALL  11B6
01990:  GOTO   3008 (RETURN)
.................... }
.................... 
.................... void WRITE_DATA_NBYTES_ADCS(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS IN ADCS: 0x%08lx\n", ADDRESS);  // Print address as hex
*
01AA8:  MOVLW  76
01AAA:  MOVWF  FF6
01AAC:  MOVLW  00
01AAE:  MOVWF  FF7
01AB0:  MOVLW  00
01AB2:  MOVWF  FF8
01AB4:  MOVLW  19
01AB6:  MOVLB  1
01AB8:  MOVWF  xBC
01ABA:  MOVLB  0
01ABC:  CALL   11B6
01AC0:  MOVFF  84,1BC
01AC4:  MOVLW  57
01AC6:  MOVLB  1
01AC8:  MOVWF  xBD
01ACA:  MOVLB  0
01ACC:  CALL   1280
01AD0:  MOVFF  83,1BC
01AD4:  MOVLW  57
01AD6:  MOVLB  1
01AD8:  MOVWF  xBD
01ADA:  MOVLB  0
01ADC:  CALL   1280
01AE0:  MOVFF  82,1BC
01AE4:  MOVLW  57
01AE6:  MOVLB  1
01AE8:  MOVWF  xBD
01AEA:  MOVLB  0
01AEC:  CALL   1280
01AF0:  MOVFF  81,1BC
01AF4:  MOVLW  57
01AF6:  MOVLB  1
01AF8:  MOVWF  xBD
01AFA:  MOVLB  0
01AFC:  CALL   1280
01B00:  MOVLW  0A
01B02:  MOVLB  1
01B04:  MOVWF  xC2
01B06:  MOVLB  0
01B08:  CALL   0F3E
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
01B0C:  MOVFF  84,88
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01B10:  MOVFF  83,89
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
01B14:  MOVFF  82,8A
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
01B18:  MOVFF  81,8B
....................     WRITE_ENABLE_OF_ADCS();  // Enable write operation and MX and CS pins are included in here 
01B1C:  BRA    1A82
.................... 
....................     //Lower MX to connect to flash device
....................     output_low(MX_PIN_ADCS);
01B1E:  BCF    F92.5
01B20:  BCF    F89.5
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_ADCS);
01B22:  BCF    F92.2
01B24:  BCF    F89.2
....................     delay_us(2);  // Small delay for stabilization
01B26:  MOVLW  02
01B28:  MOVWF  00
01B2A:  DECFSZ 00,F
01B2C:  BRA    1B2A
01B2E:  NOP   
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT3, WRITE_PAGE);
01B30:  MOVLW  12
01B32:  MOVLB  1
01B34:  MOVWF  x8D
01B36:  MOVLW  08
01B38:  MOVWF  x8E
01B3A:  MOVLW  01
01B3C:  MOVWF  x8F
01B3E:  MOVLB  0
01B40:  RCALL  1730
....................     spi_xfer(SPIPORT3, adsress[0]);
01B42:  MOVFF  88,18D
01B46:  MOVLW  08
01B48:  MOVLB  1
01B4A:  MOVWF  x8E
01B4C:  MOVLW  01
01B4E:  MOVWF  x8F
01B50:  MOVLB  0
01B52:  RCALL  1730
....................     spi_xfer(SPIPORT3, adsress[1]);
01B54:  MOVFF  89,18D
01B58:  MOVLW  08
01B5A:  MOVLB  1
01B5C:  MOVWF  x8E
01B5E:  MOVLW  01
01B60:  MOVWF  x8F
01B62:  MOVLB  0
01B64:  RCALL  1730
....................     spi_xfer(SPIPORT3, adsress[2]);
01B66:  MOVFF  8A,18D
01B6A:  MOVLW  08
01B6C:  MOVLB  1
01B6E:  MOVWF  x8E
01B70:  MOVLW  01
01B72:  MOVWF  x8F
01B74:  MOVLB  0
01B76:  RCALL  1730
....................     spi_xfer(SPIPORT3, adsress[3]);
01B78:  MOVFF  8B,18D
01B7C:  MOVLW  08
01B7E:  MOVLB  1
01B80:  MOVWF  x8E
01B82:  MOVLW  01
01B84:  MOVWF  x8F
01B86:  MOVLB  0
01B88:  RCALL  1730
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
01B8A:  CLRF   x8C
01B8C:  MOVF   x87,W
01B8E:  SUBWF  x8C,W
01B90:  BC    1BE0
....................         spi_xfer(SPIPORT3, data[i]);  // Send data byte
01B92:  MOVF   x8C,W
01B94:  ADDWF  x85,W
01B96:  MOVWF  FE9
01B98:  MOVLW  00
01B9A:  ADDWFC x86,W
01B9C:  MOVWF  FEA
01B9E:  MOVFF  FEF,18D
01BA2:  MOVLW  08
01BA4:  MOVLB  1
01BA6:  MOVWF  x8E
01BA8:  MOVLW  01
01BAA:  MOVWF  x8F
01BAC:  MOVLB  0
01BAE:  RCALL  1730
....................         fprintf(EXT,"%02c", data[i]);    // Print each byte as hex (debugging purpose)
01BB0:  MOVF   x8C,W
01BB2:  ADDWF  x85,W
01BB4:  MOVWF  FE9
01BB6:  MOVLW  00
01BB8:  ADDWFC x86,W
01BBA:  MOVWF  FEA
01BBC:  MOVFF  FEF,8D
01BC0:  MOVLW  01
01BC2:  MOVWF  x8E
01BC4:  MOVLW  20
01BC6:  MOVLB  1
01BC8:  MOVWF  xC2
01BCA:  MOVLB  0
01BCC:  CALL   0F3E
01BD0:  DECFSZ x8E,F
01BD2:  BRA    1BC4
01BD4:  MOVFF  8D,1C2
01BD8:  CALL   0F3E
01BDC:  INCF   x8C,F
01BDE:  BRA    1B8C
....................     }
....................     
....................     output_high(CS_PIN_ADCS);  // Deselect SPI device5
01BE0:  BCF    F92.2
01BE2:  BSF    F89.2
....................     output_high(MX_PIN_ADCS);  //Deselect MUX from flash
01BE4:  BCF    F92.5
01BE6:  BSF    F89.5
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN IN ADCS!\n", data_number);
01BE8:  MOVLW  0A
01BEA:  MOVLB  1
01BEC:  MOVWF  xC2
01BEE:  MOVLB  0
01BF0:  CALL   0F3E
01BF4:  MOVFF  87,1BC
01BF8:  MOVLW  18
01BFA:  MOVLB  1
01BFC:  MOVWF  xBD
01BFE:  MOVLB  0
01C00:  CALL   12E4
01C04:  MOVLW  99
01C06:  MOVWF  FF6
01C08:  MOVLW  00
01C0A:  MOVWF  FF7
01C0C:  MOVLW  00
01C0E:  MOVWF  FF8
01C10:  MOVLW  18
01C12:  MOVLB  1
01C14:  MOVWF  xBC
01C16:  MOVLB  0
01C18:  CALL   11B6
01C1C:  GOTO   30AC (RETURN)
.................... }
....................  
.................... 
.................... char* READ_DATA_NBYTES(unsigned int32 ADDRESS, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................     unsigned char Data_return[256];  
.................... 
....................     // Byte extraction for a 32-bit address
....................     adsress[0] = (unsigned int8)((ADDRESS >> 24) & 0xFF);
*
010D6:  MOVLB  1
010D8:  MOVFF  AC,AE
....................     adsress[1] = (unsigned int8)((ADDRESS >> 16) & 0xFF);
010DC:  MOVFF  AC,1B5
010E0:  MOVFF  AB,AF
....................     adsress[2] = (unsigned int8)((ADDRESS >> 8) & 0xFF);
010E4:  MOVFF  AB,1B5
010E8:  MOVFF  AC,1B6
010EC:  MOVFF  AA,B0
....................     adsress[3] = (unsigned int8)(ADDRESS & 0xFF);
010F0:  MOVLB  0
010F2:  MOVFF  A9,B1
.................... 
....................     output_low(CS_PIN_1);  // Select SPI device
010F6:  BCF    F96.2
010F8:  BCF    F8D.2
.................... 
....................     // Send READ DATA COMMAND (0x13 or appropriate for your flash chip)
....................     spi_xfer(SPIPORT, READ_DATA_BYTES);
010FA:  MOVLW  13
010FC:  MOVLB  1
010FE:  MOVWF  xBD
01100:  MOVLW  08
01102:  MOVWF  xBE
01104:  MOVLW  01
01106:  MOVWF  xBF
01108:  MOVLB  0
0110A:  RCALL  108A
....................     // Send address bytes
....................     spi_xfer(SPIPORT, adsress[0]);
0110C:  MOVFF  AE,1BD
01110:  MOVLW  08
01112:  MOVLB  1
01114:  MOVWF  xBE
01116:  MOVLW  01
01118:  MOVWF  xBF
0111A:  MOVLB  0
0111C:  RCALL  108A
....................     spi_xfer(SPIPORT, adsress[1]);
0111E:  MOVFF  AF,1BD
01122:  MOVLW  08
01124:  MOVLB  1
01126:  MOVWF  xBE
01128:  MOVLW  01
0112A:  MOVWF  xBF
0112C:  MOVLB  0
0112E:  RCALL  108A
....................     spi_xfer(SPIPORT, adsress[2]);
01130:  MOVFF  B0,1BD
01134:  MOVLW  08
01136:  MOVLB  1
01138:  MOVWF  xBE
0113A:  MOVLW  01
0113C:  MOVWF  xBF
0113E:  MOVLB  0
01140:  RCALL  108A
....................     spi_xfer(SPIPORT, adsress[3]);
01142:  MOVFF  B1,1BD
01146:  MOVLW  08
01148:  MOVLB  1
0114A:  MOVWF  xBE
0114C:  MOVLW  01
0114E:  MOVWF  xBF
01150:  MOVLB  0
01152:  RCALL  108A
.................... 
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number && i < 256; i++) {  // Avoid overflow
01154:  MOVLB  1
01156:  CLRF   xB2
01158:  MOVLB  0
0115A:  MOVF   xAD,W
0115C:  MOVLB  1
0115E:  SUBWF  xB2,W
01160:  BC    11A0
....................         Data_return[i] = spi_xfer(SPIPORT, 0x00);  // Send dummy byte to receive data
01162:  CLRF   03
01164:  MOVF   xB2,W
01166:  ADDLW  B2
01168:  MOVWF  FE9
0116A:  MOVLW  00
0116C:  ADDWFC 03,W
0116E:  MOVWF  FEA
01170:  CLRF   xBD
01172:  MOVLW  08
01174:  MOVWF  xBE
01176:  MOVLW  01
01178:  MOVWF  xBF
0117A:  MOVLB  0
0117C:  RCALL  108A
0117E:  MOVFF  01,FEF
....................         fprintf(EXT, "%c", Data_return[i]);  // Print each byte as hex
01182:  CLRF   03
01184:  MOVLB  1
01186:  MOVF   xB2,W
01188:  ADDLW  B2
0118A:  MOVWF  FE9
0118C:  MOVLW  00
0118E:  ADDWFC 03,W
01190:  MOVWF  FEA
01192:  MOVFF  FEF,1C2
01196:  MOVLB  0
01198:  RCALL  0F3E
0119A:  MOVLB  1
0119C:  INCF   xB2,F
0119E:  BRA    1158
....................     }
.................... 
....................     output_high(CS_PIN_1);  // Deselect SPI device after reading
011A0:  BCF    F96.2
011A2:  BSF    F8D.2
....................     fprintf(EXT, "\n");
011A4:  MOVLW  0A
011A6:  MOVWF  xC2
011A8:  MOVLB  0
011AA:  RCALL  0F3E
.................... 
....................     return Data_return;
011AC:  MOVLW  B2
011AE:  MOVWF  01
011B0:  MOVLW  00
011B2:  MOVWF  02
011B4:  RETURN 0
.................... }
.................... 
.................... 
.................... 
.................... char* READ_DATA_NBYTES_COM(unsigned int32 ADDRESS, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................     unsigned char Data_return[256];  // 
....................     
....................     // Byte extraction for a 32-bit address
....................     adsress[0] = (unsigned int8)((ADDRESS >> 24) & 0xFF);
*
01994:  MOVLB  1
01996:  MOVFF  84,86
....................     adsress[1] = (unsigned int8)((ADDRESS >> 16) & 0xFF);
0199A:  MOVFF  84,18D
0199E:  MOVFF  83,87
....................     adsress[2] = (unsigned int8)((ADDRESS >> 8) & 0xFF);
019A2:  MOVFF  83,18D
019A6:  MOVFF  84,18E
019AA:  MOVFF  82,88
....................     adsress[3] = (unsigned int8)(ADDRESS & 0xFF);
019AE:  MOVLB  0
019B0:  MOVFF  81,89
.................... 
....................     output_low(MX_PIN_COM);  // Lower MX to connect to flash device
019B4:  BCF    F94.4
019B6:  BCF    F8B.4
....................     output_low(CS_PIN_COM);  // Select SPI device
019B8:  BCF    F93.3
019BA:  BCF    F8A.3
.................... 
....................     // Send READ DATA COMMAND
....................     spi_xfer(SPIPORT2, READ_DATA_BYTES);
019BC:  MOVLW  13
019BE:  MOVLB  1
019C0:  MOVWF  x8D
019C2:  MOVLW  08
019C4:  MOVWF  x8E
019C6:  MOVLW  01
019C8:  MOVWF  x8F
019CA:  MOVLB  0
019CC:  RCALL  1660
....................     // Send address bytes
....................     spi_xfer(SPIPORT2, adsress[0]);
019CE:  MOVFF  86,18D
019D2:  MOVLW  08
019D4:  MOVLB  1
019D6:  MOVWF  x8E
019D8:  MOVLW  01
019DA:  MOVWF  x8F
019DC:  MOVLB  0
019DE:  RCALL  1660
....................     spi_xfer(SPIPORT2, adsress[1]);
019E0:  MOVFF  87,18D
019E4:  MOVLW  08
019E6:  MOVLB  1
019E8:  MOVWF  x8E
019EA:  MOVLW  01
019EC:  MOVWF  x8F
019EE:  MOVLB  0
019F0:  RCALL  1660
....................     spi_xfer(SPIPORT2, adsress[2]);
019F2:  MOVFF  88,18D
019F6:  MOVLW  08
019F8:  MOVLB  1
019FA:  MOVWF  x8E
019FC:  MOVLW  01
019FE:  MOVWF  x8F
01A00:  MOVLB  0
01A02:  RCALL  1660
....................     spi_xfer(SPIPORT2, adsress[3]);
01A04:  MOVFF  89,18D
01A08:  MOVLW  08
01A0A:  MOVLB  1
01A0C:  MOVWF  x8E
01A0E:  MOVLW  01
01A10:  MOVWF  x8F
01A12:  MOVLB  0
01A14:  RCALL  1660
.................... 
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number && i < 256; i++) {
01A16:  MOVLB  1
01A18:  CLRF   x8A
01A1A:  MOVLB  0
01A1C:  MOVF   x85,W
01A1E:  MOVLB  1
01A20:  SUBWF  x8A,W
01A22:  BC    1A64
....................         Data_return[i] = spi_xfer(SPIPORT2, 0x00);  // Send dummy byte to receive data
01A24:  CLRF   03
01A26:  MOVF   x8A,W
01A28:  ADDLW  8A
01A2A:  MOVWF  FE9
01A2C:  MOVLW  00
01A2E:  ADDWFC 03,W
01A30:  MOVWF  FEA
01A32:  CLRF   x8D
01A34:  MOVLW  08
01A36:  MOVWF  x8E
01A38:  MOVLW  01
01A3A:  MOVWF  x8F
01A3C:  MOVLB  0
01A3E:  RCALL  1660
01A40:  MOVFF  01,FEF
....................         fprintf(EXT, "%c", Data_return[i]);         // Print each byte
01A44:  CLRF   03
01A46:  MOVLB  1
01A48:  MOVF   x8A,W
01A4A:  ADDLW  8A
01A4C:  MOVWF  FE9
01A4E:  MOVLW  00
01A50:  ADDWFC 03,W
01A52:  MOVWF  FEA
01A54:  MOVFF  FEF,1C2
01A58:  MOVLB  0
01A5A:  CALL   0F3E
01A5E:  MOVLB  1
01A60:  INCF   x8A,F
01A62:  BRA    1A1A
....................     }
.................... 
....................     output_high(CS_PIN_COM);  // Deselect SPI device
01A64:  BCF    F93.3
01A66:  BSF    F8A.3
....................     output_high(MX_PIN_COM);  // Deselect MUX from flash
01A68:  BCF    F94.4
01A6A:  BSF    F8B.4
....................     fprintf(EXT, "\n");
01A6C:  MOVLW  0A
01A6E:  MOVWF  xC2
01A70:  MOVLB  0
01A72:  CALL   0F3E
.................... 
....................     return Data_return;
01A76:  MOVLW  8A
01A78:  MOVWF  01
01A7A:  MOVLW  00
01A7C:  MOVWF  02
01A7E:  GOTO   302A (RETURN)
.................... }
.................... 
.................... char* READ_DATA_NBYTES_ADCS(unsigned int32 ADDRESS, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................     unsigned char Data_return[256];  // Adjust size based on expected max data_number
.................... 
....................     // Byte extraction for a 32-bit address
....................     adsress[0] = (unsigned int8)((ADDRESS >> 24) & 0xFF);
*
01C20:  MOVLB  1
01C22:  MOVFF  84,86
....................     adsress[1] = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01C26:  MOVFF  84,18D
01C2A:  MOVFF  83,87
....................     adsress[2] = (unsigned int8)((ADDRESS >> 8) & 0xFF);
01C2E:  MOVFF  83,18D
01C32:  MOVFF  84,18E
01C36:  MOVFF  82,88
....................     adsress[3] = (unsigned int8)(ADDRESS & 0xFF);
01C3A:  MOVLB  0
01C3C:  MOVFF  81,89
.................... 
....................     output_low(MX_PIN_ADCS);  // Lower MX to connect to flash device
01C40:  BCF    F92.5
01C42:  BCF    F89.5
....................     output_low(CS_PIN_ADCS);  // Select SPI device
01C44:  BCF    F92.2
01C46:  BCF    F89.2
.................... 
....................     // Send READ DATA COMMAND
....................     spi_xfer(SPIPORT3, READ_DATA_BYTES);
01C48:  MOVLW  13
01C4A:  MOVLB  1
01C4C:  MOVWF  x8D
01C4E:  MOVLW  08
01C50:  MOVWF  x8E
01C52:  MOVLW  01
01C54:  MOVWF  x8F
01C56:  MOVLB  0
01C58:  RCALL  1730
....................     // Send address bytes
....................     spi_xfer(SPIPORT3, adsress[0]);
01C5A:  MOVFF  86,18D
01C5E:  MOVLW  08
01C60:  MOVLB  1
01C62:  MOVWF  x8E
01C64:  MOVLW  01
01C66:  MOVWF  x8F
01C68:  MOVLB  0
01C6A:  RCALL  1730
....................     spi_xfer(SPIPORT3, adsress[1]);
01C6C:  MOVFF  87,18D
01C70:  MOVLW  08
01C72:  MOVLB  1
01C74:  MOVWF  x8E
01C76:  MOVLW  01
01C78:  MOVWF  x8F
01C7A:  MOVLB  0
01C7C:  RCALL  1730
....................     spi_xfer(SPIPORT3, adsress[2]);
01C7E:  MOVFF  88,18D
01C82:  MOVLW  08
01C84:  MOVLB  1
01C86:  MOVWF  x8E
01C88:  MOVLW  01
01C8A:  MOVWF  x8F
01C8C:  MOVLB  0
01C8E:  RCALL  1730
....................     spi_xfer(SPIPORT3, adsress[3]);
01C90:  MOVFF  89,18D
01C94:  MOVLW  08
01C96:  MOVLB  1
01C98:  MOVWF  x8E
01C9A:  MOVLW  01
01C9C:  MOVWF  x8F
01C9E:  MOVLB  0
01CA0:  RCALL  1730
.................... 
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number && i < 256; i++) {
01CA2:  MOVLB  1
01CA4:  CLRF   x8A
01CA6:  MOVLB  0
01CA8:  MOVF   x85,W
01CAA:  MOVLB  1
01CAC:  SUBWF  x8A,W
01CAE:  BC    1CF0
....................         Data_return[i] = spi_xfer(SPIPORT3, 0x00);  // Send dummy byte to receive data
01CB0:  CLRF   03
01CB2:  MOVF   x8A,W
01CB4:  ADDLW  8A
01CB6:  MOVWF  FE9
01CB8:  MOVLW  00
01CBA:  ADDWFC 03,W
01CBC:  MOVWF  FEA
01CBE:  CLRF   x8D
01CC0:  MOVLW  08
01CC2:  MOVWF  x8E
01CC4:  MOVLW  01
01CC6:  MOVWF  x8F
01CC8:  MOVLB  0
01CCA:  RCALL  1730
01CCC:  MOVFF  01,FEF
....................         fprintf(EXT, "%c", Data_return[i]);         // Print each byte
01CD0:  CLRF   03
01CD2:  MOVLB  1
01CD4:  MOVF   x8A,W
01CD6:  ADDLW  8A
01CD8:  MOVWF  FE9
01CDA:  MOVLW  00
01CDC:  ADDWFC 03,W
01CDE:  MOVWF  FEA
01CE0:  MOVFF  FEF,1C2
01CE4:  MOVLB  0
01CE6:  CALL   0F3E
01CEA:  MOVLB  1
01CEC:  INCF   x8A,F
01CEE:  BRA    1CA6
....................     }
....................     
....................     output_high(CS_PIN_ADCS);  // Deselect SPI device
01CF0:  BCF    F92.2
01CF2:  BSF    F89.2
....................     output_high(MX_PIN_ADCS);  // Deselect MUX from flash
01CF4:  BCF    F92.5
01CF6:  BSF    F89.5
....................     fprintf(EXT, "\n");
01CF8:  MOVLW  0A
01CFA:  MOVWF  xC2
01CFC:  MOVLB  0
01CFE:  CALL   0F3E
.................... 
.................... 
....................     return Data_return;
01D02:  MOVLW  8A
01D04:  MOVWF  01
01D06:  MOVLW  00
01D08:  MOVWF  02
01D0A:  GOTO   30CE (RETURN)
.................... }
.................... 
.................... 
.................... int8 READ_DATA_BYTES_ADCS(unsigned int32 ADDRESS) {
....................     unsigned int8 adsress[4];
....................     unsigned int8 Data_return;
....................    
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
.................... 
....................     output_low(MX_PIN_ADCS);  // Lower MX to connect to flash device
....................     output_low(CS_PIN_ADCS);  // Select SPI device
.................... 
....................     // Send READ DATA COMMAND (0x13 or appropriate for your flash chip)
....................     spi_xfer(SPIPORT3, READ_DATA_BYTES);
....................     // Send address bytes
....................     spi_xfer(SPIPORT3, adsress[0]);
....................     spi_xfer(SPIPORT3, adsress[1]);
....................     spi_xfer(SPIPORT3, adsress[2]);
....................     spi_xfer(SPIPORT3, adsress[3]);
....................     // Read the requested number of bytes
....................         Data_return = spi_xfer(SPIPORT3, 0x00);  // Send dummy byte to receive data
.................... 
....................     output_high(CS_PIN_ADCS);  // Deselect SPI device after reading
....................     output_high(MX_PIN_ADCS);  //Deselect MUX from flash
....................     return Data_return;
.................... }
.................... void READ_CHIP_ID_OF() {
....................     int8 chip_id[8];
....................     output_low(CS_PIN_1);  // Lower the CS PIN
*
015E6:  BCF    F96.2
015E8:  BCF    F8D.2
....................     spi_xfer(SPIPORT, READ_ID);  // READ ID COMMAND (0x9F)
015EA:  MOVLW  9F
015EC:  MOVLB  1
015EE:  MOVWF  xBD
015F0:  MOVLW  08
015F2:  MOVWF  xBE
015F4:  MOVLW  01
015F6:  MOVWF  xBF
015F8:  MOVLB  0
015FA:  RCALL  108A
....................     
....................     // Receive 8 bytes of chip ID
....................     for (int i = 0; i < 8; i++) {
015FC:  CLRF   xB1
015FE:  MOVF   xB1,W
01600:  SUBLW  07
01602:  BNC   1650
....................         chip_id[i] = spi_xfer(SPIPORT, 0x00);  // Send dummy bytes to receive data
01604:  CLRF   03
01606:  MOVF   xB1,W
01608:  ADDLW  A9
0160A:  MOVWF  FE9
0160C:  MOVLW  00
0160E:  ADDWFC 03,W
01610:  MOVWF  FEA
01612:  MOVLB  1
01614:  CLRF   xBD
01616:  MOVLW  08
01618:  MOVWF  xBE
0161A:  MOVLW  01
0161C:  MOVWF  xBF
0161E:  MOVLB  0
01620:  RCALL  108A
01622:  MOVFF  01,FEF
....................         fprintf(EXT, "%02X ", chip_id[i]);
01626:  CLRF   03
01628:  MOVF   xB1,W
0162A:  ADDLW  A9
0162C:  MOVWF  FE9
0162E:  MOVLW  00
01630:  ADDWFC 03,W
01632:  MOVWF  FEA
01634:  MOVFF  FEF,1BC
01638:  MOVLW  37
0163A:  MOVLB  1
0163C:  MOVWF  xBD
0163E:  MOVLB  0
01640:  RCALL  1280
01642:  MOVLW  20
01644:  MOVLB  1
01646:  MOVWF  xC2
01648:  MOVLB  0
0164A:  RCALL  0F3E
0164C:  INCF   xB1,F
0164E:  BRA    15FE
....................     }
....................     fprintf(EXT,"\n");
01650:  MOVLW  0A
01652:  MOVLB  1
01654:  MOVWF  xC2
01656:  MOVLB  0
01658:  RCALL  0F3E
.................... 
....................     output_high(CS_PIN_1);  // Raise CS PIN back
0165A:  BCF    F96.2
0165C:  BSF    F8D.2
0165E:  RETURN 0
.................... }
.................... void READ_CHIP_ID_OF_COM() {
....................     int8 chip_id[8];
....................     output_low(MX_PIN_COM);
*
016AC:  BCF    F94.4
016AE:  BCF    F8B.4
....................     output_low(CS_PIN_COM);  // Lower the CS PIN
016B0:  BCF    F93.3
016B2:  BCF    F8A.3
....................     spi_xfer(SPIPORT2, READ_ID);  // READ ID COMMAND (0x9F)
016B4:  MOVLW  9F
016B6:  MOVLB  1
016B8:  MOVWF  x8D
016BA:  MOVLW  08
016BC:  MOVWF  x8E
016BE:  MOVLW  01
016C0:  MOVWF  x8F
016C2:  MOVLB  0
016C4:  RCALL  1660
....................     
....................     // Receive 8 bytes of chip ID
....................     for (int i = 0; i < 8; i++) {
016C6:  CLRF   x89
016C8:  MOVF   x89,W
016CA:  SUBLW  07
016CC:  BNC   171A
....................         chip_id[i] = spi_xfer(SPIPORT2, 0x00);  // Send dummy bytes to receive data
016CE:  CLRF   03
016D0:  MOVF   x89,W
016D2:  ADDLW  81
016D4:  MOVWF  FE9
016D6:  MOVLW  00
016D8:  ADDWFC 03,W
016DA:  MOVWF  FEA
016DC:  MOVLB  1
016DE:  CLRF   x8D
016E0:  MOVLW  08
016E2:  MOVWF  x8E
016E4:  MOVLW  01
016E6:  MOVWF  x8F
016E8:  MOVLB  0
016EA:  RCALL  1660
016EC:  MOVFF  01,FEF
....................         fprintf(EXT, "%02X ", chip_id[i]);
016F0:  CLRF   03
016F2:  MOVF   x89,W
016F4:  ADDLW  81
016F6:  MOVWF  FE9
016F8:  MOVLW  00
016FA:  ADDWFC 03,W
016FC:  MOVWF  FEA
016FE:  MOVFF  FEF,1BC
01702:  MOVLW  37
01704:  MOVLB  1
01706:  MOVWF  xBD
01708:  MOVLB  0
0170A:  RCALL  1280
0170C:  MOVLW  20
0170E:  MOVLB  1
01710:  MOVWF  xC2
01712:  MOVLB  0
01714:  RCALL  0F3E
01716:  INCF   x89,F
01718:  BRA    16C8
....................     }
....................     fprintf(EXT,"\n");
0171A:  MOVLW  0A
0171C:  MOVLB  1
0171E:  MOVWF  xC2
01720:  MOVLB  0
01722:  RCALL  0F3E
.................... 
....................     output_high(CS_PIN_COM);  // Raise CS PIN back
01724:  BCF    F93.3
01726:  BSF    F8A.3
....................     output_high(MX_PIN_COM);
01728:  BCF    F94.4
0172A:  BSF    F8B.4
0172C:  GOTO   2F04 (RETURN)
.................... }
.................... 
.................... void READ_CHIP_ID_OF_ADCS() {
....................     int8 chip_id[8];
....................     output_low(MX_PIN_ADCS);
*
0177C:  BCF    F92.5
0177E:  BCF    F89.5
....................     output_low(CS_PIN_ADCS);  // Lower the CS PIN
01780:  BCF    F92.2
01782:  BCF    F89.2
....................     spi_xfer(SPIPORT3, READ_ID);  // READ ID COMMAND (0x9F)
01784:  MOVLW  9F
01786:  MOVLB  1
01788:  MOVWF  x8D
0178A:  MOVLW  08
0178C:  MOVWF  x8E
0178E:  MOVLW  01
01790:  MOVWF  x8F
01792:  MOVLB  0
01794:  RCALL  1730
....................     
....................     // Receive 8 bytes of chip ID
....................     for (int i = 0; i < 8; i++) {
01796:  CLRF   x89
01798:  MOVF   x89,W
0179A:  SUBLW  07
0179C:  BNC   17EC
....................         chip_id[i] = spi_xfer(SPIPORT3, 0x00);  // Send dummy bytes to receive data
0179E:  CLRF   03
017A0:  MOVF   x89,W
017A2:  ADDLW  81
017A4:  MOVWF  FE9
017A6:  MOVLW  00
017A8:  ADDWFC 03,W
017AA:  MOVWF  FEA
017AC:  MOVLB  1
017AE:  CLRF   x8D
017B0:  MOVLW  08
017B2:  MOVWF  x8E
017B4:  MOVLW  01
017B6:  MOVWF  x8F
017B8:  MOVLB  0
017BA:  RCALL  1730
017BC:  MOVFF  01,FEF
....................         fprintf(EXT, "%02X ", chip_id[i]);
017C0:  CLRF   03
017C2:  MOVF   x89,W
017C4:  ADDLW  81
017C6:  MOVWF  FE9
017C8:  MOVLW  00
017CA:  ADDWFC 03,W
017CC:  MOVWF  FEA
017CE:  MOVFF  FEF,1BC
017D2:  MOVLW  37
017D4:  MOVLB  1
017D6:  MOVWF  xBD
017D8:  MOVLB  0
017DA:  RCALL  1280
017DC:  MOVLW  20
017DE:  MOVLB  1
017E0:  MOVWF  xC2
017E2:  MOVLB  0
017E4:  CALL   0F3E
017E8:  INCF   x89,F
017EA:  BRA    1798
....................     }
....................     fprintf(EXT,"\n");
017EC:  MOVLW  0A
017EE:  MOVLB  1
017F0:  MOVWF  xC2
017F2:  MOVLB  0
017F4:  CALL   0F3E
.................... 
....................     output_high(CS_PIN_ADCS);  // Raise CS PIN back
017F8:  BCF    F92.2
017FA:  BSF    F89.2
....................     output_high(MX_PIN_ADCS);
017FC:  BCF    F92.5
017FE:  BSF    F89.5
01800:  GOTO   2F18 (RETURN)
.................... }
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... //Command operation
.................... //void SEND_COMMAND_ADCS(void){
.................... //    WRITE_DATA_NBYTES_ADCS(ADCS_HK_ADDRESS, ADCS_COMMAND,1);
.................... //}
.................... ////void READ_HK_ADCS(void){
.................... ////    int8 state_of_pin = 0;
.................... ////    
.................... ////    state_of_pin = input_state(EN_SUP_3V3_2);
.................... ////    if(state_of_pin = FALSE){ 
.................... ////        READ_DATA_NBYTES_ADCS(ADCS_HK_ADDRESS[16], READ_HK_ADCS, 16);
.................... ////        
.................... ////    }
.................... ////}
.................... //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////EEPROM operation 
.................... ////thus functions used to store essential data order to prevent loosing it in unexpected shutdowns  
.................... //void EEPROM_
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... // Main menu functions
.................... 
.................... void startup_freeze(){
....................     delay_ms(2000);
*
00FAC:  MOVLW  08
00FAE:  MOVWF  x81
00FB0:  MOVLW  FA
00FB2:  MOVWF  x82
00FB4:  RCALL  0F16
00FB6:  DECFSZ x81,F
00FB8:  BRA    0FB0
....................     fprintf(EXT, "POWER ON!\n");
00FBA:  MOVLW  B2
00FBC:  MOVWF  FF6
00FBE:  MOVLW  00
00FC0:  MOVWF  FF7
00FC2:  MOVLW  00
00FC4:  MOVWF  FF8
00FC6:  RCALL  0F84
....................     //EPS power control all disabled when startup, using menu function will turn on
....................     output_low(EN_SUP_3V3_1);
00FC8:  BCF    F93.0
00FCA:  BCF    F8A.0
....................     output_low(EN_SUP_3V3_2 );
00FCC:  BCF    F98.1
00FCE:  BCF    F8F.1
....................     output_low(EN_SUP_3V3_DAQ);
00FD0:  BCF    F95.0
00FD2:  BCF    F8C.0
....................     output_low(EN_SUP_UNREG);
00FD4:  BCF    F93.1
00FD6:  BCF    F8A.1
....................     output_low(EN_SUP_5V0);
00FD8:  BCF    F95.1
00FDA:  BCF    F8C.1
....................     output_low(MVCAM_PWR);
00FDC:  BCF    F98.0
00FDE:  BCF    F8F.0
....................     output_low(OVCAM_PWR);
00FE0:  BCF    F95.7
00FE2:  BCF    F8C.7
....................     output_high(ADCS_PWR); //turns on the power of ADCS instantly 
00FE4:  BCF    F95.6
00FE6:  BSF    F8C.6
....................     output_high(CS_PIN_1);
00FE8:  BCF    F96.2
00FEA:  BSF    F8D.2
....................     output_high(CS_PIN_COM );
00FEC:  BCF    F93.3
00FEE:  BSF    F8A.3
....................     output_high(CS_PIN_ADCS );
00FF0:  BCF    F92.2
00FF2:  BSF    F89.2
....................     output_high(MX_PIN_OVCAM );
00FF4:  BCF    F98.2
00FF6:  BSF    F8F.2
....................     output_high(MX_PIN_MVCAM );
00FF8:  BCF    F98.3
00FFA:  BSF    F8F.3
....................     output_high(MX_PIN_ADCS );
00FFC:  BCF    F92.5
00FFE:  BSF    F89.5
....................     output_high(MX_PIN_COM );
01000:  BCF    F94.4
01002:  BSF    F8B.4
....................     
....................     fprintf(EXT, "Digital pin out configured \n");
01004:  MOVLW  BE
01006:  MOVWF  FF6
01008:  MOVLW  00
0100A:  MOVWF  FF7
0100C:  MOVLW  00
0100E:  MOVWF  FF8
01010:  RCALL  0F84
01012:  GOTO   2ED4 (RETURN)
....................         
.................... }
.................... 
.................... void RTC_initialize(){
....................     setup_lcd(LCD_DISABLED);
*
01028:  MOVLB  E
0102A:  CLRF   xD6
0102C:  CLRF   xD7
0102E:  CLRF   xDA
01030:  CLRF   xD8
01032:  CLRF   xD9
01034:  MOVLB  F
....................     rtc_time_t read_clock;
....................     setup_rtc(RTC_ENABLE | RTC_CLOCK_SOSC | RTC_CLOCK_INT, 0);
01036:  MOVLB  F
01038:  MOVLW  55
0103A:  MOVWF  F7E
0103C:  MOVLW  AA
0103E:  MOVWF  F7E
01040:  BSF    x5F.5
01042:  CLRF   x5E
01044:  MOVLW  04
01046:  MOVWF  x57
01048:  MOVLW  80
0104A:  MOVWF  x5F
0104C:  BCF    x5F.5
....................     rtc_read(&read_clock);
0104E:  BSF    x5F.0
01050:  BSF    x5F.1
01052:  CLRF   FEA
01054:  MOVLW  81
01056:  MOVWF  FE9
01058:  MOVLW  04
0105A:  MOVWF  01
0105C:  MOVF   x5C,W
0105E:  MOVLB  0
01060:  RCALL  1016
01062:  MOVWF  FEE
01064:  MOVLB  F
01066:  MOVF   x5D,W
01068:  MOVLB  0
0106A:  RCALL  1016
0106C:  MOVWF  FEE
0106E:  DECFSZ 01,F
01070:  BRA    1074
01072:  BRA    1078
01074:  MOVLB  F
01076:  BRA    105C
....................     fprintf(EXT, "RTCC setup finished!\n");
01078:  MOVLW  DC
0107A:  MOVWF  FF6
0107C:  MOVLW  00
0107E:  MOVWF  FF7
01080:  MOVLW  00
01082:  MOVWF  FF8
01084:  RCALL  0F84
01086:  GOTO   2ED8 (RETURN)
.................... 
.................... }
.................... 
.................... //this function will receive from EPS and sent to external port of EXT single character by character   
.................... void uart_repeater() {
....................     char received_data;
.................... 
....................     while (TRUE) {
....................         // Check if data is available on the EPS stream
....................         if (kbhit(EPS)) {
*
02C42:  BTFSC  F84.4
02C44:  BRA    2C54
....................             // Read one byte from the EPS stream
....................             received_data = fgetc(EPS);
02C46:  BRA    2BFA
02C48:  MOVFF  01,82
.................... 
....................             // Send the received byte to the EXT stream
....................             fputc(received_data, EXT);
02C4C:  MOVFF  82,1C2
02C50:  CALL   0F3E
....................         }
02C54:  BRA    2C42
....................     }
02C56:  GOTO   2DE8 (RETURN)
.................... }
.................... 
.................... //#define SHUTDOWN_COUNT_ADDRESS  0x00001000  // Address where shutdown count is stored
.................... // this function is not working correctly need to fix it 
.................... 
.................... int8 update_shutdown_count(void) {
....................     fprintf(EXT, "Shutdown count started\n");
*
01508:  MOVLW  F2
0150A:  MOVWF  FF6
0150C:  MOVLW  00
0150E:  MOVWF  FF7
01510:  MOVLW  00
01512:  MOVWF  FF8
01514:  RCALL  0F84
.................... 
....................     // Read shutdown count directly from memory
....................     unsigned char shutdown_count[1];
....................     shutdown_count[0] = READ_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, 1); // Updated call
01516:  CLRF   xAC
01518:  MOVLW  10
0151A:  MOVWF  xAB
0151C:  CLRF   xAA
0151E:  MOVLW  11
01520:  MOVWF  xA9
01522:  MOVLW  01
01524:  MOVWF  xAD
01526:  RCALL  10D6
01528:  MOVFF  01,81
....................     delay_ms(10);
0152C:  MOVLW  0A
0152E:  MOVWF  x82
01530:  RCALL  0F16
.................... 
....................     fprintf(EXT, "Read shutdown count: %u\n", shutdown_count[0]);
01532:  MOVLW  0A
01534:  MOVWF  FF6
01536:  MOVLW  01
01538:  MOVWF  FF7
0153A:  MOVLW  00
0153C:  MOVWF  FF8
0153E:  MOVLW  15
01540:  MOVLB  1
01542:  MOVWF  xBC
01544:  MOVLB  0
01546:  RCALL  11B6
01548:  MOVFF  81,95
0154C:  MOVLW  1B
0154E:  MOVWF  x96
01550:  RCALL  1212
01552:  MOVLW  0A
01554:  MOVLB  1
01556:  MOVWF  xC2
01558:  MOVLB  0
0155A:  RCALL  0F3E
.................... 
....................     shutdown_count[0]++;  // Increment the shutdown count
0155C:  INCF   x81,F
....................     fprintf(EXT, "Incremented shutdown count: %u\n", shutdown_count[0]);
0155E:  MOVLW  24
01560:  MOVWF  FF6
01562:  MOVLW  01
01564:  MOVWF  FF7
01566:  MOVLW  00
01568:  MOVWF  FF8
0156A:  MOVLW  1C
0156C:  MOVLB  1
0156E:  MOVWF  xBC
01570:  MOVLB  0
01572:  RCALL  11B6
01574:  MOVFF  81,95
01578:  MOVLW  1B
0157A:  MOVWF  x96
0157C:  RCALL  1212
0157E:  MOVLW  0A
01580:  MOVLB  1
01582:  MOVWF  xC2
01584:  MOVLB  0
01586:  RCALL  0F3E
.................... 
....................     // Write the updated shutdown count back to memory
....................     WRITE_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
01588:  MOVLB  1
0158A:  CLRF   xB3
0158C:  MOVLW  10
0158E:  MOVWF  xB2
01590:  CLRF   xB1
01592:  MOVLW  11
01594:  MOVWF  xB0
01596:  CLRF   xB5
01598:  MOVLW  81
0159A:  MOVWF  xB4
0159C:  MOVLW  01
0159E:  MOVWF  xB6
015A0:  MOVLB  0
015A2:  RCALL  13A0
....................     delay_ms(10);
015A4:  MOVLW  0A
015A6:  MOVWF  x82
015A8:  RCALL  0F16
.................... 
....................     fprintf(EXT, "Now shutdown count is : %u\n\n", shutdown_count[0]);
015AA:  MOVLW  44
015AC:  MOVWF  FF6
015AE:  MOVLW  01
015B0:  MOVWF  FF7
015B2:  MOVLW  00
015B4:  MOVWF  FF8
015B6:  MOVLW  18
015B8:  MOVLB  1
015BA:  MOVWF  xBC
015BC:  MOVLB  0
015BE:  RCALL  11B6
015C0:  MOVFF  81,95
015C4:  MOVLW  1B
015C6:  MOVWF  x96
015C8:  RCALL  1212
015CA:  MOVLW  0A
015CC:  MOVLB  1
015CE:  MOVWF  xC2
015D0:  MOVLB  0
015D2:  RCALL  0F3E
015D4:  MOVLW  0A
015D6:  MOVLB  1
015D8:  MOVWF  xC2
015DA:  MOVLB  0
015DC:  RCALL  0F3E
.................... 
....................     return shutdown_count[0];
015DE:  MOVFF  81,01
015E2:  GOTO   2EDC (RETURN)
.................... }
.................... 
.................... //set RTCC functions counting to all zero 
.................... void set_clock(rtc_time_t &date_time){
.................... 
....................    date_time.tm_year=0000;
*
029F0:  CLRF   x83
....................    date_time.tm_mon=00;
029F2:  CLRF   x86
....................    date_time.tm_mday=00;
029F4:  CLRF   x85
....................    date_time.tm_wday=00;
029F6:  CLRF   x88
....................    date_time.tm_hour=00;
029F8:  CLRF   x87
....................    date_time.tm_min=00;
029FA:  CLRF   x8A
....................    date_time.tm_sec=0; 
029FC:  CLRF   x89
029FE:  MOVLB  F
.................... }
.................... //main flash memory consol for main_menu() function
.................... void write_to_main_flash_menu(){
....................             unsigned int32 address;
....................             unsigned int8 data[256]; // Buffer for data to be written (adjust size as needed)
....................             unsigned char data_number;
....................             unsigned char choice;
....................             unsigned int8 i;
....................             // Prompt user to enter the address
....................             fprintf(EXT, "\nEnter Address (hex, 0x1234): 0x");
*
02358:  MOVLW  62
0235A:  MOVWF  FF6
0235C:  MOVLW  01
0235E:  MOVWF  FF7
02360:  MOVLW  00
02362:  MOVWF  FF8
02364:  CALL   0F84
....................             fscanf(EXT, "%x", &address); // Read address input in hex
02368:  MOVLB  1
0236A:  CLRF   xB0
0236C:  CLRF   xB1
0236E:  CLRF   xB3
02370:  MOVLW  A9
02372:  MOVWF  xB2
02374:  CLRF   xB5
02376:  CLRF   xB4
02378:  MOVLB  0
0237A:  RCALL  2178
0237C:  MOVF   01,F
0237E:  BNZ   2388
02380:  MOVLB  1
02382:  CLRF   xB1
02384:  BRA    2390
02386:  MOVLB  0
02388:  MOVF   01,W
0238A:  MOVLB  1
0238C:  ADDWF  xB0,F
0238E:  INCF   xB1,F
.................... 
....................             // Prompt user to enter the number of bytes
....................             fprintf(EXT, "\nEnter number of bytes to write (max 256): ");
02390:  MOVLW  84
02392:  MOVWF  FF6
02394:  MOVLW  01
02396:  MOVWF  FF7
02398:  MOVLW  00
0239A:  MOVWF  FF8
0239C:  MOVLB  0
0239E:  CALL   0F84
....................             fscanf(EXT, "%x", &data_number); // Read number of bytes
023A2:  MOVLB  1
023A4:  CLRF   xB0
023A6:  CLRF   xB1
023A8:  MOVLW  01
023AA:  MOVWF  xB5
023AC:  MOVLW  AD
023AE:  MOVWF  xB4
023B0:  CLRF   xB7
023B2:  CLRF   xB6
023B4:  MOVLB  0
023B6:  RCALL  2288
023B8:  MOVF   01,F
023BA:  BNZ   23C4
023BC:  MOVLB  1
023BE:  CLRF   xB1
023C0:  BRA    23CC
023C2:  MOVLB  0
023C4:  MOVF   01,W
023C6:  MOVLB  1
023C8:  ADDWF  xB0,F
023CA:  INCF   xB1,F
.................... 
....................             if (data_number > 256) {
....................                 fprintf(EXT, "Error: Maximum data length is 256 bytes.\n");
....................                 continue;
....................             }
.................... 
....................             // Get data from user
....................             fprintf(EXT, "Enter %d bytes of data (in hex):\n", data_number);
023CC:  MOVLW  DA
023CE:  MOVWF  FF6
023D0:  MOVLW  01
023D2:  MOVWF  FF7
023D4:  MOVLW  00
023D6:  MOVWF  FF8
023D8:  MOVLW  06
023DA:  MOVWF  xBC
023DC:  MOVLB  0
023DE:  CALL   11B6
023E2:  MOVFF  1AD,1BC
023E6:  MOVLW  18
023E8:  MOVLB  1
023EA:  MOVWF  xBD
023EC:  MOVLB  0
023EE:  CALL   12E4
023F2:  MOVLW  E2
023F4:  MOVWF  FF6
023F6:  MOVLW  01
023F8:  MOVWF  FF7
023FA:  MOVLW  00
023FC:  MOVWF  FF8
023FE:  MOVLW  19
02400:  MOVLB  1
02402:  MOVWF  xBC
02404:  MOVLB  0
02406:  CALL   11B6
....................             for (i = 0; i < data_number; i++) {
0240A:  MOVLB  1
0240C:  CLRF   xAF
0240E:  MOVF   xAD,W
02410:  SUBWF  xAF,W
02412:  BC    249A
....................                 fprintf(EXT, "Byte %d: 0x", i + 1);
02414:  MOVLW  01
02416:  ADDWF  xAF,W
02418:  MOVWF  xB0
0241A:  MOVLW  FC
0241C:  MOVWF  FF6
0241E:  MOVLW  01
02420:  MOVWF  FF7
02422:  MOVLW  00
02424:  MOVWF  FF8
02426:  MOVLW  05
02428:  MOVWF  xBC
0242A:  MOVLB  0
0242C:  CALL   11B6
02430:  MOVFF  1B0,1BC
02434:  MOVLW  18
02436:  MOVLB  1
02438:  MOVWF  xBD
0243A:  MOVLB  0
0243C:  CALL   12E4
02440:  MOVLW  03
02442:  MOVWF  FF6
02444:  MOVLW  02
02446:  MOVWF  FF7
02448:  MOVLW  00
0244A:  MOVWF  FF8
0244C:  MOVLW  04
0244E:  MOVLB  1
02450:  MOVWF  xBC
02452:  MOVLB  0
02454:  CALL   11B6
....................                 fscanf(EXT, "%x", &data[i]); // Read byte in hex format
02458:  CLRF   03
0245A:  MOVLB  1
0245C:  MOVF   xAF,W
0245E:  ADDLW  AD
02460:  MOVWF  01
02462:  MOVLW  00
02464:  ADDWFC 03,F
02466:  MOVFF  01,1B0
0246A:  MOVFF  03,1B1
0246E:  CLRF   xB2
02470:  CLRF   xB3
02472:  MOVFF  03,1B5
02476:  MOVFF  01,1B4
0247A:  CLRF   xB7
0247C:  CLRF   xB6
0247E:  MOVLB  0
02480:  RCALL  2288
02482:  MOVF   01,F
02484:  BNZ   248E
02486:  MOVLB  1
02488:  CLRF   xB3
0248A:  BRA    2496
0248C:  MOVLB  0
0248E:  MOVF   01,W
02490:  MOVLB  1
02492:  ADDWF  xB2,F
02494:  INCF   xB3,F
02496:  INCF   xAF,F
02498:  BRA    240E
....................             }
.................... 
....................             // Call the function to write data to the address
....................             WRITE_DATA_NBYTES(address, data, data_number);
0249A:  MOVFF  AC,1B3
0249E:  MOVFF  AB,1B2
024A2:  MOVFF  AA,1B1
024A6:  MOVFF  A9,1B0
024AA:  CLRF   xB5
024AC:  MOVLW  AD
024AE:  MOVWF  xB4
024B0:  MOVFF  1AD,1B6
024B4:  MOVLB  0
024B6:  CALL   13A0
.................... 
....................             fprintf(EXT, "\nData successfully written.\n");
024BA:  MOVLW  08
024BC:  MOVWF  FF6
024BE:  MOVLW  02
024C0:  MOVWF  FF7
024C2:  MOVLW  00
024C4:  MOVWF  FF8
024C6:  CALL   0F84
024CA:  GOTO   277A (RETURN)
.................... }
.................... //main flash memory consol for main_menu() function
.................... void handle_main_flash_memory() {
....................     char main_flash_option;
....................     unsigned int32 address;
....................     unsigned char data[32];
....................     unsigned char data_length;
.................... 
....................     fprintf(EXT, "MAIN flash memory chosen\n");
*
025E0:  MOVLW  26
025E2:  MOVWF  FF6
025E4:  MOVLW  02
025E6:  MOVWF  FF7
025E8:  MOVLW  00
025EA:  MOVWF  FF8
025EC:  CALL   0F84
....................     fprintf(EXT, "press a: Read ID of the chip\n");
025F0:  MOVLW  40
025F2:  MOVWF  FF6
025F4:  MOVLW  02
025F6:  MOVWF  FF7
025F8:  MOVLW  00
025FA:  MOVWF  FF8
025FC:  CALL   0F84
....................     fprintf(EXT, "press b: Write data set in specified address\n");
02600:  MOVLW  5E
02602:  MOVWF  FF6
02604:  MOVLW  02
02606:  MOVWF  FF7
02608:  MOVLW  00
0260A:  MOVWF  FF8
0260C:  CALL   0F84
....................     fprintf(EXT, "press c: Read data set in specified address\n");
02610:  MOVLW  8C
02612:  MOVWF  FF6
02614:  MOVLW  02
02616:  MOVWF  FF7
02618:  MOVLW  00
0261A:  MOVWF  FF8
0261C:  CALL   0F84
....................     fprintf(EXT, "press x: Return to MAIN MENU\n");
02620:  MOVLW  BA
02622:  MOVWF  FF6
02624:  MOVLW  02
02626:  MOVWF  FF7
02628:  MOVLW  00
0262A:  MOVWF  FF8
0262C:  CALL   0F84
.................... 
....................     main_flash_option = fgetc(EXT);
02630:  CALL   1D0E
02634:  MOVFF  01,83
.................... 
....................     switch (main_flash_option) {
02638:  MOVF   x83,W
0263A:  XORLW  61
0263C:  BZ    264E
0263E:  XORLW  03
02640:  BZ    2664
02642:  XORLW  01
02644:  BZ    2668
02646:  XORLW  1B
02648:  BTFSC  FD8.2
0264A:  BRA    2768
0264C:  BRA    276A
....................         case 'a':
....................             fprintf(EXT, "Started reading chip ID of MAIN flash memory\n");
0264E:  MOVLW  D8
02650:  MOVWF  FF6
02652:  MOVLW  02
02654:  MOVWF  FF7
02656:  MOVLW  00
02658:  MOVWF  FF8
0265A:  CALL   0F84
....................             READ_CHIP_ID_OF();  
0265E:  CALL   15E6
....................             break;
02662:  BRA    277A
....................         case 'b':
....................             write_to_main_flash_menu();
02664:  BRA    2358
....................             break;
02666:  BRA    277A
....................         case 'c':
....................             fprintf(EXT, "Read data set in specified address\n");
02668:  MOVLW  06
0266A:  MOVWF  FF6
0266C:  MOVLW  03
0266E:  MOVWF  FF7
02670:  MOVLW  00
02672:  MOVWF  FF8
02674:  CALL   0F84
....................             fprintf(EXT, "Enter your specified address and length (e.g., 0x1234 10): ");
02678:  MOVLW  2A
0267A:  MOVWF  FF6
0267C:  MOVLW  03
0267E:  MOVWF  FF7
02680:  MOVLW  00
02682:  MOVWF  FF8
02684:  CALL   0F84
....................             if (scanf("%x %d", &address, &data_length)) {
02688:  CLRF   xA9
0268A:  CLRF   xAA
0268C:  MOVLB  1
0268E:  CLRF   xB3
02690:  MOVLW  84
02692:  MOVWF  xB2
02694:  CLRF   xB5
02696:  CLRF   xB4
02698:  MOVLB  0
0269A:  RCALL  2178
0269C:  MOVF   01,F
0269E:  BNZ   26A4
026A0:  CLRF   xAA
026A2:  BRA    26C8
026A4:  MOVF   01,W
026A6:  ADDWF  xA9,F
026A8:  INCF   xAA,F
026AA:  CLRF   xAC
026AC:  CLRF   xAB
026AE:  CLRF   xAE
026B0:  MOVLW  A8
026B2:  MOVWF  xAD
026B4:  MOVLW  0A
026B6:  MOVWF  xAF
026B8:  BRA    251A
026BA:  MOVF   01,F
026BC:  BNZ   26C2
026BE:  CLRF   xAA
026C0:  BRA    26C8
026C2:  MOVF   01,W
026C4:  ADDWF  xA9,F
026C6:  INCF   xAA,F
026C8:  MOVF   xAA,W
026CA:  BZ    2756
....................                 fprintf(EXT, "Address: 0x%09x, Length: %d\n", address, data_length);
026CC:  MOVLW  66
026CE:  MOVWF  FF6
026D0:  MOVLW  03
026D2:  MOVWF  FF7
026D4:  MOVLW  00
026D6:  MOVWF  FF8
026D8:  MOVLW  0B
026DA:  MOVLB  1
026DC:  MOVWF  xBC
026DE:  MOVLB  0
026E0:  CALL   11B6
026E4:  MOVLW  07
026E6:  MOVWF  xA9
026E8:  MOVLW  30
026EA:  MOVLB  1
026EC:  MOVWF  xC2
026EE:  MOVLB  0
026F0:  CALL   0F3E
026F4:  DECFSZ xA9,F
026F6:  BRA    26E8
026F8:  MOVFF  84,1BC
026FC:  MOVLW  57
026FE:  MOVLB  1
02700:  MOVWF  xBD
02702:  MOVLB  0
02704:  CALL   1280
02708:  MOVLW  75
0270A:  MOVWF  FF6
0270C:  MOVLW  03
0270E:  MOVWF  FF7
02710:  MOVLW  00
02712:  MOVWF  FF8
02714:  MOVLW  0A
02716:  MOVLB  1
02718:  MOVWF  xBC
0271A:  MOVLB  0
0271C:  CALL   11B6
02720:  MOVFF  A8,1BC
02724:  MOVLW  18
02726:  MOVLB  1
02728:  MOVWF  xBD
0272A:  MOVLB  0
0272C:  CALL   12E4
02730:  MOVLW  0A
02732:  MOVLB  1
02734:  MOVWF  xC2
02736:  MOVLB  0
02738:  CALL   0F3E
....................                 READ_DATA_NBYTES(address, data_length);  // Replace with actual function
0273C:  MOVFF  87,AC
02740:  MOVFF  86,AB
02744:  MOVFF  85,AA
02748:  MOVFF  84,A9
0274C:  MOVFF  A8,AD
02750:  CALL   10D6
....................             } else {
02754:  BRA    2766
....................                 fprintf(EXT, "Invalid input. Please enter a valid address and length.\n");
02756:  MOVLW  84
02758:  MOVWF  FF6
0275A:  MOVLW  03
0275C:  MOVWF  FF7
0275E:  MOVLW  00
02760:  MOVWF  FF8
02762:  CALL   0F84
....................             }
....................             break;
02766:  BRA    277A
.................... 
....................         case 'x':
....................             return;
02768:  BRA    277A
....................         default:
....................             fprintf(EXT, "Invalid MAIN flash memory option. Please try again.\n");
0276A:  MOVLW  BE
0276C:  MOVWF  FF6
0276E:  MOVLW  03
02770:  MOVWF  FF7
02772:  MOVLW  00
02774:  MOVWF  FF8
02776:  CALL   0F84
....................             break;
....................     }
0277A:  GOTO   2890 (RETURN)
.................... }
.................... //main flash memory consol for main_menu() function
.................... void handle_flash_memories() {
....................     char flash_option;
....................     fprintf(EXT, "pressed option d: Check Flash Memories\n\n");
0277E:  MOVLW  F4
02780:  MOVWF  FF6
02782:  MOVLW  03
02784:  MOVWF  FF7
02786:  MOVLW  00
02788:  MOVWF  FF8
0278A:  CALL   0F84
....................     fprintf(EXT, "Please choose which flash memory to work on (a, b, c):\n");
0278E:  MOVLW  1E
02790:  MOVWF  FF6
02792:  MOVLW  04
02794:  MOVWF  FF7
02796:  MOVLW  00
02798:  MOVWF  FF8
0279A:  CALL   0F84
....................     fprintf(EXT, "press a: MAIN flash memory\n");
0279E:  MOVLW  56
027A0:  MOVWF  FF6
027A2:  MOVLW  04
027A4:  MOVWF  FF7
027A6:  MOVLW  00
027A8:  MOVWF  FF8
027AA:  CALL   0F84
....................     fprintf(EXT, "press b: COM shared flash memory\n");
027AE:  MOVLW  72
027B0:  MOVWF  FF6
027B2:  MOVLW  04
027B4:  MOVWF  FF7
027B6:  MOVLW  00
027B8:  MOVWF  FF8
027BA:  CALL   0F84
....................     fprintf(EXT, "press c: ADCS shared flash memory\n");
027BE:  MOVLW  94
027C0:  MOVWF  FF6
027C2:  MOVLW  04
027C4:  MOVWF  FF7
027C6:  MOVLW  00
027C8:  MOVWF  FF8
027CA:  CALL   0F84
....................     fprintf(EXT, "press d: OVCAM shared flash memory\n");
027CE:  MOVLW  B8
027D0:  MOVWF  FF6
027D2:  MOVLW  04
027D4:  MOVWF  FF7
027D6:  MOVLW  00
027D8:  MOVWF  FF8
027DA:  CALL   0F84
....................     fprintf(EXT, "press e: MVCAM shared flash memory\n");
027DE:  MOVLW  DC
027E0:  MOVWF  FF6
027E2:  MOVLW  04
027E4:  MOVWF  FF7
027E6:  MOVLW  00
027E8:  MOVWF  FF8
027EA:  CALL   0F84
....................     fprintf(EXT, "press x: Return to MAIN MENU\n");
027EE:  MOVLW  00
027F0:  MOVWF  FF6
027F2:  MOVLW  05
027F4:  MOVWF  FF7
027F6:  MOVLW  00
027F8:  MOVWF  FF8
027FA:  CALL   0F84
.................... 
....................     flash_option = fgetc(EXT);
027FE:  CALL   1D0E
02802:  MOVFF  01,82
.................... 
....................     switch (flash_option) {
02806:  MOVF   x82,W
02808:  XORLW  61
0280A:  BZ    2822
0280C:  XORLW  03
0280E:  BZ    2836
02810:  XORLW  01
02812:  BZ    2848
02814:  XORLW  07
02816:  BZ    285A
02818:  XORLW  01
0281A:  BZ    286C
0281C:  XORLW  1D
0281E:  BZ    287E
02820:  BRA    2880
....................         case 'a':
....................             fprintf(EXT, "MAIN shared flash memory chosen\n");
02822:  MOVLW  1E
02824:  MOVWF  FF6
02826:  MOVLW  05
02828:  MOVWF  FF7
0282A:  MOVLW  00
0282C:  MOVWF  FF8
0282E:  CALL   0F84
....................             handle_main_flash_memory();
02832:  BRA    25E0
....................             break;
02834:  BRA    2890
....................         case 'b':
....................             fprintf(EXT, "COM shared flash memory chosen\n");
02836:  MOVLW  40
02838:  MOVWF  FF6
0283A:  MOVLW  05
0283C:  MOVWF  FF7
0283E:  MOVLW  00
02840:  MOVWF  FF8
02842:  CALL   0F84
....................             // Implement COM shared flash memory handling
....................             break;
02846:  BRA    2890
....................         case 'c':
....................             fprintf(EXT, "ADCS shared flash memory chosen\n");
02848:  MOVLW  60
0284A:  MOVWF  FF6
0284C:  MOVLW  05
0284E:  MOVWF  FF7
02850:  MOVLW  00
02852:  MOVWF  FF8
02854:  CALL   0F84
....................             // Implement ADCS shared flash memory handling
....................             break;
02858:  BRA    2890
....................          case 'd':
....................             fprintf(EXT, "OVCAM shared flash memory chosen\n");
0285A:  MOVLW  82
0285C:  MOVWF  FF6
0285E:  MOVLW  05
02860:  MOVWF  FF7
02862:  MOVLW  00
02864:  MOVWF  FF8
02866:  CALL   0F84
....................             // Implement ADCS shared flash memory handling
....................             break;
0286A:  BRA    2890
....................          case 'e':
....................             fprintf(EXT, "MVCAM shared flash memory chosen\n");
0286C:  MOVLW  A4
0286E:  MOVWF  FF6
02870:  MOVLW  05
02872:  MOVWF  FF7
02874:  MOVLW  00
02876:  MOVWF  FF8
02878:  CALL   0F84
....................             // Implement ADCS shared flash memory handling
....................             break;
0287C:  BRA    2890
....................          case'x':
....................              break;
0287E:  BRA    2890
....................         default:
....................             fprintf(EXT, "Invalid flash memory option. Please try again.\n");
02880:  MOVLW  C6
02882:  MOVWF  FF6
02884:  MOVLW  05
02886:  MOVWF  FF7
02888:  MOVLW  00
0288A:  MOVWF  FF8
0288C:  CALL   0F84
....................             break;
....................     }
02890:  GOTO   2DE8 (RETURN)
.................... }
.................... 
.................... //main RTCC functions consol for main_menu() function
.................... void handle_set_time() {
....................     char handle_set_time_option;
....................     fprintf(EXT, "Settings of RTC chosen\n");
*
028B8:  MOVLW  F6
028BA:  MOVWF  FF6
028BC:  MOVLW  05
028BE:  MOVWF  FF7
028C0:  MOVLW  00
028C2:  MOVWF  FF8
028C4:  CALL   0F84
....................     fprintf(EXT, "    press a: to reset the RTC /all current time will be set zero/\n");
028C8:  MOVLW  0E
028CA:  MOVWF  FF6
028CC:  MOVLW  06
028CE:  MOVWF  FF7
028D0:  MOVLW  00
028D2:  MOVWF  FF8
028D4:  CALL   0F84
....................     fprintf(EXT, "    press b: display current time\n");
028D8:  MOVLW  52
028DA:  MOVWF  FF6
028DC:  MOVLW  06
028DE:  MOVWF  FF7
028E0:  MOVLW  00
028E2:  MOVWF  FF8
028E4:  CALL   0F84
....................     handle_set_time_option = fgetc(EXT);
028E8:  CALL   1D0E
028EC:  MOVFF  01,82
.................... 
....................     switch (handle_set_time_option) {
028F0:  MOVF   x82,W
028F2:  XORLW  61
028F4:  BZ    2904
028F6:  XORLW  03
028F8:  BTFSC  FD8.2
028FA:  BRA    2B14
028FC:  XORLW  1A
028FE:  BTFSC  FD8.2
02900:  BRA    2BE2
02902:  BRA    2BE6
....................         case 'a':
....................     rtc_time_t write_clock, read_clock;
....................     rtc_read(&read_clock);
02904:  MOVLB  F
02906:  BSF    x5F.0
02908:  BSF    x5F.1
0290A:  CLRF   FEA
0290C:  MOVLW  8C
0290E:  MOVWF  FE9
02910:  MOVLW  04
02912:  MOVWF  01
02914:  MOVF   x5C,W
02916:  MOVLB  0
02918:  CALL   1016
0291C:  MOVWF  FEE
0291E:  MOVLB  F
02920:  MOVF   x5D,W
02922:  MOVLB  0
02924:  CALL   1016
02928:  MOVWF  FEE
0292A:  DECFSZ 01,F
0292C:  BRA    2930
0292E:  BRA    2934
02930:  MOVLB  F
02932:  BRA    2914
....................     fprintf(EXT, "Now time is\n");
02934:  MOVLW  76
02936:  MOVWF  FF6
02938:  MOVLW  06
0293A:  MOVWF  FF7
0293C:  MOVLW  00
0293E:  MOVWF  FF8
02940:  CALL   0F84
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
02944:  MOVLW  0D
02946:  MOVLB  1
02948:  MOVWF  xC2
0294A:  MOVLB  0
0294C:  CALL   0F3E
02950:  MOVFF  8F,95
02954:  MOVLW  01
02956:  MOVWF  x96
02958:  CALL   1212
0295C:  MOVLW  2F
0295E:  MOVLB  1
02960:  MOVWF  xC2
02962:  MOVLB  0
02964:  CALL   0F3E
02968:  MOVFF  8E,95
0296C:  MOVLW  01
0296E:  MOVWF  x96
02970:  CALL   1212
02974:  MOVLW  8E
02976:  MOVWF  FF6
02978:  MOVLW  06
0297A:  MOVWF  FF7
0297C:  MOVLW  00
0297E:  MOVWF  FF8
02980:  MOVLW  03
02982:  MOVLB  1
02984:  MOVWF  xBC
02986:  MOVLB  0
02988:  CALL   11B6
0298C:  MOVFF  8C,95
02990:  MOVLW  01
02992:  MOVWF  x96
02994:  CALL   1212
02998:  MOVLW  20
0299A:  MOVLB  1
0299C:  MOVWF  xC2
0299E:  MOVLB  0
029A0:  CALL   0F3E
029A4:  MOVFF  90,95
029A8:  MOVLW  01
029AA:  MOVWF  x96
029AC:  CALL   1212
029B0:  MOVLW  3A
029B2:  MOVLB  1
029B4:  MOVWF  xC2
029B6:  MOVLB  0
029B8:  CALL   0F3E
029BC:  MOVFF  93,95
029C0:  MOVLW  01
029C2:  MOVWF  x96
029C4:  CALL   1212
029C8:  MOVLW  3A
029CA:  MOVLB  1
029CC:  MOVWF  xC2
029CE:  MOVLB  0
029D0:  CALL   0F3E
029D4:  MOVFF  92,95
029D8:  MOVLW  01
029DA:  MOVWF  x96
029DC:  CALL   1212
....................     fprintf(EXT, "Time changing function activated\n");
029E0:  MOVLW  A6
029E2:  MOVWF  FF6
029E4:  MOVLW  06
029E6:  MOVWF  FF7
029E8:  MOVLW  00
029EA:  MOVWF  FF8
029EC:  CALL   0F84
....................     set_clock(write_clock);
....................     rtc_write(&write_clock);
*
02A00:  MOVLB  F
02A02:  MOVLW  55
02A04:  MOVWF  F7E
02A06:  MOVLW  AA
02A08:  MOVWF  F7E
02A0A:  BSF    x5F.5
02A0C:  BSF    x5F.0
02A0E:  BSF    x5F.1
02A10:  CLRF   FEA
02A12:  MOVLW  83
02A14:  MOVWF  FE9
02A16:  MOVLW  04
02A18:  MOVWF  01
02A1A:  MOVF   FEE,W
02A1C:  MOVLB  0
02A1E:  RCALL  2894
02A20:  MOVLB  F
02A22:  MOVWF  x5C
02A24:  MOVF   FEE,W
02A26:  MOVLB  0
02A28:  RCALL  2894
02A2A:  MOVLB  F
02A2C:  MOVWF  x5D
02A2E:  DECFSZ 01,F
02A30:  BRA    2A1A
02A32:  BCF    x5F.5
....................     fprintf(EXT, "Time successfully changed. Current time is:\n");
02A34:  MOVLW  C8
02A36:  MOVWF  FF6
02A38:  MOVLW  06
02A3A:  MOVWF  FF7
02A3C:  MOVLW  00
02A3E:  MOVWF  FF8
02A40:  MOVLB  0
02A42:  CALL   0F84
....................     rtc_read(&read_clock);
02A46:  MOVLB  F
02A48:  BSF    x5F.0
02A4A:  BSF    x5F.1
02A4C:  CLRF   FEA
02A4E:  MOVLW  8C
02A50:  MOVWF  FE9
02A52:  MOVLW  04
02A54:  MOVWF  01
02A56:  MOVF   x5C,W
02A58:  MOVLB  0
02A5A:  CALL   1016
02A5E:  MOVWF  FEE
02A60:  MOVLB  F
02A62:  MOVF   x5D,W
02A64:  MOVLB  0
02A66:  CALL   1016
02A6A:  MOVWF  FEE
02A6C:  DECFSZ 01,F
02A6E:  BRA    2A72
02A70:  BRA    2A76
02A72:  MOVLB  F
02A74:  BRA    2A56
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
02A76:  MOVLW  0D
02A78:  MOVLB  1
02A7A:  MOVWF  xC2
02A7C:  MOVLB  0
02A7E:  CALL   0F3E
02A82:  MOVFF  8F,95
02A86:  MOVLW  01
02A88:  MOVWF  x96
02A8A:  CALL   1212
02A8E:  MOVLW  2F
02A90:  MOVLB  1
02A92:  MOVWF  xC2
02A94:  MOVLB  0
02A96:  CALL   0F3E
02A9A:  MOVFF  8E,95
02A9E:  MOVLW  01
02AA0:  MOVWF  x96
02AA2:  CALL   1212
02AA6:  MOVLW  00
02AA8:  MOVWF  FF6
02AAA:  MOVLW  07
02AAC:  MOVWF  FF7
02AAE:  MOVLW  00
02AB0:  MOVWF  FF8
02AB2:  MOVLW  03
02AB4:  MOVLB  1
02AB6:  MOVWF  xBC
02AB8:  MOVLB  0
02ABA:  CALL   11B6
02ABE:  MOVFF  8C,95
02AC2:  MOVLW  01
02AC4:  MOVWF  x96
02AC6:  CALL   1212
02ACA:  MOVLW  20
02ACC:  MOVLB  1
02ACE:  MOVWF  xC2
02AD0:  MOVLB  0
02AD2:  CALL   0F3E
02AD6:  MOVFF  90,95
02ADA:  MOVLW  01
02ADC:  MOVWF  x96
02ADE:  CALL   1212
02AE2:  MOVLW  3A
02AE4:  MOVLB  1
02AE6:  MOVWF  xC2
02AE8:  MOVLB  0
02AEA:  CALL   0F3E
02AEE:  MOVFF  93,95
02AF2:  MOVLW  01
02AF4:  MOVWF  x96
02AF6:  CALL   1212
02AFA:  MOVLW  3A
02AFC:  MOVLB  1
02AFE:  MOVWF  xC2
02B00:  MOVLB  0
02B02:  CALL   0F3E
02B06:  MOVFF  92,95
02B0A:  MOVLW  01
02B0C:  MOVWF  x96
02B0E:  CALL   1212
....................     break;
02B12:  BRA    2BF6
....................         case 'b':
....................             rtc_read(&read_clock);
02B14:  MOVLB  F
02B16:  BSF    x5F.0
02B18:  BSF    x5F.1
02B1A:  CLRF   FEA
02B1C:  MOVLW  8C
02B1E:  MOVWF  FE9
02B20:  MOVLW  04
02B22:  MOVWF  01
02B24:  MOVF   x5C,W
02B26:  MOVLB  0
02B28:  CALL   1016
02B2C:  MOVWF  FEE
02B2E:  MOVLB  F
02B30:  MOVF   x5D,W
02B32:  MOVLB  0
02B34:  CALL   1016
02B38:  MOVWF  FEE
02B3A:  DECFSZ 01,F
02B3C:  BRA    2B40
02B3E:  BRA    2B44
02B40:  MOVLB  F
02B42:  BRA    2B24
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
02B44:  MOVLW  0D
02B46:  MOVLB  1
02B48:  MOVWF  xC2
02B4A:  MOVLB  0
02B4C:  CALL   0F3E
02B50:  MOVFF  8F,95
02B54:  MOVLW  01
02B56:  MOVWF  x96
02B58:  CALL   1212
02B5C:  MOVLW  2F
02B5E:  MOVLB  1
02B60:  MOVWF  xC2
02B62:  MOVLB  0
02B64:  CALL   0F3E
02B68:  MOVFF  8E,95
02B6C:  MOVLW  01
02B6E:  MOVWF  x96
02B70:  CALL   1212
02B74:  MOVLW  22
02B76:  MOVWF  FF6
02B78:  MOVLW  07
02B7A:  MOVWF  FF7
02B7C:  MOVLW  00
02B7E:  MOVWF  FF8
02B80:  MOVLW  03
02B82:  MOVLB  1
02B84:  MOVWF  xBC
02B86:  MOVLB  0
02B88:  CALL   11B6
02B8C:  MOVFF  8C,95
02B90:  MOVLW  01
02B92:  MOVWF  x96
02B94:  CALL   1212
02B98:  MOVLW  20
02B9A:  MOVLB  1
02B9C:  MOVWF  xC2
02B9E:  MOVLB  0
02BA0:  CALL   0F3E
02BA4:  MOVFF  90,95
02BA8:  MOVLW  01
02BAA:  MOVWF  x96
02BAC:  CALL   1212
02BB0:  MOVLW  3A
02BB2:  MOVLB  1
02BB4:  MOVWF  xC2
02BB6:  MOVLB  0
02BB8:  CALL   0F3E
02BBC:  MOVFF  93,95
02BC0:  MOVLW  01
02BC2:  MOVWF  x96
02BC4:  CALL   1212
02BC8:  MOVLW  3A
02BCA:  MOVLB  1
02BCC:  MOVWF  xC2
02BCE:  MOVLB  0
02BD0:  CALL   0F3E
02BD4:  MOVFF  92,95
02BD8:  MOVLW  01
02BDA:  MOVWF  x96
02BDC:  CALL   1212
....................     break;
02BE0:  BRA    2BF6
....................         case 'x':
....................             break;
02BE2:  BRA    2BF6
....................             return;
02BE4:  BRA    2BF6
....................         default:
....................             fprintf(EXT, "Invalid IO option. Please try again.\n");
02BE6:  MOVLW  3A
02BE8:  MOVWF  FF6
02BEA:  MOVLW  07
02BEC:  MOVWF  FF7
02BEE:  MOVLW  00
02BF0:  MOVWF  FF8
02BF2:  CALL   0F84
....................     break;
....................             
.................... }
02BF6:  GOTO   2DE8 (RETURN)
.................... }
.................... //main IO control consol for main_menu() function
.................... void handle_io_control() {
....................     char io_option;
....................     int8 state_of_pin;
.................... 
....................     fprintf(EXT, "IO control chosen\n");
*
01D58:  MOVLW  60
01D5A:  MOVWF  FF6
01D5C:  MOVLW  07
01D5E:  MOVWF  FF7
01D60:  MOVLW  00
01D62:  MOVWF  FF8
01D64:  CALL   0F84
.................... 
....................     // Check and display the state of each pin before providing options
....................     state_of_pin = input_state(EN_SUP_3V3_1);
01D68:  CLRF   x83
01D6A:  BTFSC  F81.0
01D6C:  INCF   x83,F
....................     fprintf(EXT, "    press a: Toggle EN_SUP_3V3_1 /is currently/");
01D6E:  MOVLW  74
01D70:  MOVWF  FF6
01D72:  MOVLW  07
01D74:  MOVWF  FF7
01D76:  MOVLW  00
01D78:  MOVWF  FF8
01D7A:  CALL   0F84
....................     if(state_of_pin == 1 ){
01D7E:  DECFSZ x83,W
01D80:  BRA    1D94
....................         fprintf(EXT, "HIGH\n");
01D82:  MOVLW  A4
01D84:  MOVWF  FF6
01D86:  MOVLW  07
01D88:  MOVWF  FF7
01D8A:  MOVLW  00
01D8C:  MOVWF  FF8
01D8E:  CALL   0F84
....................     }else if(state_of_pin == 0){
01D92:  BRA    1DBA
01D94:  MOVF   x83,F
01D96:  BNZ   1DAA
....................         fprintf(EXT, "LOW\n");
01D98:  MOVLW  AA
01D9A:  MOVWF  FF6
01D9C:  MOVLW  07
01D9E:  MOVWF  FF7
01DA0:  MOVLW  00
01DA2:  MOVWF  FF8
01DA4:  CALL   0F84
....................     }else {
01DA8:  BRA    1DBA
....................         fprintf(EXT, "Invalid\n"); 
01DAA:  MOVLW  B0
01DAC:  MOVWF  FF6
01DAE:  MOVLW  07
01DB0:  MOVWF  FF7
01DB2:  MOVLW  00
01DB4:  MOVWF  FF8
01DB6:  CALL   0F84
....................     }
....................     state_of_pin = input_state(EN_SUP_3V3_2);
01DBA:  CLRF   x83
01DBC:  BTFSC  F86.1
01DBE:  INCF   x83,F
....................     fprintf(EXT, "    press b: Toggle EN_SUP_3V3_2 /is currently/");
01DC0:  MOVLW  BA
01DC2:  MOVWF  FF6
01DC4:  MOVLW  07
01DC6:  MOVWF  FF7
01DC8:  MOVLW  00
01DCA:  MOVWF  FF8
01DCC:  CALL   0F84
....................     if(state_of_pin == 1 ){
01DD0:  DECFSZ x83,W
01DD2:  BRA    1DE6
....................         fprintf(EXT, "HIGH\n");
01DD4:  MOVLW  EA
01DD6:  MOVWF  FF6
01DD8:  MOVLW  07
01DDA:  MOVWF  FF7
01DDC:  MOVLW  00
01DDE:  MOVWF  FF8
01DE0:  CALL   0F84
....................     }else if(state_of_pin == 0){
01DE4:  BRA    1E0C
01DE6:  MOVF   x83,F
01DE8:  BNZ   1DFC
....................         fprintf(EXT, "LOW\n");
01DEA:  MOVLW  F0
01DEC:  MOVWF  FF6
01DEE:  MOVLW  07
01DF0:  MOVWF  FF7
01DF2:  MOVLW  00
01DF4:  MOVWF  FF8
01DF6:  CALL   0F84
....................     }else {
01DFA:  BRA    1E0C
....................         fprintf(EXT, "Invalid\n"); 
01DFC:  MOVLW  F6
01DFE:  MOVWF  FF6
01E00:  MOVLW  07
01E02:  MOVWF  FF7
01E04:  MOVLW  00
01E06:  MOVWF  FF8
01E08:  CALL   0F84
....................     }
....................      state_of_pin = input_state(EN_SUP_3V3_DAQ);
01E0C:  CLRF   x83
01E0E:  BTFSC  F83.0
01E10:  INCF   x83,F
....................     fprintf(EXT, "    press c: Toggle EN_SUP_3V3_DAQ /is currently/");
01E12:  MOVLW  00
01E14:  MOVWF  FF6
01E16:  MOVLW  08
01E18:  MOVWF  FF7
01E1A:  MOVLW  00
01E1C:  MOVWF  FF8
01E1E:  CALL   0F84
....................     if(state_of_pin == 1 ){
01E22:  DECFSZ x83,W
01E24:  BRA    1E38
....................         fprintf(EXT, "HIGH\n");
01E26:  MOVLW  32
01E28:  MOVWF  FF6
01E2A:  MOVLW  08
01E2C:  MOVWF  FF7
01E2E:  MOVLW  00
01E30:  MOVWF  FF8
01E32:  CALL   0F84
....................     }else if(state_of_pin == 0){
01E36:  BRA    1E5E
01E38:  MOVF   x83,F
01E3A:  BNZ   1E4E
....................         fprintf(EXT, "LOW\n");
01E3C:  MOVLW  38
01E3E:  MOVWF  FF6
01E40:  MOVLW  08
01E42:  MOVWF  FF7
01E44:  MOVLW  00
01E46:  MOVWF  FF8
01E48:  CALL   0F84
....................     }else {
01E4C:  BRA    1E5E
....................         fprintf(EXT, "Invalid\n"); 
01E4E:  MOVLW  3E
01E50:  MOVWF  FF6
01E52:  MOVLW  08
01E54:  MOVWF  FF7
01E56:  MOVLW  00
01E58:  MOVWF  FF8
01E5A:  CALL   0F84
....................     }
....................     state_of_pin = input_state(EN_SUP_UNREG);
01E5E:  CLRF   x83
01E60:  BTFSC  F81.1
01E62:  INCF   x83,F
....................     fprintf(EXT, "    press d: Toggle EN_SUP_UNREG /is currently/");
01E64:  MOVLW  48
01E66:  MOVWF  FF6
01E68:  MOVLW  08
01E6A:  MOVWF  FF7
01E6C:  MOVLW  00
01E6E:  MOVWF  FF8
01E70:  CALL   0F84
....................     if(state_of_pin == 1 ){
01E74:  DECFSZ x83,W
01E76:  BRA    1E8A
....................         fprintf(EXT, "HIGH\n");
01E78:  MOVLW  78
01E7A:  MOVWF  FF6
01E7C:  MOVLW  08
01E7E:  MOVWF  FF7
01E80:  MOVLW  00
01E82:  MOVWF  FF8
01E84:  CALL   0F84
....................     }else if(state_of_pin == 0){
01E88:  BRA    1EB0
01E8A:  MOVF   x83,F
01E8C:  BNZ   1EA0
....................         fprintf(EXT, "LOW\n");
01E8E:  MOVLW  7E
01E90:  MOVWF  FF6
01E92:  MOVLW  08
01E94:  MOVWF  FF7
01E96:  MOVLW  00
01E98:  MOVWF  FF8
01E9A:  CALL   0F84
....................     }else {
01E9E:  BRA    1EB0
....................         fprintf(EXT, "Invalid\n"); 
01EA0:  MOVLW  84
01EA2:  MOVWF  FF6
01EA4:  MOVLW  08
01EA6:  MOVWF  FF7
01EA8:  MOVLW  00
01EAA:  MOVWF  FF8
01EAC:  CALL   0F84
....................     }
....................     state_of_pin = input_state(EN_SUP_5V0);
01EB0:  CLRF   x83
01EB2:  BTFSC  F83.1
01EB4:  INCF   x83,F
....................     fprintf(EXT, "    press e: Toggle EN_SUP_5V0 /is currently/");
01EB6:  MOVLW  8E
01EB8:  MOVWF  FF6
01EBA:  MOVLW  08
01EBC:  MOVWF  FF7
01EBE:  MOVLW  00
01EC0:  MOVWF  FF8
01EC2:  CALL   0F84
....................     if(state_of_pin == 1 ){
01EC6:  DECFSZ x83,W
01EC8:  BRA    1EDC
....................         fprintf(EXT, "HIGH\n");
01ECA:  MOVLW  BC
01ECC:  MOVWF  FF6
01ECE:  MOVLW  08
01ED0:  MOVWF  FF7
01ED2:  MOVLW  00
01ED4:  MOVWF  FF8
01ED6:  CALL   0F84
....................     }else if(state_of_pin == 0){
01EDA:  BRA    1F02
01EDC:  MOVF   x83,F
01EDE:  BNZ   1EF2
....................         fprintf(EXT, "LOW\n");
01EE0:  MOVLW  C2
01EE2:  MOVWF  FF6
01EE4:  MOVLW  08
01EE6:  MOVWF  FF7
01EE8:  MOVLW  00
01EEA:  MOVWF  FF8
01EEC:  CALL   0F84
....................     }else {
01EF0:  BRA    1F02
....................         fprintf(EXT, "Invalid\n"); 
01EF2:  MOVLW  C8
01EF4:  MOVWF  FF6
01EF6:  MOVLW  08
01EF8:  MOVWF  FF7
01EFA:  MOVLW  00
01EFC:  MOVWF  FF8
01EFE:  CALL   0F84
....................     }
....................     state_of_pin = input_state(KILL_SWITCH);
01F02:  CLRF   x83
01F04:  BTFSC  F80.4
01F06:  INCF   x83,F
....................     fprintf(EXT, "    press f: Toggle KILL_SWITCH /is currently/");
01F08:  MOVLW  D2
01F0A:  MOVWF  FF6
01F0C:  MOVLW  08
01F0E:  MOVWF  FF7
01F10:  MOVLW  00
01F12:  MOVWF  FF8
01F14:  CALL   0F84
....................     if(state_of_pin == 1 ){
01F18:  DECFSZ x83,W
01F1A:  BRA    1F2E
....................         fprintf(EXT, "HIGH\n");
01F1C:  MOVLW  02
01F1E:  MOVWF  FF6
01F20:  MOVLW  09
01F22:  MOVWF  FF7
01F24:  MOVLW  00
01F26:  MOVWF  FF8
01F28:  CALL   0F84
....................     }else if(state_of_pin == 0){
01F2C:  BRA    1F54
01F2E:  MOVF   x83,F
01F30:  BNZ   1F44
....................         fprintf(EXT, "LOW\n");
01F32:  MOVLW  08
01F34:  MOVWF  FF6
01F36:  MOVLW  09
01F38:  MOVWF  FF7
01F3A:  MOVLW  00
01F3C:  MOVWF  FF8
01F3E:  CALL   0F84
....................     }else {
01F42:  BRA    1F54
....................         fprintf(EXT, "Invalid\n"); 
01F44:  MOVLW  0E
01F46:  MOVWF  FF6
01F48:  MOVLW  09
01F4A:  MOVWF  FF7
01F4C:  MOVLW  00
01F4E:  MOVWF  FF8
01F50:  CALL   0F84
....................     }
....................         state_of_pin = input_state(MVCAM_PWR);
01F54:  CLRF   x83
01F56:  BTFSC  F86.0
01F58:  INCF   x83,F
....................     fprintf(EXT, "    press g: Toggle MVCAM_PWR /is currently/");
01F5A:  MOVLW  18
01F5C:  MOVWF  FF6
01F5E:  MOVLW  09
01F60:  MOVWF  FF7
01F62:  MOVLW  00
01F64:  MOVWF  FF8
01F66:  CALL   0F84
....................     if(state_of_pin == 1 ){
01F6A:  DECFSZ x83,W
01F6C:  BRA    1F80
....................         fprintf(EXT, "HIGH\n");
01F6E:  MOVLW  46
01F70:  MOVWF  FF6
01F72:  MOVLW  09
01F74:  MOVWF  FF7
01F76:  MOVLW  00
01F78:  MOVWF  FF8
01F7A:  CALL   0F84
....................     }else if(state_of_pin == 0){
01F7E:  BRA    1FA6
01F80:  MOVF   x83,F
01F82:  BNZ   1F96
....................         fprintf(EXT, "LOW\n");
01F84:  MOVLW  4C
01F86:  MOVWF  FF6
01F88:  MOVLW  09
01F8A:  MOVWF  FF7
01F8C:  MOVLW  00
01F8E:  MOVWF  FF8
01F90:  CALL   0F84
....................     }else {
01F94:  BRA    1FA6
....................         fprintf(EXT, "Invalid\n"); 
01F96:  MOVLW  52
01F98:  MOVWF  FF6
01F9A:  MOVLW  09
01F9C:  MOVWF  FF7
01F9E:  MOVLW  00
01FA0:  MOVWF  FF8
01FA2:  CALL   0F84
....................     }
....................         state_of_pin = input_state(OVCAM_PWR);
01FA6:  CLRF   x83
01FA8:  BTFSC  F83.7
01FAA:  INCF   x83,F
....................     fprintf(EXT, "    press h: Toggle OVCAM_PWR /is currently/");
01FAC:  MOVLW  5C
01FAE:  MOVWF  FF6
01FB0:  MOVLW  09
01FB2:  MOVWF  FF7
01FB4:  MOVLW  00
01FB6:  MOVWF  FF8
01FB8:  CALL   0F84
....................     if(state_of_pin == 1 ){
01FBC:  DECFSZ x83,W
01FBE:  BRA    1FD2
....................         fprintf(EXT, "HIGH\n");
01FC0:  MOVLW  8A
01FC2:  MOVWF  FF6
01FC4:  MOVLW  09
01FC6:  MOVWF  FF7
01FC8:  MOVLW  00
01FCA:  MOVWF  FF8
01FCC:  CALL   0F84
....................     }else if(state_of_pin == 0){
01FD0:  BRA    1FF8
01FD2:  MOVF   x83,F
01FD4:  BNZ   1FE8
....................         fprintf(EXT, "LOW\n");
01FD6:  MOVLW  90
01FD8:  MOVWF  FF6
01FDA:  MOVLW  09
01FDC:  MOVWF  FF7
01FDE:  MOVLW  00
01FE0:  MOVWF  FF8
01FE2:  CALL   0F84
....................     }else {
01FE6:  BRA    1FF8
....................         fprintf(EXT, "Invalid\n"); 
01FE8:  MOVLW  96
01FEA:  MOVWF  FF6
01FEC:  MOVLW  09
01FEE:  MOVWF  FF7
01FF0:  MOVLW  00
01FF2:  MOVWF  FF8
01FF4:  CALL   0F84
....................     }
....................         state_of_pin = input_state(ADCS_PWR);
01FF8:  CLRF   x83
01FFA:  BTFSC  F83.6
01FFC:  INCF   x83,F
....................     fprintf(EXT, "    press i: Toggle ADCS_PWR /is currently/");
01FFE:  MOVLW  A0
02000:  MOVWF  FF6
02002:  MOVLW  09
02004:  MOVWF  FF7
02006:  MOVLW  00
02008:  MOVWF  FF8
0200A:  CALL   0F84
....................     if(state_of_pin == 1 ){
0200E:  DECFSZ x83,W
02010:  BRA    2024
....................         fprintf(EXT, "HIGH\n");
02012:  MOVLW  CC
02014:  MOVWF  FF6
02016:  MOVLW  09
02018:  MOVWF  FF7
0201A:  MOVLW  00
0201C:  MOVWF  FF8
0201E:  CALL   0F84
....................     }else if(state_of_pin == 0){
02022:  BRA    204A
02024:  MOVF   x83,F
02026:  BNZ   203A
....................         fprintf(EXT, "LOW\n");
02028:  MOVLW  D2
0202A:  MOVWF  FF6
0202C:  MOVLW  09
0202E:  MOVWF  FF7
02030:  MOVLW  00
02032:  MOVWF  FF8
02034:  CALL   0F84
....................     }else {
02038:  BRA    204A
....................         fprintf(EXT, "Invalid\n"); 
0203A:  MOVLW  D8
0203C:  MOVWF  FF6
0203E:  MOVLW  09
02040:  MOVWF  FF7
02042:  MOVLW  00
02044:  MOVWF  FF8
02046:  CALL   0F84
....................     }
....................     fprintf(EXT, "    press j: Toggle all Pins");
0204A:  MOVLW  E2
0204C:  MOVWF  FF6
0204E:  MOVLW  09
02050:  MOVWF  FF7
02052:  MOVLW  00
02054:  MOVWF  FF8
02056:  CALL   0F84
....................     
.................... 
....................     io_option = fgetc(EXT);
0205A:  RCALL  1D0E
0205C:  MOVFF  01,82
.................... 
....................     switch (io_option) {
02060:  MOVF   x82,W
02062:  XORLW  61
02064:  BZ    2090
02066:  XORLW  03
02068:  BZ    2096
0206A:  XORLW  01
0206C:  BZ    209C
0206E:  XORLW  07
02070:  BZ    20A2
02072:  XORLW  01
02074:  BZ    20A8
02076:  XORLW  03
02078:  BZ    20AE
0207A:  XORLW  01
0207C:  BZ    20B4
0207E:  XORLW  0F
02080:  BZ    20BA
02082:  XORLW  01
02084:  BZ    20C0
02086:  XORLW  03
02088:  BZ    20C6
0208A:  XORLW  12
0208C:  BZ    20E8
0208E:  BRA    20EC
....................         case 'a':
....................             output_toggle(EN_SUP_3V3_1);
02090:  BCF    F93.0
02092:  BTG    F8A.0
....................             break;
02094:  BRA    20FC
....................         case 'b':
....................             output_toggle(EN_SUP_3V3_2);
02096:  BCF    F98.1
02098:  BTG    F8F.1
....................             break;
0209A:  BRA    20FC
....................         case 'c':
....................             output_toggle(EN_SUP_3V3_DAQ);
0209C:  BCF    F95.0
0209E:  BTG    F8C.0
....................             break;
020A0:  BRA    20FC
....................         case 'd':
....................             output_toggle(EN_SUP_UNREG);
020A2:  BCF    F93.1
020A4:  BTG    F8A.1
....................             break;
020A6:  BRA    20FC
....................         case 'e':
....................             output_toggle(EN_SUP_5V0);
020A8:  BCF    F95.1
020AA:  BTG    F8C.1
....................             break;
020AC:  BRA    20FC
....................         case 'f':
....................             output_toggle(KILL_SWITCH);
020AE:  BCF    F92.4
020B0:  BTG    F89.4
....................             break;
020B2:  BRA    20FC
....................         case 'g':
....................             output_toggle(MVCAM_PWR);
020B4:  BCF    F98.0
020B6:  BTG    F8F.0
....................             break;
020B8:  BRA    20FC
....................         case 'h':
....................             output_toggle(OVCAM_PWR);        
020BA:  BCF    F95.7
020BC:  BTG    F8C.7
....................             break;
020BE:  BRA    20FC
....................         case 'i':
....................             output_toggle(ADCS_PWR);        
020C0:  BCF    F95.6
020C2:  BTG    F8C.6
....................             break;    
020C4:  BRA    20FC
....................         case 'j' :
....................             output_toggle(OVCAM_PWR);
020C6:  BCF    F95.7
020C8:  BTG    F8C.7
....................             output_toggle(MVCAM_PWR);  
020CA:  BCF    F98.0
020CC:  BTG    F8F.0
....................             output_toggle(KILL_SWITCH);
020CE:  BCF    F92.4
020D0:  BTG    F89.4
....................             output_toggle(EN_SUP_5V0);
020D2:  BCF    F95.1
020D4:  BTG    F8C.1
....................             output_toggle(EN_SUP_UNREG);
020D6:  BCF    F93.1
020D8:  BTG    F8A.1
....................             output_toggle(EN_SUP_3V3_DAQ);
020DA:  BCF    F95.0
020DC:  BTG    F8C.0
....................             output_toggle(EN_SUP_3V3_2);
020DE:  BCF    F98.1
020E0:  BTG    F8F.1
....................             output_toggle(EN_SUP_3V3_1);
020E2:  BCF    F93.0
020E4:  BTG    F8A.0
....................             break;
020E6:  BRA    20FC
....................         case 'x':
....................             break;
020E8:  BRA    20FC
....................             return;
020EA:  BRA    20FC
....................         default:
....................             fprintf(EXT, "Invalid IO option. Please try again.\n");
020EC:  MOVLW  00
020EE:  MOVWF  FF6
020F0:  MOVLW  0A
020F2:  MOVWF  FF7
020F4:  MOVLW  00
020F6:  MOVWF  FF8
020F8:  CALL   0F84
....................             break;
....................     }
020FC:  GOTO   2DE8 (RETURN)
.................... }
.................... 
.................... 
.................... void main_menu(void) {
....................     char option;
....................   fprintf(EXT, " __  __ _____ _   _ _   _   _____                 _   _             \n");
*
02C5A:  MOVLW  26
02C5C:  MOVWF  FF6
02C5E:  MOVLW  0A
02C60:  MOVWF  FF7
02C62:  MOVLW  00
02C64:  MOVWF  FF8
02C66:  CALL   0F84
....................   fprintf(EXT, "|  \\/  | ____| \\ | | | | | |  ___|   _ _ __   ___| |_(_) ___  _ __  \n");
02C6A:  MOVLW  6C
02C6C:  MOVWF  FF6
02C6E:  MOVLW  0A
02C70:  MOVWF  FF7
02C72:  MOVLW  00
02C74:  MOVWF  FF8
02C76:  CALL   0F84
....................   fprintf(EXT, "| |\\/| |  _| |  \\| | | | | | |_ | | | | '_ \\ / __| __| |/ _ \\| '_ \\ \n");
02C7A:  MOVLW  B2
02C7C:  MOVWF  FF6
02C7E:  MOVLW  0A
02C80:  MOVWF  FF7
02C82:  MOVLW  00
02C84:  MOVWF  FF8
02C86:  CALL   0F84
....................   fprintf(EXT, "| |  | | |___| |\\  | |_| | |  _|| |_| | | | | (__| |_| | (_) | | | |\n");
02C8A:  MOVLW  F8
02C8C:  MOVWF  FF6
02C8E:  MOVLW  0A
02C90:  MOVWF  FF7
02C92:  MOVLW  00
02C94:  MOVWF  FF8
02C96:  CALL   0F84
....................   fprintf(EXT, "|_| _|_|_____|_| \\_|\\___/  |_|_  \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|\n");
02C9A:  MOVLW  3E
02C9C:  MOVWF  FF6
02C9E:  MOVLW  0B
02CA0:  MOVWF  FF7
02CA2:  MOVLW  00
02CA4:  MOVWF  FF8
02CA6:  CALL   0F84
....................   fprintf(EXT, "   / \\   ___| |_(_)_   ____ _| |_ ___  __| | |                      \n");
02CAA:  MOVLW  84
02CAC:  MOVWF  FF6
02CAE:  MOVLW  0B
02CB0:  MOVWF  FF7
02CB2:  MOVLW  00
02CB4:  MOVWF  FF8
02CB6:  CALL   0F84
....................   fprintf(EXT, "  / _ \\ / __| __| \\ \\ / / _` | __/ _ \\/ _` | |                      \n");
02CBA:  MOVLW  CA
02CBC:  MOVWF  FF6
02CBE:  MOVLW  0B
02CC0:  MOVWF  FF7
02CC2:  MOVLW  00
02CC4:  MOVWF  FF8
02CC6:  CALL   0F84
....................   fprintf(EXT, " / ___ \\ (__| |_| |\\ V / (_| | ||  __/ (_| |_|                      \n");
02CCA:  MOVLW  10
02CCC:  MOVWF  FF6
02CCE:  MOVLW  0C
02CD0:  MOVWF  FF7
02CD2:  MOVLW  00
02CD4:  MOVWF  FF8
02CD6:  CALL   0F84
....................   fprintf(EXT, "/_/   \\_\\___|\\__|_| \\_/ \\__,_|\\__\\___|\\__,_(_)                      \n");
02CDA:  MOVLW  56
02CDC:  MOVWF  FF6
02CDE:  MOVLW  0C
02CE0:  MOVWF  FF7
02CE2:  MOVLW  00
02CE4:  MOVWF  FF8
02CE6:  CALL   0F84
....................     
....................     while (1) {
....................         // Display Main Menu
....................         fprintf(EXT, "\n-----------------Main Menu-----------------\n");
02CEA:  MOVLW  9C
02CEC:  MOVWF  FF6
02CEE:  MOVLW  0C
02CF0:  MOVWF  FF7
02CF2:  MOVLW  00
02CF4:  MOVWF  FF8
02CF6:  CALL   0F84
....................         //fprintf(EXT, "    press a: Get House keeping data\n");
....................         fprintf(EXT, "    press b: EPS Power output control\n");
02CFA:  MOVLW  CA
02CFC:  MOVWF  FF6
02CFE:  MOVLW  0C
02D00:  MOVWF  FF7
02D02:  MOVLW  00
02D04:  MOVWF  FF8
02D06:  CALL   0F84
....................         fprintf(EXT, "    press c: House keeping data collection\n");
02D0A:  MOVLW  F2
02D0C:  MOVWF  FF6
02D0E:  MOVLW  0C
02D10:  MOVWF  FF7
02D12:  MOVLW  00
02D14:  MOVWF  FF8
02D16:  CALL   0F84
....................         fprintf(EXT, "    press d: Check Flash Memories\n");
02D1A:  MOVLW  1E
02D1C:  MOVWF  FF6
02D1E:  MOVLW  0D
02D20:  MOVWF  FF7
02D22:  MOVLW  00
02D24:  MOVWF  FF8
02D26:  CALL   0F84
....................         //fprintf(EXT, "    press e: See satellite Log\n");
....................         fprintf(EXT, "    press f: Settings of RTC\n");
02D2A:  MOVLW  42
02D2C:  MOVWF  FF6
02D2E:  MOVLW  0D
02D30:  MOVWF  FF7
02D32:  MOVLW  00
02D34:  MOVWF  FF8
02D36:  CALL   0F84
....................         //fprintf(EXT, "    press g: Satellite log down-link command\n");
....................         //fprintf(EXT, "    press h: IHC Mission start\n");
....................         //fprintf(EXT, "    press i: SEL current Measurement\n");
....................         //fprintf(EXT, "    press j: H8 COM Reset\n");
....................         fprintf(EXT, "    press k: UART repeater of EPS\n");
02D3A:  MOVLW  60
02D3C:  MOVWF  FF6
02D3E:  MOVLW  0D
02D40:  MOVWF  FF7
02D42:  MOVLW  00
02D44:  MOVWF  FF8
02D46:  CALL   0F84
....................         fprintf(EXT, "    press x: Exit Main Menu\n");
02D4A:  MOVLW  84
02D4C:  MOVWF  FF6
02D4E:  MOVLW  0D
02D50:  MOVWF  FF7
02D52:  MOVLW  00
02D54:  MOVWF  FF8
02D56:  CALL   0F84
....................         fprintf(EXT, "    DO NOT USE CAPITAL CHARACTERS TO WRITE!\n\n");
02D5A:  MOVLW  A2
02D5C:  MOVWF  FF6
02D5E:  MOVLW  0D
02D60:  MOVWF  FF7
02D62:  MOVLW  00
02D64:  MOVWF  FF8
02D66:  CALL   0F84
.................... 
....................         // Read the user's choice
....................         option = fgetc(EXT);
02D6A:  CALL   1D0E
02D6E:  MOVFF  01,81
.................... 
....................         // Main menu switch
....................         switch (option) {
02D72:  MOVF   x81,W
02D74:  XORLW  61
02D76:  BZ    2DA6
02D78:  XORLW  03
02D7A:  BZ    2DA8
02D7C:  XORLW  01
02D7E:  BZ    2DAE
02D80:  XORLW  07
02D82:  BZ    2DB0
02D84:  XORLW  01
02D86:  BZ    2DB4
02D88:  XORLW  03
02D8A:  BZ    2DB6
02D8C:  XORLW  01
02D8E:  BZ    2DBA
02D90:  XORLW  0F
02D92:  BZ    2DBC
02D94:  XORLW  01
02D96:  BZ    2DBE
02D98:  XORLW  03
02D9A:  BZ    2DC0
02D9C:  XORLW  01
02D9E:  BZ    2DC2
02DA0:  XORLW  13
02DA2:  BZ    2DD6
02DA4:  BRA    2DD8
....................             case 'a':
....................                 // Call a function to get housekeeping data
....................                 // get_housekeeping_data();
....................                 break;
02DA6:  BRA    2DE8
....................             case 'b':
....................                 // Call a function to control EPS power output
....................                 handle_io_control();
02DA8:  GOTO   1D58
....................                 break;
02DAC:  BRA    2DE8
....................             case 'c':
....................                 // Call a function to collect housekeeping data
....................                 // collect_housekeeping_data();
....................                 break;
02DAE:  BRA    2DE8
....................             case 'd':
....................                 handle_flash_memories();
02DB0:  BRA    277E
....................                 break;
02DB2:  BRA    2DE8
....................             case 'e':
....................                 // Call a function to see satellite log
....................                 // see_satellite_log();
....................                 break;
02DB4:  BRA    2DE8
....................             case 'f':
....................                 handle_set_time();
02DB6:  BRA    28B8
....................                 break;
02DB8:  BRA    2DE8
....................             case 'g':
....................                 // Call a function for satellite log downlink command
....................                 // satellite_log_downlink_command();
....................                 break;
02DBA:  BRA    2DE8
....................             case 'h':
....................                 // Call a function for IHC mission start
....................                 // ihc_mission_start();
....................                 break;
02DBC:  BRA    2DE8
....................             case 'i':
....................                 // Call a function for SEL current measurement
....................                 // sel_current_measurement();
....................                 break;
02DBE:  BRA    2DE8
....................             case 'j':
....................                 // Call a function for H8 COM reset
....................                 // h8_com_reset();
....................                 break;
02DC0:  BRA    2DE8
....................             case 'k':
....................                 fprintf(EXT, "UART Repeater Initialized.\n");
02DC2:  MOVLW  D0
02DC4:  MOVWF  FF6
02DC6:  MOVLW  0D
02DC8:  MOVWF  FF7
02DCA:  MOVLW  00
02DCC:  MOVWF  FF8
02DCE:  CALL   0F84
....................                 uart_repeater();
02DD2:  BRA    2C42
....................                 break;
02DD4:  BRA    2DE8
....................             case 'x':
....................                 return;
02DD6:  BRA    2DEA
....................             default:
....................                 fprintf(EXT, "Invalid option. Please try again.\n");
02DD8:  MOVLW  EC
02DDA:  MOVWF  FF6
02DDC:  MOVLW  0D
02DDE:  MOVWF  FF7
02DE0:  MOVLW  00
02DE2:  MOVWF  FF8
02DE4:  CALL   0F84
....................                 break;
....................         }
02DE8:  BRA    2CEA
....................     }
02DEA:  GOTO   312E (RETURN)
.................... }
.................... 
.................... #ifdef	__cplusplus
.................... }
.................... #endif
.................... 
.................... #endif	/* MAIN_H */
.................... 
.................... 
.................... 
.................... 
.................... /*
....................  * 
....................  */
.................... 
.................... //int8 setup_oscillator(OSC_PRIMARY|OSC_SOSC_ENABLED); //prototype of crystal ignore
.................... char bichig[25] = "test data update of MAIN"; //test data for testing 
.................... char bichigcom[24] = "test data update of COM"; //test data for testing 
.................... char bichigadcs[25] = "test data update of ADCS"; //test data for testing 
.................... char *read_data; //MAIN flash received data will be stored in here 
.................... unsigned char buffer[40]; //secondary buffer 
.................... char *read_data_com; //COM flash received data will be stored in here 
.................... char *read_data_adcs; //ADCS flash received data will be stored in here 
.................... 
.................... void main() {
02DEE:  CLRF   FF8
02DF0:  BCF    FD0.7
02DF2:  CLRF   F9B
02DF4:  CLRF   F64
02DF6:  CLRF   F65
02DF8:  CLRF   F66
02DFA:  MOVLW  02
02DFC:  MOVWF  FD3
02DFE:  BCF    F96.5
02E00:  BSF    F8D.5
02E02:  BCF    F94.6
02E04:  BSF    F8B.6
02E06:  BCF    F95.2
02E08:  BSF    F8C.2
02E0A:  BCF    F97.7
02E0C:  BSF    F8E.7
02E0E:  BSF    F96.0
02E10:  BCF    F96.6
02E12:  BCF    F96.1
02E14:  BCF    F8D.1
02E16:  BSF    F93.5
02E18:  BCF    F93.4
02E1A:  BCF    F93.2
02E1C:  BCF    F8A.2
02E1E:  BSF    F92.0
02E20:  BCF    F92.1
02E22:  BCF    F92.3
02E24:  BCF    F89.3
02E26:  CLRF   05
02E28:  CLRF   04
02E2A:  BRA    2E92
02E2C:  DATA 4A,00
02E2E:  DATA 06,74
02E30:  DATA 65,73
02E32:  DATA 74,20
02E34:  DATA 64,61
02E36:  DATA 74,61
02E38:  DATA 20,75
02E3A:  DATA 70,64
02E3C:  DATA 61,74
02E3E:  DATA 65,20
02E40:  DATA 6F,66
02E42:  DATA 20,4D
02E44:  DATA 41,49
02E46:  DATA 4E,00
02E48:  DATA 74,65
02E4A:  DATA 73,74
02E4C:  DATA 20,64
02E4E:  DATA 61,74
02E50:  DATA 61,20
02E52:  DATA 75,70
02E54:  DATA 64,61
02E56:  DATA 74,65
02E58:  DATA 20,6F
02E5A:  DATA 66,20
02E5C:  DATA 43,4F
02E5E:  DATA 4D,00
02E60:  DATA 74,65
02E62:  DATA 73,74
02E64:  DATA 20,64
02E66:  DATA 61,74
02E68:  DATA 61,20
02E6A:  DATA 75,70
02E6C:  DATA 64,61
02E6E:  DATA 74,65
02E70:  DATA 20,6F
02E72:  DATA 66,20
02E74:  DATA 41,44
02E76:  DATA 43,53
02E78:  DATA 00,03
02E7A:  DATA 0E,45
02E7C:  DATA 00,00
02E7E:  DATA 00,08
02E80:  DATA 4E,CE
02E82:  DATA 00,02
02E84:  DATA 0E,D9
02E86:  DATA 00,00
02E88:  DATA 02,0F
02E8A:  DATA 37,00
02E8C:  DATA 00,01
02E8E:  DATA 0F,53
02E90:  DATA 00,00
02E92:  MOVLW  00
02E94:  MOVWF  FF8
02E96:  MOVLW  2E
02E98:  MOVWF  FF7
02E9A:  MOVLW  2C
02E9C:  MOVWF  FF6
02E9E:  TBLRD*+
02EA0:  MOVF   FF5,W
02EA2:  MOVWF  00
02EA4:  XORLW  00
02EA6:  BZ    2ECE
02EA8:  TBLRD*+
02EAA:  MOVF   FF5,W
02EAC:  MOVWF  01
02EAE:  BTFSC  FE8.7
02EB0:  BRA    2EBC
02EB2:  ANDLW  3F
02EB4:  MOVWF  FEA
02EB6:  TBLRD*+
02EB8:  MOVFF  FF5,FE9
02EBC:  BTFSC  01.6
02EBE:  TBLRD*+
02EC0:  BTFSS  01.6
02EC2:  TBLRD*+
02EC4:  MOVFF  FF5,FEE
02EC8:  DCFSNZ 00,F
02ECA:  BRA    2E9E
02ECC:  BRA    2EC0
02ECE:  CLRF   FF8
....................     //------------------------Start_Indicator-------------------------
.................... startup_freeze();
02ED0:  GOTO   0FAC
....................     //--------------------------RTC-----------------------------------
.................... RTC_initialize();
02ED4:  GOTO   1028
....................     //------------------------restart_indicator-----------------------
....................     update_shutdown_count();
02ED8:  GOTO   1508
....................     //------------------------read_chip_ID----------------------------
....................     fprintf(EXT, "Reading chip ID of main\n");
02EDC:  MOVLW  10
02EDE:  MOVWF  FF6
02EE0:  MOVLW  0E
02EE2:  MOVWF  FF7
02EE4:  MOVLW  00
02EE6:  MOVWF  FF8
02EE8:  CALL   0F84
....................     READ_CHIP_ID_OF();  // Pass the array to be filled by the function
02EEC:  CALL   15E6
....................     fprintf(EXT, "Reading chip ID of COM\n");
02EF0:  MOVLW  2A
02EF2:  MOVWF  FF6
02EF4:  MOVLW  0E
02EF6:  MOVWF  FF7
02EF8:  MOVLW  00
02EFA:  MOVWF  FF8
02EFC:  CALL   0F84
....................     READ_CHIP_ID_OF_COM();
02F00:  GOTO   16AC
....................     fprintf(EXT, "Reading chip ID of ADCS\n");
02F04:  MOVLW  42
02F06:  MOVWF  FF6
02F08:  MOVLW  0E
02F0A:  MOVWF  FF7
02F0C:  MOVLW  00
02F0E:  MOVWF  FF8
02F10:  CALL   0F84
....................     READ_CHIP_ID_OF_ADCS();
02F14:  GOTO   177C
....................     fprintf(EXT, "Done reading chip ID\n");
02F18:  MOVLW  5C
02F1A:  MOVWF  FF6
02F1C:  MOVLW  0E
02F1E:  MOVWF  FF7
02F20:  MOVLW  00
02F22:  MOVWF  FF8
02F24:  CALL   0F84
....................     delay_ms(1000);
02F28:  MOVLW  04
02F2A:  MOVWF  x81
02F2C:  MOVLW  FA
02F2E:  MOVWF  x82
02F30:  CALL   0F16
02F34:  DECFSZ x81,F
02F36:  BRA    2F2C
.................... //------------------------write_flash_memory--------------------------
....................       //write and read from MAIN flash memory 
....................     fprintf(EXT, "Starting to write data in MAIN flash memory\n");
02F38:  MOVLW  72
02F3A:  MOVWF  FF6
02F3C:  MOVLW  0E
02F3E:  MOVWF  FF7
02F40:  MOVLW  00
02F42:  MOVWF  FF8
02F44:  CALL   0F84
....................     WRITE_DATA_NBYTES(0x00005000,bichig,29); //write functions 
02F48:  MOVLB  1
02F4A:  CLRF   xB3
02F4C:  CLRF   xB2
02F4E:  MOVLW  50
02F50:  MOVWF  xB1
02F52:  CLRF   xB0
02F54:  CLRF   xB5
02F56:  MOVLW  06
02F58:  MOVWF  xB4
02F5A:  MOVLW  1D
02F5C:  MOVWF  xB6
02F5E:  MOVLB  0
02F60:  CALL   13A0
....................     delay_ms(1000);
02F64:  MOVLW  04
02F66:  MOVWF  x81
02F68:  MOVLW  FA
02F6A:  MOVWF  x82
02F6C:  CALL   0F16
02F70:  DECFSZ x81,F
02F72:  BRA    2F68
....................     
....................     read_data = READ_DATA_NBYTES(0x00005000, 29);
02F74:  CLRF   xAC
02F76:  CLRF   xAB
02F78:  MOVLW  50
02F7A:  MOVWF  xAA
02F7C:  CLRF   xA9
02F7E:  MOVLW  1D
02F80:  MOVWF  xAD
02F82:  CALL   10D6
02F86:  MOVFF  02,51
02F8A:  MOVFF  01,50
....................     delay_ms(1000);
02F8E:  MOVLW  04
02F90:  MOVWF  x81
02F92:  MOVLW  FA
02F94:  MOVWF  x82
02F96:  CALL   0F16
02F9A:  DECFSZ x81,F
02F9C:  BRA    2F92
....................     for (int i = 1; i < read_data[i]; i++) {
02F9E:  MOVLW  01
02FA0:  MOVWF  x7E
02FA2:  MOVF   x7E,W
02FA4:  ADDWF  50,W
02FA6:  MOVWF  FE9
02FA8:  MOVLW  00
02FAA:  ADDWFC 51,W
02FAC:  MOVWF  FEA
02FAE:  MOVF   FEF,W
02FB0:  SUBWF  x7E,W
02FB2:  BC    2FD4
....................         fprintf(EXT, "%c", read_data[i]);
02FB4:  MOVF   x7E,W
02FB6:  ADDWF  50,W
02FB8:  MOVWF  FE9
02FBA:  MOVLW  00
02FBC:  ADDWFC 51,W
02FBE:  MOVWF  FEA
02FC0:  MOVFF  FEF,1C2
02FC4:  CALL   0F3E
....................         delay_ms(2);
02FC8:  MOVLW  02
02FCA:  MOVWF  x82
02FCC:  CALL   0F16
02FD0:  INCF   x7E,F
02FD2:  BRA    2FA2
....................     }
....................     fprintf(EXT, "\n"); 
02FD4:  MOVLW  0A
02FD6:  MOVLB  1
02FD8:  MOVWF  xC2
02FDA:  MOVLB  0
02FDC:  CALL   0F3E
.................... 
....................        
....................         //write and read from COM flash memory
....................     fprintf(EXT, "Starting to write data in COM flash memory\n");
02FE0:  MOVLW  A0
02FE2:  MOVWF  FF6
02FE4:  MOVLW  0E
02FE6:  MOVWF  FF7
02FE8:  MOVLW  00
02FEA:  MOVWF  FF8
02FEC:  CALL   0F84
....................     WRITE_DATA_NBYTES_COM(0x00005000,bichigcom,29);
02FF0:  CLRF   x84
02FF2:  CLRF   x83
02FF4:  MOVLW  50
02FF6:  MOVWF  x82
02FF8:  CLRF   x81
02FFA:  CLRF   x86
02FFC:  MOVLW  1F
02FFE:  MOVWF  x85
03000:  MOVLW  1D
03002:  MOVWF  x87
03004:  GOTO   182A
....................     delay_ms(1000);
03008:  MOVLW  04
0300A:  MOVWF  x81
0300C:  MOVLW  FA
0300E:  MOVWF  x82
03010:  CALL   0F16
03014:  DECFSZ x81,F
03016:  BRA    300C
....................     
....................     read_data_com = READ_DATA_NBYTES_COM(0x00005000, 29);
03018:  CLRF   x84
0301A:  CLRF   x83
0301C:  MOVLW  50
0301E:  MOVWF  x82
03020:  CLRF   x81
03022:  MOVLW  1D
03024:  MOVWF  x85
03026:  GOTO   1994
0302A:  MOVFF  02,7B
0302E:  MOVFF  01,7A
....................     delay_ms(1000);
03032:  MOVLW  04
03034:  MOVWF  x81
03036:  MOVLW  FA
03038:  MOVWF  x82
0303A:  CALL   0F16
0303E:  DECFSZ x81,F
03040:  BRA    3036
....................     for (int i = 1; i < read_data_com[i]; i++) {
03042:  MOVLW  01
03044:  MOVWF  x7F
03046:  MOVF   x7F,W
03048:  ADDWF  x7A,W
0304A:  MOVWF  FE9
0304C:  MOVLW  00
0304E:  ADDWFC x7B,W
03050:  MOVWF  FEA
03052:  MOVF   FEF,W
03054:  SUBWF  x7F,W
03056:  BC    3078
....................         fprintf(EXT, "%c", read_data_com[i]);
03058:  MOVF   x7F,W
0305A:  ADDWF  x7A,W
0305C:  MOVWF  FE9
0305E:  MOVLW  00
03060:  ADDWFC x7B,W
03062:  MOVWF  FEA
03064:  MOVFF  FEF,1C2
03068:  CALL   0F3E
....................         delay_ms(2);
0306C:  MOVLW  02
0306E:  MOVWF  x82
03070:  CALL   0F16
03074:  INCF   x7F,F
03076:  BRA    3046
....................     }
....................     fprintf(EXT, "\n"); 
03078:  MOVLW  0A
0307A:  MOVLB  1
0307C:  MOVWF  xC2
0307E:  MOVLB  0
03080:  CALL   0F3E
....................     
....................     
....................   
....................     //write and read from ADCS flash memory
....................     fprintf(EXT, "Starting to write data in ADCS flash memory\n");
03084:  MOVLW  CC
03086:  MOVWF  FF6
03088:  MOVLW  0E
0308A:  MOVWF  FF7
0308C:  MOVLW  00
0308E:  MOVWF  FF8
03090:  CALL   0F84
....................     WRITE_DATA_NBYTES_ADCS(0x00005000,bichigadcs,29);
03094:  CLRF   x84
03096:  CLRF   x83
03098:  MOVLW  50
0309A:  MOVWF  x82
0309C:  CLRF   x81
0309E:  CLRF   x86
030A0:  MOVLW  37
030A2:  MOVWF  x85
030A4:  MOVLW  1D
030A6:  MOVWF  x87
030A8:  GOTO   1AA8
....................     delay_ms(1000);
030AC:  MOVLW  04
030AE:  MOVWF  x81
030B0:  MOVLW  FA
030B2:  MOVWF  x82
030B4:  CALL   0F16
030B8:  DECFSZ x81,F
030BA:  BRA    30B0
....................     
....................     read_data_adcs = READ_DATA_NBYTES_ADCS(0x00005000, 29);
030BC:  CLRF   x84
030BE:  CLRF   x83
030C0:  MOVLW  50
030C2:  MOVWF  x82
030C4:  CLRF   x81
030C6:  MOVLW  1D
030C8:  MOVWF  x85
030CA:  GOTO   1C20
030CE:  MOVFF  02,7D
030D2:  MOVFF  01,7C
....................     delay_ms(1000);
030D6:  MOVLW  04
030D8:  MOVWF  x81
030DA:  MOVLW  FA
030DC:  MOVWF  x82
030DE:  CALL   0F16
030E2:  DECFSZ x81,F
030E4:  BRA    30DA
....................     for (int i = 1; i < read_data_adcs[i]; i++) {
030E6:  MOVLW  01
030E8:  MOVWF  x80
030EA:  MOVF   x80,W
030EC:  ADDWF  x7C,W
030EE:  MOVWF  FE9
030F0:  MOVLW  00
030F2:  ADDWFC x7D,W
030F4:  MOVWF  FEA
030F6:  MOVF   FEF,W
030F8:  SUBWF  x80,W
030FA:  BC    311C
....................         fprintf(EXT, "%c", read_data_adcs[i]);
030FC:  MOVF   x80,W
030FE:  ADDWF  x7C,W
03100:  MOVWF  FE9
03102:  MOVLW  00
03104:  ADDWFC x7D,W
03106:  MOVWF  FEA
03108:  MOVFF  FEF,1C2
0310C:  CALL   0F3E
....................         delay_ms(2);
03110:  MOVLW  02
03112:  MOVWF  x82
03114:  CALL   0F16
03118:  INCF   x80,F
0311A:  BRA    30EA
....................     }
....................     fprintf(EXT, "\n"); 
0311C:  MOVLW  0A
0311E:  MOVLB  1
03120:  MOVWF  xC2
03122:  MOVLB  0
03124:  CALL   0F3E
....................     //------------------------MAIN_MENU-------------------------------
....................     while (TRUE) {
....................         if (kbhit(EXT)) {
03128:  BTFSC  F82.7
0312A:  BRA    313E
....................             main_menu();
0312C:  BRA    2C5A
....................             fprintf(EXT, "exiting main menu function");
0312E:  MOVLW  FA
03130:  MOVWF  FF6
03132:  MOVLW  0E
03134:  MOVWF  FF7
03136:  MOVLW  00
03138:  MOVWF  FF8
0313A:  CALL   0F84
....................         }
0313E:  BRA    3128
....................     }
.................... }
.................... 
03140:  BRA    3140
.................... 

Configuration Fuses:
   Word  1: F600   NOSTVREN NOXINST DEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS DSWDT_ DSWDT DSWDTOSC_INT

   Some fuses have been forced to be compatible with the ICD debugger.
