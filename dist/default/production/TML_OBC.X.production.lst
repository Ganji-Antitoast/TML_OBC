CCS PCH C Compiler, Version 5.112, 5967               03-Nov-24 17:19

               Filename:   C:\Users\Ganji\Documents\------TEMUULEL------\CODE\TML_OBC.X\dist\default\production\TML_OBC.X.production.lst

               ROM used:   12696 bytes (10%)
                           Largest free fragment is 65520
               RAM used:   444 (12%) at main() level
                           772 (22%) worst case
               Stack used: 3 locations
               Stack size: 30

*
00000:  NOP   
00002:  GOTO   2E5E
.................... #import(file="build/default/production/main.o")
.................... /* 
.................... /* 
....................  * File:   main.c
....................  * Author: Ganji
....................  *  ____    _    _   _     _ ___ 
....................    / ___|  / \  | \ | |   | |_ _|
....................   | |  _  / _ \ |  \| |_  | || | 
....................   | |_| |/ ___ \| |\  | |_| || | 
....................    \____/_/   \_\_| \_|\___/|___| 
....................  *
....................  * Created on September 12, 2024, 7:31 AM
....................  */
.................... 
.................... #include <main.h>
.................... /* 
....................  * File:   main.h
....................  * Author: Ganji
....................  *
....................  * Created on October 22, 2024, 3:31 PM
....................  */
.................... 
.................... #ifndef MAIN_H
.................... #define	MAIN_H
.................... 
.................... #ifdef	__cplusplus
.................... extern "C" {
.................... #endif
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
00006:  DATA 57,52
00008:  DATA 49,54
0000A:  DATA 45,20
0000C:  DATA 41,44
0000E:  DATA 44,52
00010:  DATA 45,53
00012:  DATA 53,3A
00014:  DATA 20,30
00016:  DATA 78,25
00018:  DATA 30,38
0001A:  DATA 6C,78
0001C:  DATA 0A,00
0001E:  DATA 0A,25
00020:  DATA 64,20
00022:  DATA 42,59
00024:  DATA 54,45
00026:  DATA 53,20
00028:  DATA 57,52
0002A:  DATA 49,54
0002C:  DATA 54,45
0002E:  DATA 4E,20
00030:  DATA 49,4E
00032:  DATA 20,4D
00034:  DATA 41,49
00036:  DATA 4E,21
00038:  DATA 0A,00
0003A:  DATA 57,52
0003C:  DATA 49,54
0003E:  DATA 45,20
00040:  DATA 41,44
00042:  DATA 44,52
00044:  DATA 45,53
00046:  DATA 53,20
00048:  DATA 49,4E
0004A:  DATA 20,43
0004C:  DATA 4F,4D
0004E:  DATA 3A,20
00050:  DATA 30,78
00052:  DATA 25,30
00054:  DATA 38,6C
00056:  DATA 78,0A
00058:  DATA 00,00
0005A:  DATA 0A,25
0005C:  DATA 64,20
0005E:  DATA 42,59
00060:  DATA 54,45
00062:  DATA 53,20
00064:  DATA 57,52
00066:  DATA 49,54
00068:  DATA 54,45
0006A:  DATA 4E,20
0006C:  DATA 49,4E
0006E:  DATA 20,43
00070:  DATA 4F,4D
00072:  DATA 21,0A
00074:  DATA 00,00
00076:  DATA 57,52
00078:  DATA 49,54
0007A:  DATA 45,20
0007C:  DATA 41,44
0007E:  DATA 44,52
00080:  DATA 45,53
00082:  DATA 53,20
00084:  DATA 49,4E
00086:  DATA 20,41
00088:  DATA 44,43
0008A:  DATA 53,3A
0008C:  DATA 20,30
0008E:  DATA 78,25
00090:  DATA 30,38
00092:  DATA 6C,78
00094:  DATA 0A,00
00096:  DATA 0A,25
00098:  DATA 64,20
0009A:  DATA 42,59
0009C:  DATA 54,45
0009E:  DATA 53,20
000A0:  DATA 57,52
000A2:  DATA 49,54
000A4:  DATA 54,45
000A6:  DATA 4E,20
000A8:  DATA 49,4E
000AA:  DATA 20,41
000AC:  DATA 44,43
000AE:  DATA 53,21
000B0:  DATA 0A,00
000B2:  DATA 50,4F
000B4:  DATA 57,45
000B6:  DATA 52,20
000B8:  DATA 4F,4E
000BA:  DATA 21,0A
000BC:  DATA 00,00
000BE:  DATA 44,69
000C0:  DATA 67,69
000C2:  DATA 74,61
000C4:  DATA 6C,20
000C6:  DATA 70,69
000C8:  DATA 6E,20
000CA:  DATA 6F,75
000CC:  DATA 74,20
000CE:  DATA 63,6F
000D0:  DATA 6E,66
000D2:  DATA 69,67
000D4:  DATA 75,72
000D6:  DATA 65,64
000D8:  DATA 20,0A
000DA:  DATA 00,00
000DC:  DATA 52,54
000DE:  DATA 43,43
000E0:  DATA 20,73
000E2:  DATA 65,74
000E4:  DATA 75,70
000E6:  DATA 20,73
000E8:  DATA 74,61
000EA:  DATA 72,74
000EC:  DATA 65,64
000EE:  DATA 21,0A
000F0:  DATA 00,00
000F2:  DATA 53,68
000F4:  DATA 75,74
000F6:  DATA 64,6F
000F8:  DATA 77,6E
000FA:  DATA 20,63
000FC:  DATA 6F,75
000FE:  DATA 6E,74
00100:  DATA 20,73
00102:  DATA 74,61
00104:  DATA 72,74
00106:  DATA 65,64
00108:  DATA 0A,00
0010A:  DATA 52,65
0010C:  DATA 61,64
0010E:  DATA 20,73
00110:  DATA 68,75
00112:  DATA 74,64
00114:  DATA 6F,77
00116:  DATA 6E,20
00118:  DATA 63,6F
0011A:  DATA 75,6E
0011C:  DATA 74,3A
0011E:  DATA 20,25
00120:  DATA 75,0A
00122:  DATA 00,00
00124:  DATA 53,68
00126:  DATA 75,74
00128:  DATA 64,6F
0012A:  DATA 77,6E
0012C:  DATA 20,63
0012E:  DATA 6F,75
00130:  DATA 6E,74
00132:  DATA 20,75
00134:  DATA 6E,69
00136:  DATA 6E,69
00138:  DATA 74,69
0013A:  DATA 61,6C
0013C:  DATA 69,7A
0013E:  DATA 65,64
00140:  DATA 2C,20
00142:  DATA 73,65
00144:  DATA 74,74
00146:  DATA 69,6E
00148:  DATA 67,20
0014A:  DATA 74,6F
0014C:  DATA 20,30
0014E:  DATA 0A,00
00150:  DATA 53,68
00152:  DATA 75,74
00154:  DATA 64,6F
00156:  DATA 77,6E
00158:  DATA 20,63
0015A:  DATA 6F,75
0015C:  DATA 6E,74
0015E:  DATA 20,73
00160:  DATA 75,63
00162:  DATA 63,65
00164:  DATA 73,73
00166:  DATA 66,75
00168:  DATA 6C,6C
0016A:  DATA 79,20
0016C:  DATA 75,70
0016E:  DATA 64,61
00170:  DATA 74,65
00172:  DATA 64,3A
00174:  DATA 20,25
00176:  DATA 75,0A
00178:  DATA 00,00
0017A:  DATA 46,61
0017C:  DATA 69,6C
0017E:  DATA 65,64
00180:  DATA 20,74
00182:  DATA 6F,20
00184:  DATA 75,70
00186:  DATA 64,61
00188:  DATA 74,65
0018A:  DATA 20,73
0018C:  DATA 68,75
0018E:  DATA 74,64
00190:  DATA 6F,77
00192:  DATA 6E,20
00194:  DATA 63,6F
00196:  DATA 75,6E
00198:  DATA 74,2E
0019A:  DATA 20,52
0019C:  DATA 65,61
0019E:  DATA 64,20
001A0:  DATA 62,61
001A2:  DATA 63,6B
001A4:  DATA 3A,20
001A6:  DATA 25,75
001A8:  DATA 0A,00
001AA:  DATA 0A,45
001AC:  DATA 6E,74
001AE:  DATA 65,72
001B0:  DATA 20,41
001B2:  DATA 64,64
001B4:  DATA 72,65
001B6:  DATA 73,73
001B8:  DATA 20,28
001BA:  DATA 68,65
001BC:  DATA 78,2C
001BE:  DATA 20,30
001C0:  DATA 78,31
001C2:  DATA 32,33
001C4:  DATA 34,29
001C6:  DATA 3A,20
001C8:  DATA 30,78
001CA:  DATA 00,00
001CC:  DATA 0A,45
001CE:  DATA 6E,74
001D0:  DATA 65,72
001D2:  DATA 20,6E
001D4:  DATA 75,6D
001D6:  DATA 62,65
001D8:  DATA 72,20
001DA:  DATA 6F,66
001DC:  DATA 20,62
001DE:  DATA 79,74
001E0:  DATA 65,73
001E2:  DATA 20,74
001E4:  DATA 6F,20
001E6:  DATA 77,72
001E8:  DATA 69,74
001EA:  DATA 65,20
001EC:  DATA 28,6D
001EE:  DATA 61,78
001F0:  DATA 20,32
001F2:  DATA 35,36
001F4:  DATA 29,3A
001F6:  DATA 20,00
001F8:  DATA 45,72
001FA:  DATA 72,6F
001FC:  DATA 72,3A
001FE:  DATA 20,4D
00200:  DATA 61,78
00202:  DATA 69,6D
00204:  DATA 75,6D
00206:  DATA 20,64
00208:  DATA 61,74
0020A:  DATA 61,20
0020C:  DATA 6C,65
0020E:  DATA 6E,67
00210:  DATA 74,68
00212:  DATA 20,69
00214:  DATA 73,20
00216:  DATA 32,35
00218:  DATA 36,20
0021A:  DATA 62,79
0021C:  DATA 74,65
0021E:  DATA 73,2E
00220:  DATA 0A,00
00222:  DATA 45,6E
00224:  DATA 74,65
00226:  DATA 72,20
00228:  DATA 25,64
0022A:  DATA 20,62
0022C:  DATA 79,74
0022E:  DATA 65,73
00230:  DATA 20,6F
00232:  DATA 66,20
00234:  DATA 64,61
00236:  DATA 74,61
00238:  DATA 20,28
0023A:  DATA 69,6E
0023C:  DATA 20,68
0023E:  DATA 65,78
00240:  DATA 29,3A
00242:  DATA 0A,00
00244:  DATA 42,79
00246:  DATA 74,65
00248:  DATA 20,25
0024A:  DATA 64,3A
0024C:  DATA 20,30
0024E:  DATA 78,00
00250:  DATA 0A,44
00252:  DATA 61,74
00254:  DATA 61,20
00256:  DATA 73,75
00258:  DATA 63,63
0025A:  DATA 65,73
0025C:  DATA 73,66
0025E:  DATA 75,6C
00260:  DATA 6C,79
00262:  DATA 20,77
00264:  DATA 72,69
00266:  DATA 74,74
00268:  DATA 65,6E
0026A:  DATA 2E,0A
0026C:  DATA 00,00
0026E:  DATA 4D,41
00270:  DATA 49,4E
00272:  DATA 20,66
00274:  DATA 6C,61
00276:  DATA 73,68
00278:  DATA 20,6D
0027A:  DATA 65,6D
0027C:  DATA 6F,72
0027E:  DATA 79,20
00280:  DATA 63,68
00282:  DATA 6F,73
00284:  DATA 65,6E
00286:  DATA 0A,00
00288:  DATA 70,72
0028A:  DATA 65,73
0028C:  DATA 73,20
0028E:  DATA 61,3A
00290:  DATA 20,52
00292:  DATA 65,61
00294:  DATA 64,20
00296:  DATA 49,44
00298:  DATA 20,6F
0029A:  DATA 66,20
0029C:  DATA 74,68
0029E:  DATA 65,20
002A0:  DATA 63,68
002A2:  DATA 69,70
002A4:  DATA 0A,00
002A6:  DATA 70,72
002A8:  DATA 65,73
002AA:  DATA 73,20
002AC:  DATA 62,3A
002AE:  DATA 20,57
002B0:  DATA 72,69
002B2:  DATA 74,65
002B4:  DATA 20,64
002B6:  DATA 61,74
002B8:  DATA 61,20
002BA:  DATA 73,65
002BC:  DATA 74,20
002BE:  DATA 69,6E
002C0:  DATA 20,73
002C2:  DATA 70,65
002C4:  DATA 63,69
002C6:  DATA 66,69
002C8:  DATA 65,64
002CA:  DATA 20,61
002CC:  DATA 64,64
002CE:  DATA 72,65
002D0:  DATA 73,73
002D2:  DATA 0A,00
002D4:  DATA 70,72
002D6:  DATA 65,73
002D8:  DATA 73,20
002DA:  DATA 63,3A
002DC:  DATA 20,52
002DE:  DATA 65,61
002E0:  DATA 64,20
002E2:  DATA 64,61
002E4:  DATA 74,61
002E6:  DATA 20,73
002E8:  DATA 65,74
002EA:  DATA 20,69
002EC:  DATA 6E,20
002EE:  DATA 73,70
002F0:  DATA 65,63
002F2:  DATA 69,66
002F4:  DATA 69,65
002F6:  DATA 64,20
002F8:  DATA 61,64
002FA:  DATA 64,72
002FC:  DATA 65,73
002FE:  DATA 73,0A
00300:  DATA 00,00
00302:  DATA 70,72
00304:  DATA 65,73
00306:  DATA 73,20
00308:  DATA 78,3A
0030A:  DATA 20,52
0030C:  DATA 65,74
0030E:  DATA 75,72
00310:  DATA 6E,20
00312:  DATA 74,6F
00314:  DATA 20,4D
00316:  DATA 41,49
00318:  DATA 4E,20
0031A:  DATA 4D,45
0031C:  DATA 4E,55
0031E:  DATA 0A,00
00320:  DATA 53,74
00322:  DATA 61,72
00324:  DATA 74,65
00326:  DATA 64,20
00328:  DATA 72,65
0032A:  DATA 61,64
0032C:  DATA 69,6E
0032E:  DATA 67,20
00330:  DATA 63,68
00332:  DATA 69,70
00334:  DATA 20,49
00336:  DATA 44,20
00338:  DATA 6F,66
0033A:  DATA 20,4D
0033C:  DATA 41,49
0033E:  DATA 4E,20
00340:  DATA 66,6C
00342:  DATA 61,73
00344:  DATA 68,20
00346:  DATA 6D,65
00348:  DATA 6D,6F
0034A:  DATA 72,79
0034C:  DATA 0A,00
0034E:  DATA 52,65
00350:  DATA 61,64
00352:  DATA 20,64
00354:  DATA 61,74
00356:  DATA 61,20
00358:  DATA 73,65
0035A:  DATA 74,20
0035C:  DATA 69,6E
0035E:  DATA 20,73
00360:  DATA 70,65
00362:  DATA 63,69
00364:  DATA 66,69
00366:  DATA 65,64
00368:  DATA 20,61
0036A:  DATA 64,64
0036C:  DATA 72,65
0036E:  DATA 73,73
00370:  DATA 0A,00
00372:  DATA 45,6E
00374:  DATA 74,65
00376:  DATA 72,20
00378:  DATA 79,6F
0037A:  DATA 75,72
0037C:  DATA 20,73
0037E:  DATA 70,65
00380:  DATA 63,69
00382:  DATA 66,69
00384:  DATA 65,64
00386:  DATA 20,61
00388:  DATA 64,64
0038A:  DATA 72,65
0038C:  DATA 73,73
0038E:  DATA 3A,20
00390:  DATA 00,00
00392:  DATA 45,6E
00394:  DATA 74,65
00396:  DATA 72,20
00398:  DATA 79,6F
0039A:  DATA 75,72
0039C:  DATA 20,73
0039E:  DATA 70,65
003A0:  DATA 63,69
003A2:  DATA 66,69
003A4:  DATA 65,64
003A6:  DATA 20,61
003A8:  DATA 64,64
003AA:  DATA 72,65
003AC:  DATA 73,73
003AE:  DATA 20,6C
003B0:  DATA 65,6E
003B2:  DATA 67,74
003B4:  DATA 68,20
003B6:  DATA 3A,20
003B8:  DATA 00,00
003BA:  DATA 49,6E
003BC:  DATA 76,61
003BE:  DATA 6C,69
003C0:  DATA 64,20
003C2:  DATA 4D,41
003C4:  DATA 49,4E
003C6:  DATA 20,66
003C8:  DATA 6C,61
003CA:  DATA 73,68
003CC:  DATA 20,6D
003CE:  DATA 65,6D
003D0:  DATA 6F,72
003D2:  DATA 79,20
003D4:  DATA 6F,70
003D6:  DATA 74,69
003D8:  DATA 6F,6E
003DA:  DATA 2E,20
003DC:  DATA 50,6C
003DE:  DATA 65,61
003E0:  DATA 73,65
003E2:  DATA 20,74
003E4:  DATA 72,79
003E6:  DATA 20,61
003E8:  DATA 67,61
003EA:  DATA 69,6E
003EC:  DATA 2E,0A
003EE:  DATA 00,00
003F0:  DATA 70,72
003F2:  DATA 65,73
003F4:  DATA 73,65
003F6:  DATA 64,20
003F8:  DATA 6F,70
003FA:  DATA 74,69
003FC:  DATA 6F,6E
003FE:  DATA 20,64
00400:  DATA 3A,20
00402:  DATA 43,68
00404:  DATA 65,63
00406:  DATA 6B,20
00408:  DATA 46,6C
0040A:  DATA 61,73
0040C:  DATA 68,20
0040E:  DATA 4D,65
00410:  DATA 6D,6F
00412:  DATA 72,69
00414:  DATA 65,73
00416:  DATA 0A,0A
00418:  DATA 00,00
0041A:  DATA 50,6C
0041C:  DATA 65,61
0041E:  DATA 73,65
00420:  DATA 20,63
00422:  DATA 68,6F
00424:  DATA 6F,73
00426:  DATA 65,20
00428:  DATA 77,68
0042A:  DATA 69,63
0042C:  DATA 68,20
0042E:  DATA 66,6C
00430:  DATA 61,73
00432:  DATA 68,20
00434:  DATA 6D,65
00436:  DATA 6D,6F
00438:  DATA 72,79
0043A:  DATA 20,74
0043C:  DATA 6F,20
0043E:  DATA 77,6F
00440:  DATA 72,6B
00442:  DATA 20,6F
00444:  DATA 6E,20
00446:  DATA 28,61
00448:  DATA 2C,20
0044A:  DATA 62,2C
0044C:  DATA 20,63
0044E:  DATA 29,3A
00450:  DATA 0A,00
00452:  DATA 70,72
00454:  DATA 65,73
00456:  DATA 73,20
00458:  DATA 61,3A
0045A:  DATA 20,4D
0045C:  DATA 41,49
0045E:  DATA 4E,20
00460:  DATA 66,6C
00462:  DATA 61,73
00464:  DATA 68,20
00466:  DATA 6D,65
00468:  DATA 6D,6F
0046A:  DATA 72,79
0046C:  DATA 0A,00
0046E:  DATA 70,72
00470:  DATA 65,73
00472:  DATA 73,20
00474:  DATA 62,3A
00476:  DATA 20,43
00478:  DATA 4F,4D
0047A:  DATA 20,73
0047C:  DATA 68,61
0047E:  DATA 72,65
00480:  DATA 64,20
00482:  DATA 66,6C
00484:  DATA 61,73
00486:  DATA 68,20
00488:  DATA 6D,65
0048A:  DATA 6D,6F
0048C:  DATA 72,79
0048E:  DATA 0A,00
00490:  DATA 70,72
00492:  DATA 65,73
00494:  DATA 73,20
00496:  DATA 63,3A
00498:  DATA 20,41
0049A:  DATA 44,43
0049C:  DATA 53,20
0049E:  DATA 73,68
004A0:  DATA 61,72
004A2:  DATA 65,64
004A4:  DATA 20,66
004A6:  DATA 6C,61
004A8:  DATA 73,68
004AA:  DATA 20,6D
004AC:  DATA 65,6D
004AE:  DATA 6F,72
004B0:  DATA 79,0A
004B2:  DATA 00,00
004B4:  DATA 70,72
004B6:  DATA 65,73
004B8:  DATA 73,20
004BA:  DATA 64,3A
004BC:  DATA 20,4F
004BE:  DATA 56,43
004C0:  DATA 41,4D
004C2:  DATA 20,73
004C4:  DATA 68,61
004C6:  DATA 72,65
004C8:  DATA 64,20
004CA:  DATA 66,6C
004CC:  DATA 61,73
004CE:  DATA 68,20
004D0:  DATA 6D,65
004D2:  DATA 6D,6F
004D4:  DATA 72,79
004D6:  DATA 0A,00
004D8:  DATA 70,72
004DA:  DATA 65,73
004DC:  DATA 73,20
004DE:  DATA 65,3A
004E0:  DATA 20,4D
004E2:  DATA 56,43
004E4:  DATA 41,4D
004E6:  DATA 20,73
004E8:  DATA 68,61
004EA:  DATA 72,65
004EC:  DATA 64,20
004EE:  DATA 66,6C
004F0:  DATA 61,73
004F2:  DATA 68,20
004F4:  DATA 6D,65
004F6:  DATA 6D,6F
004F8:  DATA 72,79
004FA:  DATA 0A,00
004FC:  DATA 70,72
004FE:  DATA 65,73
00500:  DATA 73,20
00502:  DATA 78,3A
00504:  DATA 20,52
00506:  DATA 65,74
00508:  DATA 75,72
0050A:  DATA 6E,20
0050C:  DATA 74,6F
0050E:  DATA 20,4D
00510:  DATA 41,49
00512:  DATA 4E,20
00514:  DATA 4D,45
00516:  DATA 4E,55
00518:  DATA 0A,00
0051A:  DATA 4D,41
0051C:  DATA 49,4E
0051E:  DATA 20,73
00520:  DATA 68,61
00522:  DATA 72,65
00524:  DATA 64,20
00526:  DATA 66,6C
00528:  DATA 61,73
0052A:  DATA 68,20
0052C:  DATA 6D,65
0052E:  DATA 6D,6F
00530:  DATA 72,79
00532:  DATA 20,63
00534:  DATA 68,6F
00536:  DATA 73,65
00538:  DATA 6E,0A
0053A:  DATA 00,00
0053C:  DATA 43,4F
0053E:  DATA 4D,20
00540:  DATA 73,68
00542:  DATA 61,72
00544:  DATA 65,64
00546:  DATA 20,66
00548:  DATA 6C,61
0054A:  DATA 73,68
0054C:  DATA 20,6D
0054E:  DATA 65,6D
00550:  DATA 6F,72
00552:  DATA 79,20
00554:  DATA 63,68
00556:  DATA 6F,73
00558:  DATA 65,6E
0055A:  DATA 0A,00
0055C:  DATA 41,44
0055E:  DATA 43,53
00560:  DATA 20,73
00562:  DATA 68,61
00564:  DATA 72,65
00566:  DATA 64,20
00568:  DATA 66,6C
0056A:  DATA 61,73
0056C:  DATA 68,20
0056E:  DATA 6D,65
00570:  DATA 6D,6F
00572:  DATA 72,79
00574:  DATA 20,63
00576:  DATA 68,6F
00578:  DATA 73,65
0057A:  DATA 6E,0A
0057C:  DATA 00,00
0057E:  DATA 4F,56
00580:  DATA 43,41
00582:  DATA 4D,20
00584:  DATA 73,68
00586:  DATA 61,72
00588:  DATA 65,64
0058A:  DATA 20,66
0058C:  DATA 6C,61
0058E:  DATA 73,68
00590:  DATA 20,6D
00592:  DATA 65,6D
00594:  DATA 6F,72
00596:  DATA 79,20
00598:  DATA 63,68
0059A:  DATA 6F,73
0059C:  DATA 65,6E
0059E:  DATA 0A,00
005A0:  DATA 4D,56
005A2:  DATA 43,41
005A4:  DATA 4D,20
005A6:  DATA 73,68
005A8:  DATA 61,72
005AA:  DATA 65,64
005AC:  DATA 20,66
005AE:  DATA 6C,61
005B0:  DATA 73,68
005B2:  DATA 20,6D
005B4:  DATA 65,6D
005B6:  DATA 6F,72
005B8:  DATA 79,20
005BA:  DATA 63,68
005BC:  DATA 6F,73
005BE:  DATA 65,6E
005C0:  DATA 0A,00
005C2:  DATA 49,6E
005C4:  DATA 76,61
005C6:  DATA 6C,69
005C8:  DATA 64,20
005CA:  DATA 66,6C
005CC:  DATA 61,73
005CE:  DATA 68,20
005D0:  DATA 6D,65
005D2:  DATA 6D,6F
005D4:  DATA 72,79
005D6:  DATA 20,6F
005D8:  DATA 70,74
005DA:  DATA 69,6F
005DC:  DATA 6E,2E
005DE:  DATA 20,50
005E0:  DATA 6C,65
005E2:  DATA 61,73
005E4:  DATA 65,20
005E6:  DATA 74,72
005E8:  DATA 79,20
005EA:  DATA 61,67
005EC:  DATA 61,69
005EE:  DATA 6E,2E
005F0:  DATA 0A,00
005F2:  DATA 53,65
005F4:  DATA 74,74
005F6:  DATA 69,6E
005F8:  DATA 67,73
005FA:  DATA 20,6F
005FC:  DATA 66,20
005FE:  DATA 52,54
00600:  DATA 43,20
00602:  DATA 63,68
00604:  DATA 6F,73
00606:  DATA 65,6E
00608:  DATA 0A,00
0060A:  DATA 20,20
0060C:  DATA 20,20
0060E:  DATA 70,72
00610:  DATA 65,73
00612:  DATA 73,20
00614:  DATA 61,3A
00616:  DATA 20,74
00618:  DATA 6F,20
0061A:  DATA 72,65
0061C:  DATA 73,65
0061E:  DATA 74,20
00620:  DATA 74,68
00622:  DATA 65,20
00624:  DATA 52,54
00626:  DATA 43,20
00628:  DATA 2F,61
0062A:  DATA 6C,6C
0062C:  DATA 20,63
0062E:  DATA 75,72
00630:  DATA 72,65
00632:  DATA 6E,74
00634:  DATA 20,74
00636:  DATA 69,6D
00638:  DATA 65,20
0063A:  DATA 77,69
0063C:  DATA 6C,6C
0063E:  DATA 20,62
00640:  DATA 65,20
00642:  DATA 73,65
00644:  DATA 74,20
00646:  DATA 7A,65
00648:  DATA 72,6F
0064A:  DATA 2F,0A
0064C:  DATA 00,00
0064E:  DATA 20,20
00650:  DATA 20,20
00652:  DATA 70,72
00654:  DATA 65,73
00656:  DATA 73,20
00658:  DATA 62,3A
0065A:  DATA 20,64
0065C:  DATA 69,73
0065E:  DATA 70,6C
00660:  DATA 61,79
00662:  DATA 20,63
00664:  DATA 75,72
00666:  DATA 72,65
00668:  DATA 6E,74
0066A:  DATA 20,74
0066C:  DATA 69,6D
0066E:  DATA 65,0A
00670:  DATA 00,00
00672:  DATA 4E,6F
00674:  DATA 77,20
00676:  DATA 74,69
00678:  DATA 6D,65
0067A:  DATA 20,69
0067C:  DATA 73,0A
0067E:  DATA 00,00
00680:  DATA 0D,25
00682:  DATA 30,32
00684:  DATA 75,2F
00686:  DATA 25,30
00688:  DATA 32,75
0068A:  DATA 2F,32
0068C:  DATA 30,25
0068E:  DATA 30,32
00690:  DATA 75,20
00692:  DATA 25,30
00694:  DATA 32,75
00696:  DATA 3A,25
00698:  DATA 30,32
0069A:  DATA 75,3A
0069C:  DATA 25,30
0069E:  DATA 32,75
006A0:  DATA 00,00
006A2:  DATA 54,69
006A4:  DATA 6D,65
006A6:  DATA 20,63
006A8:  DATA 68,61
006AA:  DATA 6E,67
006AC:  DATA 69,6E
006AE:  DATA 67,20
006B0:  DATA 66,75
006B2:  DATA 6E,63
006B4:  DATA 74,69
006B6:  DATA 6F,6E
006B8:  DATA 20,61
006BA:  DATA 63,74
006BC:  DATA 69,76
006BE:  DATA 61,74
006C0:  DATA 65,64
006C2:  DATA 0A,00
006C4:  DATA 54,69
006C6:  DATA 6D,65
006C8:  DATA 20,73
006CA:  DATA 75,63
006CC:  DATA 63,65
006CE:  DATA 73,73
006D0:  DATA 66,75
006D2:  DATA 6C,6C
006D4:  DATA 79,20
006D6:  DATA 63,68
006D8:  DATA 61,6E
006DA:  DATA 67,65
006DC:  DATA 64,2E
006DE:  DATA 20,43
006E0:  DATA 75,72
006E2:  DATA 72,65
006E4:  DATA 6E,74
006E6:  DATA 20,74
006E8:  DATA 69,6D
006EA:  DATA 65,20
006EC:  DATA 69,73
006EE:  DATA 3A,0A
006F0:  DATA 00,00
006F2:  DATA 0D,25
006F4:  DATA 30,32
006F6:  DATA 75,2F
006F8:  DATA 25,30
006FA:  DATA 32,75
006FC:  DATA 2F,32
006FE:  DATA 30,25
00700:  DATA 30,32
00702:  DATA 75,20
00704:  DATA 25,30
00706:  DATA 32,75
00708:  DATA 3A,25
0070A:  DATA 30,32
0070C:  DATA 75,3A
0070E:  DATA 25,30
00710:  DATA 32,75
00712:  DATA 00,00
00714:  DATA 0D,25
00716:  DATA 30,32
00718:  DATA 75,2F
0071A:  DATA 25,30
0071C:  DATA 32,75
0071E:  DATA 2F,32
00720:  DATA 30,25
00722:  DATA 30,32
00724:  DATA 75,20
00726:  DATA 25,30
00728:  DATA 32,75
0072A:  DATA 3A,25
0072C:  DATA 30,32
0072E:  DATA 75,3A
00730:  DATA 25,30
00732:  DATA 32,75
00734:  DATA 00,00
00736:  DATA 49,6E
00738:  DATA 76,61
0073A:  DATA 6C,69
0073C:  DATA 64,20
0073E:  DATA 49,4F
00740:  DATA 20,6F
00742:  DATA 70,74
00744:  DATA 69,6F
00746:  DATA 6E,2E
00748:  DATA 20,50
0074A:  DATA 6C,65
0074C:  DATA 61,73
0074E:  DATA 65,20
00750:  DATA 74,72
00752:  DATA 79,20
00754:  DATA 61,67
00756:  DATA 61,69
00758:  DATA 6E,2E
0075A:  DATA 0A,00
0075C:  DATA 49,4F
0075E:  DATA 20,63
00760:  DATA 6F,6E
00762:  DATA 74,72
00764:  DATA 6F,6C
00766:  DATA 20,63
00768:  DATA 68,6F
0076A:  DATA 73,65
0076C:  DATA 6E,0A
0076E:  DATA 00,00
00770:  DATA 20,20
00772:  DATA 20,20
00774:  DATA 70,72
00776:  DATA 65,73
00778:  DATA 73,20
0077A:  DATA 61,3A
0077C:  DATA 20,54
0077E:  DATA 6F,67
00780:  DATA 67,6C
00782:  DATA 65,20
00784:  DATA 45,4E
00786:  DATA 5F,53
00788:  DATA 55,50
0078A:  DATA 5F,33
0078C:  DATA 56,33
0078E:  DATA 5F,31
00790:  DATA 20,2F
00792:  DATA 69,73
00794:  DATA 20,63
00796:  DATA 75,72
00798:  DATA 72,65
0079A:  DATA 6E,74
0079C:  DATA 6C,79
0079E:  DATA 2F,00
007A0:  DATA 48,49
007A2:  DATA 47,48
007A4:  DATA 0A,00
007A6:  DATA 4C,4F
007A8:  DATA 57,0A
007AA:  DATA 00,00
007AC:  DATA 49,6E
007AE:  DATA 76,61
007B0:  DATA 6C,69
007B2:  DATA 64,0A
007B4:  DATA 00,00
007B6:  DATA 20,20
007B8:  DATA 20,20
007BA:  DATA 70,72
007BC:  DATA 65,73
007BE:  DATA 73,20
007C0:  DATA 62,3A
007C2:  DATA 20,54
007C4:  DATA 6F,67
007C6:  DATA 67,6C
007C8:  DATA 65,20
007CA:  DATA 45,4E
007CC:  DATA 5F,53
007CE:  DATA 55,50
007D0:  DATA 5F,33
007D2:  DATA 56,33
007D4:  DATA 5F,32
007D6:  DATA 20,2F
007D8:  DATA 69,73
007DA:  DATA 20,63
007DC:  DATA 75,72
007DE:  DATA 72,65
007E0:  DATA 6E,74
007E2:  DATA 6C,79
007E4:  DATA 2F,00
007E6:  DATA 48,49
007E8:  DATA 47,48
007EA:  DATA 0A,00
007EC:  DATA 4C,4F
007EE:  DATA 57,0A
007F0:  DATA 00,00
007F2:  DATA 49,6E
007F4:  DATA 76,61
007F6:  DATA 6C,69
007F8:  DATA 64,0A
007FA:  DATA 00,00
007FC:  DATA 20,20
007FE:  DATA 20,20
00800:  DATA 70,72
00802:  DATA 65,73
00804:  DATA 73,20
00806:  DATA 63,3A
00808:  DATA 20,54
0080A:  DATA 6F,67
0080C:  DATA 67,6C
0080E:  DATA 65,20
00810:  DATA 45,4E
00812:  DATA 5F,53
00814:  DATA 55,50
00816:  DATA 5F,33
00818:  DATA 56,33
0081A:  DATA 5F,44
0081C:  DATA 41,51
0081E:  DATA 20,2F
00820:  DATA 69,73
00822:  DATA 20,63
00824:  DATA 75,72
00826:  DATA 72,65
00828:  DATA 6E,74
0082A:  DATA 6C,79
0082C:  DATA 2F,00
0082E:  DATA 48,49
00830:  DATA 47,48
00832:  DATA 0A,00
00834:  DATA 4C,4F
00836:  DATA 57,0A
00838:  DATA 00,00
0083A:  DATA 49,6E
0083C:  DATA 76,61
0083E:  DATA 6C,69
00840:  DATA 64,0A
00842:  DATA 00,00
00844:  DATA 20,20
00846:  DATA 20,20
00848:  DATA 70,72
0084A:  DATA 65,73
0084C:  DATA 73,20
0084E:  DATA 64,3A
00850:  DATA 20,54
00852:  DATA 6F,67
00854:  DATA 67,6C
00856:  DATA 65,20
00858:  DATA 45,4E
0085A:  DATA 5F,53
0085C:  DATA 55,50
0085E:  DATA 5F,55
00860:  DATA 4E,52
00862:  DATA 45,47
00864:  DATA 20,2F
00866:  DATA 69,73
00868:  DATA 20,63
0086A:  DATA 75,72
0086C:  DATA 72,65
0086E:  DATA 6E,74
00870:  DATA 6C,79
00872:  DATA 2F,00
00874:  DATA 48,49
00876:  DATA 47,48
00878:  DATA 0A,00
0087A:  DATA 4C,4F
0087C:  DATA 57,0A
0087E:  DATA 00,00
00880:  DATA 49,6E
00882:  DATA 76,61
00884:  DATA 6C,69
00886:  DATA 64,0A
00888:  DATA 00,00
0088A:  DATA 20,20
0088C:  DATA 20,20
0088E:  DATA 70,72
00890:  DATA 65,73
00892:  DATA 73,20
00894:  DATA 65,3A
00896:  DATA 20,54
00898:  DATA 6F,67
0089A:  DATA 67,6C
0089C:  DATA 65,20
0089E:  DATA 45,4E
008A0:  DATA 5F,53
008A2:  DATA 55,50
008A4:  DATA 5F,35
008A6:  DATA 56,30
008A8:  DATA 20,2F
008AA:  DATA 69,73
008AC:  DATA 20,63
008AE:  DATA 75,72
008B0:  DATA 72,65
008B2:  DATA 6E,74
008B4:  DATA 6C,79
008B6:  DATA 2F,00
008B8:  DATA 48,49
008BA:  DATA 47,48
008BC:  DATA 0A,00
008BE:  DATA 4C,4F
008C0:  DATA 57,0A
008C2:  DATA 00,00
008C4:  DATA 49,6E
008C6:  DATA 76,61
008C8:  DATA 6C,69
008CA:  DATA 64,0A
008CC:  DATA 00,00
008CE:  DATA 20,20
008D0:  DATA 20,20
008D2:  DATA 70,72
008D4:  DATA 65,73
008D6:  DATA 73,20
008D8:  DATA 66,3A
008DA:  DATA 20,54
008DC:  DATA 6F,67
008DE:  DATA 67,6C
008E0:  DATA 65,20
008E2:  DATA 4B,49
008E4:  DATA 4C,4C
008E6:  DATA 5F,53
008E8:  DATA 57,49
008EA:  DATA 54,43
008EC:  DATA 48,20
008EE:  DATA 2F,69
008F0:  DATA 73,20
008F2:  DATA 63,75
008F4:  DATA 72,72
008F6:  DATA 65,6E
008F8:  DATA 74,6C
008FA:  DATA 79,2F
008FC:  DATA 00,00
008FE:  DATA 48,49
00900:  DATA 47,48
00902:  DATA 0A,00
00904:  DATA 4C,4F
00906:  DATA 57,0A
00908:  DATA 00,00
0090A:  DATA 49,6E
0090C:  DATA 76,61
0090E:  DATA 6C,69
00910:  DATA 64,0A
00912:  DATA 00,00
00914:  DATA 20,20
00916:  DATA 20,20
00918:  DATA 70,72
0091A:  DATA 65,73
0091C:  DATA 73,20
0091E:  DATA 67,3A
00920:  DATA 20,54
00922:  DATA 6F,67
00924:  DATA 67,6C
00926:  DATA 65,20
00928:  DATA 4D,56
0092A:  DATA 43,41
0092C:  DATA 4D,5F
0092E:  DATA 50,57
00930:  DATA 52,20
00932:  DATA 2F,69
00934:  DATA 73,20
00936:  DATA 63,75
00938:  DATA 72,72
0093A:  DATA 65,6E
0093C:  DATA 74,6C
0093E:  DATA 79,2F
00940:  DATA 00,00
00942:  DATA 48,49
00944:  DATA 47,48
00946:  DATA 0A,00
00948:  DATA 4C,4F
0094A:  DATA 57,0A
0094C:  DATA 00,00
0094E:  DATA 49,6E
00950:  DATA 76,61
00952:  DATA 6C,69
00954:  DATA 64,0A
00956:  DATA 00,00
00958:  DATA 20,20
0095A:  DATA 20,20
0095C:  DATA 70,72
0095E:  DATA 65,73
00960:  DATA 73,20
00962:  DATA 68,3A
00964:  DATA 20,54
00966:  DATA 6F,67
00968:  DATA 67,6C
0096A:  DATA 65,20
0096C:  DATA 4F,56
0096E:  DATA 43,41
00970:  DATA 4D,5F
00972:  DATA 50,57
00974:  DATA 52,20
00976:  DATA 2F,69
00978:  DATA 73,20
0097A:  DATA 63,75
0097C:  DATA 72,72
0097E:  DATA 65,6E
00980:  DATA 74,6C
00982:  DATA 79,2F
00984:  DATA 00,00
00986:  DATA 48,49
00988:  DATA 47,48
0098A:  DATA 0A,00
0098C:  DATA 4C,4F
0098E:  DATA 57,0A
00990:  DATA 00,00
00992:  DATA 49,6E
00994:  DATA 76,61
00996:  DATA 6C,69
00998:  DATA 64,0A
0099A:  DATA 00,00
0099C:  DATA 20,20
0099E:  DATA 20,20
009A0:  DATA 70,72
009A2:  DATA 65,73
009A4:  DATA 73,20
009A6:  DATA 69,3A
009A8:  DATA 20,54
009AA:  DATA 6F,67
009AC:  DATA 67,6C
009AE:  DATA 65,20
009B0:  DATA 41,44
009B2:  DATA 43,53
009B4:  DATA 5F,50
009B6:  DATA 57,52
009B8:  DATA 20,2F
009BA:  DATA 69,73
009BC:  DATA 20,63
009BE:  DATA 75,72
009C0:  DATA 72,65
009C2:  DATA 6E,74
009C4:  DATA 6C,79
009C6:  DATA 2F,00
009C8:  DATA 48,49
009CA:  DATA 47,48
009CC:  DATA 0A,00
009CE:  DATA 4C,4F
009D0:  DATA 57,0A
009D2:  DATA 00,00
009D4:  DATA 49,6E
009D6:  DATA 76,61
009D8:  DATA 6C,69
009DA:  DATA 64,0A
009DC:  DATA 00,00
009DE:  DATA 20,20
009E0:  DATA 20,20
009E2:  DATA 70,72
009E4:  DATA 65,73
009E6:  DATA 73,20
009E8:  DATA 6A,3A
009EA:  DATA 20,54
009EC:  DATA 6F,67
009EE:  DATA 67,6C
009F0:  DATA 65,20
009F2:  DATA 61,6C
009F4:  DATA 6C,20
009F6:  DATA 50,69
009F8:  DATA 6E,73
009FA:  DATA 00,00
009FC:  DATA 49,6E
009FE:  DATA 76,61
00A00:  DATA 6C,69
00A02:  DATA 64,20
00A04:  DATA 49,4F
00A06:  DATA 20,6F
00A08:  DATA 70,74
00A0A:  DATA 69,6F
00A0C:  DATA 6E,2E
00A0E:  DATA 20,50
00A10:  DATA 6C,65
00A12:  DATA 61,73
00A14:  DATA 65,20
00A16:  DATA 74,72
00A18:  DATA 79,20
00A1A:  DATA 61,67
00A1C:  DATA 61,69
00A1E:  DATA 6E,2E
00A20:  DATA 0A,00
00A22:  DATA 20,5F
00A24:  DATA 5F,20
00A26:  DATA 20,5F
00A28:  DATA 5F,20
00A2A:  DATA 5F,5F
00A2C:  DATA 5F,5F
00A2E:  DATA 5F,20
00A30:  DATA 5F,20
00A32:  DATA 20,20
00A34:  DATA 5F,20
00A36:  DATA 5F,20
00A38:  DATA 20,20
00A3A:  DATA 5F,20
00A3C:  DATA 20,20
00A3E:  DATA 5F,5F
00A40:  DATA 5F,5F
00A42:  DATA 5F,20
00A44:  DATA 20,20
00A46:  DATA 20,20
00A48:  DATA 20,20
00A4A:  DATA 20,20
00A4C:  DATA 20,20
00A4E:  DATA 20,20
00A50:  DATA 20,20
00A52:  DATA 20,20
00A54:  DATA 5F,20
00A56:  DATA 20,20
00A58:  DATA 5F,20
00A5A:  DATA 20,20
00A5C:  DATA 20,20
00A5E:  DATA 20,20
00A60:  DATA 20,20
00A62:  DATA 20,20
00A64:  DATA 20,20
00A66:  DATA 0A,00
00A68:  DATA 7C,20
00A6A:  DATA 20,5C
00A6C:  DATA 2F,20
00A6E:  DATA 20,7C
00A70:  DATA 20,5F
00A72:  DATA 5F,5F
00A74:  DATA 5F,7C
00A76:  DATA 20,5C
00A78:  DATA 20,7C
00A7A:  DATA 20,7C
00A7C:  DATA 20,7C
00A7E:  DATA 20,7C
00A80:  DATA 20,7C
00A82:  DATA 20,7C
00A84:  DATA 20,20
00A86:  DATA 5F,5F
00A88:  DATA 5F,7C
00A8A:  DATA 20,20
00A8C:  DATA 20,5F
00A8E:  DATA 20,5F
00A90:  DATA 20,5F
00A92:  DATA 5F,20
00A94:  DATA 20,20
00A96:  DATA 5F,5F
00A98:  DATA 5F,7C
00A9A:  DATA 20,7C
00A9C:  DATA 5F,28
00A9E:  DATA 5F,29
00AA0:  DATA 20,5F
00AA2:  DATA 5F,5F
00AA4:  DATA 20,20
00AA6:  DATA 5F,20
00AA8:  DATA 5F,5F
00AAA:  DATA 20,20
00AAC:  DATA 0A,00
00AAE:  DATA 7C,20
00AB0:  DATA 7C,5C
00AB2:  DATA 2F,7C
00AB4:  DATA 20,7C
00AB6:  DATA 20,20
00AB8:  DATA 5F,7C
00ABA:  DATA 20,7C
00ABC:  DATA 20,20
00ABE:  DATA 5C,7C
00AC0:  DATA 20,7C
00AC2:  DATA 20,7C
00AC4:  DATA 20,7C
00AC6:  DATA 20,7C
00AC8:  DATA 20,7C
00ACA:  DATA 20,7C
00ACC:  DATA 5F,20
00ACE:  DATA 7C,20
00AD0:  DATA 7C,20
00AD2:  DATA 7C,20
00AD4:  DATA 7C,20
00AD6:  DATA 27,5F
00AD8:  DATA 20,5C
00ADA:  DATA 20,2F
00ADC:  DATA 20,5F
00ADE:  DATA 5F,7C
00AE0:  DATA 20,5F
00AE2:  DATA 5F,7C
00AE4:  DATA 20,7C
00AE6:  DATA 2F,20
00AE8:  DATA 5F,20
00AEA:  DATA 5C,7C
00AEC:  DATA 20,27
00AEE:  DATA 5F,20
00AF0:  DATA 5C,20
00AF2:  DATA 0A,00
00AF4:  DATA 7C,20
00AF6:  DATA 7C,20
00AF8:  DATA 20,7C
00AFA:  DATA 20,7C
00AFC:  DATA 20,7C
00AFE:  DATA 5F,5F
00B00:  DATA 5F,7C
00B02:  DATA 20,7C
00B04:  DATA 5C,20
00B06:  DATA 20,7C
00B08:  DATA 20,7C
00B0A:  DATA 5F,7C
00B0C:  DATA 20,7C
00B0E:  DATA 20,7C
00B10:  DATA 20,20
00B12:  DATA 5F,7C
00B14:  DATA 7C,20
00B16:  DATA 7C,5F
00B18:  DATA 7C,20
00B1A:  DATA 7C,20
00B1C:  DATA 7C,20
00B1E:  DATA 7C,20
00B20:  DATA 7C,20
00B22:  DATA 28,5F
00B24:  DATA 5F,7C
00B26:  DATA 20,7C
00B28:  DATA 5F,7C
00B2A:  DATA 20,7C
00B2C:  DATA 20,28
00B2E:  DATA 5F,29
00B30:  DATA 20,7C
00B32:  DATA 20,7C
00B34:  DATA 20,7C
00B36:  DATA 20,7C
00B38:  DATA 0A,00
00B3A:  DATA 7C,5F
00B3C:  DATA 7C,20
00B3E:  DATA 5F,7C
00B40:  DATA 5F,7C
00B42:  DATA 5F,5F
00B44:  DATA 5F,5F
00B46:  DATA 5F,7C
00B48:  DATA 5F,7C
00B4A:  DATA 20,5C
00B4C:  DATA 5F,7C
00B4E:  DATA 5C,5F
00B50:  DATA 5F,5F
00B52:  DATA 2F,20
00B54:  DATA 20,7C
00B56:  DATA 5F,7C
00B58:  DATA 5F,20
00B5A:  DATA 20,5C
00B5C:  DATA 5F,5F
00B5E:  DATA 2C,5F
00B60:  DATA 7C,5F
00B62:  DATA 7C,20
00B64:  DATA 7C,5F
00B66:  DATA 7C,5C
00B68:  DATA 5F,5F
00B6A:  DATA 5F,7C
00B6C:  DATA 5C,5F
00B6E:  DATA 5F,7C
00B70:  DATA 5F,7C
00B72:  DATA 5C,5F
00B74:  DATA 5F,5F
00B76:  DATA 2F,7C
00B78:  DATA 5F,7C
00B7A:  DATA 20,7C
00B7C:  DATA 5F,7C
00B7E:  DATA 0A,00
00B80:  DATA 20,20
00B82:  DATA 20,2F
00B84:  DATA 20,5C
00B86:  DATA 20,20
00B88:  DATA 20,5F
00B8A:  DATA 5F,5F
00B8C:  DATA 7C,20
00B8E:  DATA 7C,5F
00B90:  DATA 28,5F
00B92:  DATA 29,5F
00B94:  DATA 20,20
00B96:  DATA 20,5F
00B98:  DATA 5F,5F
00B9A:  DATA 5F,20
00B9C:  DATA 5F,7C
00B9E:  DATA 20,7C
00BA0:  DATA 5F,20
00BA2:  DATA 5F,5F
00BA4:  DATA 5F,20
00BA6:  DATA 20,5F
00BA8:  DATA 5F,7C
00BAA:  DATA 20,7C
00BAC:  DATA 20,7C
00BAE:  DATA 20,20
00BB0:  DATA 20,20
00BB2:  DATA 20,20
00BB4:  DATA 20,20
00BB6:  DATA 20,20
00BB8:  DATA 20,20
00BBA:  DATA 20,20
00BBC:  DATA 20,20
00BBE:  DATA 20,20
00BC0:  DATA 20,20
00BC2:  DATA 20,20
00BC4:  DATA 0A,00
00BC6:  DATA 20,20
00BC8:  DATA 2F,20
00BCA:  DATA 5F,20
00BCC:  DATA 5C,20
00BCE:  DATA 2F,20
00BD0:  DATA 5F,5F
00BD2:  DATA 7C,20
00BD4:  DATA 5F,5F
00BD6:  DATA 7C,20
00BD8:  DATA 5C,20
00BDA:  DATA 5C,20
00BDC:  DATA 2F,20
00BDE:  DATA 2F,20
00BE0:  DATA 5F,60
00BE2:  DATA 20,7C
00BE4:  DATA 20,5F
00BE6:  DATA 5F,2F
00BE8:  DATA 20,5F
00BEA:  DATA 20,5C
00BEC:  DATA 2F,20
00BEE:  DATA 5F,60
00BF0:  DATA 20,7C
00BF2:  DATA 20,7C
00BF4:  DATA 20,20
00BF6:  DATA 20,20
00BF8:  DATA 20,20
00BFA:  DATA 20,20
00BFC:  DATA 20,20
00BFE:  DATA 20,20
00C00:  DATA 20,20
00C02:  DATA 20,20
00C04:  DATA 20,20
00C06:  DATA 20,20
00C08:  DATA 20,20
00C0A:  DATA 0A,00
00C0C:  DATA 20,2F
00C0E:  DATA 20,5F
00C10:  DATA 5F,5F
00C12:  DATA 20,5C
00C14:  DATA 20,28
00C16:  DATA 5F,5F
00C18:  DATA 7C,20
00C1A:  DATA 7C,5F
00C1C:  DATA 7C,20
00C1E:  DATA 7C,5C
00C20:  DATA 20,56
00C22:  DATA 20,2F
00C24:  DATA 20,28
00C26:  DATA 5F,7C
00C28:  DATA 20,7C
00C2A:  DATA 20,7C
00C2C:  DATA 7C,20
00C2E:  DATA 20,5F
00C30:  DATA 5F,2F
00C32:  DATA 20,28
00C34:  DATA 5F,7C
00C36:  DATA 20,7C
00C38:  DATA 5F,7C
00C3A:  DATA 20,20
00C3C:  DATA 20,20
00C3E:  DATA 20,20
00C40:  DATA 20,20
00C42:  DATA 20,20
00C44:  DATA 20,20
00C46:  DATA 20,20
00C48:  DATA 20,20
00C4A:  DATA 20,20
00C4C:  DATA 20,20
00C4E:  DATA 20,20
00C50:  DATA 0A,00
00C52:  DATA 2F,5F
00C54:  DATA 2F,20
00C56:  DATA 20,20
00C58:  DATA 5C,5F
00C5A:  DATA 5C,5F
00C5C:  DATA 5F,5F
00C5E:  DATA 7C,5C
00C60:  DATA 5F,5F
00C62:  DATA 7C,5F
00C64:  DATA 7C,20
00C66:  DATA 5C,5F
00C68:  DATA 2F,20
00C6A:  DATA 5C,5F
00C6C:  DATA 5F,2C
00C6E:  DATA 5F,7C
00C70:  DATA 5C,5F
00C72:  DATA 5F,5C
00C74:  DATA 5F,5F
00C76:  DATA 5F,7C
00C78:  DATA 5C,5F
00C7A:  DATA 5F,2C
00C7C:  DATA 5F,28
00C7E:  DATA 5F,29
00C80:  DATA 20,20
00C82:  DATA 20,20
00C84:  DATA 20,20
00C86:  DATA 20,20
00C88:  DATA 20,20
00C8A:  DATA 20,20
00C8C:  DATA 20,20
00C8E:  DATA 20,20
00C90:  DATA 20,20
00C92:  DATA 20,20
00C94:  DATA 20,20
00C96:  DATA 0A,00
00C98:  DATA 0A,2D
00C9A:  DATA 2D,2D
00C9C:  DATA 2D,2D
00C9E:  DATA 2D,2D
00CA0:  DATA 2D,2D
00CA2:  DATA 2D,2D
00CA4:  DATA 2D,2D
00CA6:  DATA 2D,2D
00CA8:  DATA 2D,2D
00CAA:  DATA 4D,61
00CAC:  DATA 69,6E
00CAE:  DATA 20,4D
00CB0:  DATA 65,6E
00CB2:  DATA 75,2D
00CB4:  DATA 2D,2D
00CB6:  DATA 2D,2D
00CB8:  DATA 2D,2D
00CBA:  DATA 2D,2D
00CBC:  DATA 2D,2D
00CBE:  DATA 2D,2D
00CC0:  DATA 2D,2D
00CC2:  DATA 2D,2D
00CC4:  DATA 0A,00
00CC6:  DATA 20,20
00CC8:  DATA 20,20
00CCA:  DATA 70,72
00CCC:  DATA 65,73
00CCE:  DATA 73,20
00CD0:  DATA 61,3A
00CD2:  DATA 20,47
00CD4:  DATA 65,74
00CD6:  DATA 20,48
00CD8:  DATA 6F,75
00CDA:  DATA 73,65
00CDC:  DATA 20,6B
00CDE:  DATA 65,65
00CE0:  DATA 70,69
00CE2:  DATA 6E,67
00CE4:  DATA 20,64
00CE6:  DATA 61,74
00CE8:  DATA 61,0A
00CEA:  DATA 00,00
00CEC:  DATA 20,20
00CEE:  DATA 20,20
00CF0:  DATA 70,72
00CF2:  DATA 65,73
00CF4:  DATA 73,20
00CF6:  DATA 62,3A
00CF8:  DATA 20,45
00CFA:  DATA 50,53
00CFC:  DATA 20,50
00CFE:  DATA 6F,77
00D00:  DATA 65,72
00D02:  DATA 20,6F
00D04:  DATA 75,74
00D06:  DATA 70,75
00D08:  DATA 74,20
00D0A:  DATA 63,6F
00D0C:  DATA 6E,74
00D0E:  DATA 72,6F
00D10:  DATA 6C,0A
00D12:  DATA 00,00
00D14:  DATA 20,20
00D16:  DATA 20,20
00D18:  DATA 70,72
00D1A:  DATA 65,73
00D1C:  DATA 73,20
00D1E:  DATA 63,3A
00D20:  DATA 20,48
00D22:  DATA 6F,75
00D24:  DATA 73,65
00D26:  DATA 20,6B
00D28:  DATA 65,65
00D2A:  DATA 70,69
00D2C:  DATA 6E,67
00D2E:  DATA 20,64
00D30:  DATA 61,74
00D32:  DATA 61,20
00D34:  DATA 63,6F
00D36:  DATA 6C,6C
00D38:  DATA 65,63
00D3A:  DATA 74,69
00D3C:  DATA 6F,6E
00D3E:  DATA 0A,00
00D40:  DATA 20,20
00D42:  DATA 20,20
00D44:  DATA 70,72
00D46:  DATA 65,73
00D48:  DATA 73,20
00D4A:  DATA 64,3A
00D4C:  DATA 20,43
00D4E:  DATA 68,65
00D50:  DATA 63,6B
00D52:  DATA 20,46
00D54:  DATA 6C,61
00D56:  DATA 73,68
00D58:  DATA 20,4D
00D5A:  DATA 65,6D
00D5C:  DATA 6F,72
00D5E:  DATA 69,65
00D60:  DATA 73,0A
00D62:  DATA 00,00
00D64:  DATA 20,20
00D66:  DATA 20,20
00D68:  DATA 70,72
00D6A:  DATA 65,73
00D6C:  DATA 73,20
00D6E:  DATA 65,3A
00D70:  DATA 20,53
00D72:  DATA 65,65
00D74:  DATA 20,73
00D76:  DATA 61,74
00D78:  DATA 65,6C
00D7A:  DATA 6C,69
00D7C:  DATA 74,65
00D7E:  DATA 20,4C
00D80:  DATA 6F,67
00D82:  DATA 0A,00
00D84:  DATA 20,20
00D86:  DATA 20,20
00D88:  DATA 70,72
00D8A:  DATA 65,73
00D8C:  DATA 73,20
00D8E:  DATA 66,3A
00D90:  DATA 20,53
00D92:  DATA 65,74
00D94:  DATA 74,69
00D96:  DATA 6E,67
00D98:  DATA 73,20
00D9A:  DATA 6F,66
00D9C:  DATA 20,52
00D9E:  DATA 54,43
00DA0:  DATA 0A,00
00DA2:  DATA 20,20
00DA4:  DATA 20,20
00DA6:  DATA 70,72
00DA8:  DATA 65,73
00DAA:  DATA 73,20
00DAC:  DATA 67,3A
00DAE:  DATA 20,53
00DB0:  DATA 61,74
00DB2:  DATA 65,6C
00DB4:  DATA 6C,69
00DB6:  DATA 74,65
00DB8:  DATA 20,6C
00DBA:  DATA 6F,67
00DBC:  DATA 20,64
00DBE:  DATA 6F,77
00DC0:  DATA 6E,2D
00DC2:  DATA 6C,69
00DC4:  DATA 6E,6B
00DC6:  DATA 20,63
00DC8:  DATA 6F,6D
00DCA:  DATA 6D,61
00DCC:  DATA 6E,64
00DCE:  DATA 0A,00
00DD0:  DATA 20,20
00DD2:  DATA 20,20
00DD4:  DATA 70,72
00DD6:  DATA 65,73
00DD8:  DATA 73,20
00DDA:  DATA 68,3A
00DDC:  DATA 20,49
00DDE:  DATA 48,43
00DE0:  DATA 20,4D
00DE2:  DATA 69,73
00DE4:  DATA 73,69
00DE6:  DATA 6F,6E
00DE8:  DATA 20,73
00DEA:  DATA 74,61
00DEC:  DATA 72,74
00DEE:  DATA 0A,00
00DF0:  DATA 20,20
00DF2:  DATA 20,20
00DF4:  DATA 70,72
00DF6:  DATA 65,73
00DF8:  DATA 73,20
00DFA:  DATA 69,3A
00DFC:  DATA 20,53
00DFE:  DATA 45,4C
00E00:  DATA 20,63
00E02:  DATA 75,72
00E04:  DATA 72,65
00E06:  DATA 6E,74
00E08:  DATA 20,4D
00E0A:  DATA 65,61
00E0C:  DATA 73,75
00E0E:  DATA 72,65
00E10:  DATA 6D,65
00E12:  DATA 6E,74
00E14:  DATA 0A,00
00E16:  DATA 20,20
00E18:  DATA 20,20
00E1A:  DATA 70,72
00E1C:  DATA 65,73
00E1E:  DATA 73,20
00E20:  DATA 6A,3A
00E22:  DATA 20,48
00E24:  DATA 38,20
00E26:  DATA 43,4F
00E28:  DATA 4D,20
00E2A:  DATA 52,65
00E2C:  DATA 73,65
00E2E:  DATA 74,0A
00E30:  DATA 00,00
00E32:  DATA 20,20
00E34:  DATA 20,20
00E36:  DATA 70,72
00E38:  DATA 65,73
00E3A:  DATA 73,20
00E3C:  DATA 69,3A
00E3E:  DATA 20,55
00E40:  DATA 41,52
00E42:  DATA 54,20
00E44:  DATA 72,65
00E46:  DATA 70,65
00E48:  DATA 61,74
00E4A:  DATA 65,72
00E4C:  DATA 20,6F
00E4E:  DATA 66,20
00E50:  DATA 45,50
00E52:  DATA 53,0A
00E54:  DATA 00,00
00E56:  DATA 20,20
00E58:  DATA 20,20
00E5A:  DATA 70,72
00E5C:  DATA 65,73
00E5E:  DATA 73,20
00E60:  DATA 78,3A
00E62:  DATA 20,45
00E64:  DATA 78,69
00E66:  DATA 74,20
00E68:  DATA 4D,61
00E6A:  DATA 69,6E
00E6C:  DATA 20,4D
00E6E:  DATA 65,6E
00E70:  DATA 75,0A
00E72:  DATA 00,00
00E74:  DATA 20,20
00E76:  DATA 20,20
00E78:  DATA 44,4F
00E7A:  DATA 20,4E
00E7C:  DATA 4F,54
00E7E:  DATA 20,55
00E80:  DATA 53,45
00E82:  DATA 20,43
00E84:  DATA 41,50
00E86:  DATA 49,54
00E88:  DATA 41,4C
00E8A:  DATA 20,43
00E8C:  DATA 48,41
00E8E:  DATA 52,41
00E90:  DATA 43,54
00E92:  DATA 45,52
00E94:  DATA 53,20
00E96:  DATA 54,4F
00E98:  DATA 20,57
00E9A:  DATA 52,49
00E9C:  DATA 54,45
00E9E:  DATA 21,0A
00EA0:  DATA 0A,00
00EA2:  DATA 55,41
00EA4:  DATA 52,54
00EA6:  DATA 20,52
00EA8:  DATA 65,70
00EAA:  DATA 65,61
00EAC:  DATA 74,65
00EAE:  DATA 72,20
00EB0:  DATA 49,6E
00EB2:  DATA 69,74
00EB4:  DATA 69,61
00EB6:  DATA 6C,69
00EB8:  DATA 7A,65
00EBA:  DATA 64,2E
00EBC:  DATA 0A,00
00EBE:  DATA 49,6E
00EC0:  DATA 76,61
00EC2:  DATA 6C,69
00EC4:  DATA 64,20
00EC6:  DATA 6F,70
00EC8:  DATA 74,69
00ECA:  DATA 6F,6E
00ECC:  DATA 2E,20
00ECE:  DATA 50,6C
00ED0:  DATA 65,61
00ED2:  DATA 73,65
00ED4:  DATA 20,74
00ED6:  DATA 72,79
00ED8:  DATA 20,61
00EDA:  DATA 67,61
00EDC:  DATA 69,6E
00EDE:  DATA 2E,0A
00EE0:  DATA 00,00
00EE2:  DATA 52,65
00EE4:  DATA 61,64
00EE6:  DATA 69,6E
00EE8:  DATA 67,20
00EEA:  DATA 63,68
00EEC:  DATA 69,70
00EEE:  DATA 20,49
00EF0:  DATA 44,20
00EF2:  DATA 6F,66
00EF4:  DATA 20,6D
00EF6:  DATA 61,69
00EF8:  DATA 6E,0A
00EFA:  DATA 00,00
00EFC:  DATA 52,65
00EFE:  DATA 61,64
00F00:  DATA 69,6E
00F02:  DATA 67,20
00F04:  DATA 63,68
00F06:  DATA 69,70
00F08:  DATA 20,49
00F0A:  DATA 44,20
00F0C:  DATA 6F,66
00F0E:  DATA 20,43
00F10:  DATA 4F,4D
00F12:  DATA 0A,00
00F14:  DATA 52,65
00F16:  DATA 61,64
00F18:  DATA 69,6E
00F1A:  DATA 67,20
00F1C:  DATA 63,68
00F1E:  DATA 69,70
00F20:  DATA 20,49
00F22:  DATA 44,20
00F24:  DATA 6F,66
00F26:  DATA 20,41
00F28:  DATA 44,43
00F2A:  DATA 53,0A
00F2C:  DATA 00,00
00F2E:  DATA 44,6F
00F30:  DATA 6E,65
00F32:  DATA 20,72
00F34:  DATA 65,61
00F36:  DATA 64,69
00F38:  DATA 6E,67
00F3A:  DATA 20,63
00F3C:  DATA 68,69
00F3E:  DATA 70,20
00F40:  DATA 49,44
00F42:  DATA 0A,00
00F44:  DATA 65,78
00F46:  DATA 69,74
00F48:  DATA 69,6E
00F4A:  DATA 67,20
00F4C:  DATA 6D,61
00F4E:  DATA 69,6E
00F50:  DATA 20,6D
00F52:  DATA 65,6E
00F54:  DATA 75,20
00F56:  DATA 66,75
00F58:  DATA 6E,63
00F5A:  DATA 74,69
00F5C:  DATA 6F,6E
00F5E:  DATA 00,00
*
00FD0:  TBLRD*+
00FD2:  MOVF   FF5,F
00FD4:  BZ    0FF6
00FD6:  MOVFF  FF6,2E9
00FDA:  MOVFF  FF7,2EA
00FDE:  MOVFF  FF8,2EB
00FE2:  MOVFF  FF5,2FB
00FE6:  RCALL  0F8A
00FE8:  MOVFF  2E9,FF6
00FEC:  MOVFF  2EA,FF7
00FF0:  MOVFF  2EB,FF8
00FF4:  BRA    0FD0
00FF6:  RETURN 0
*
0106A:  MOVWF  00
0106C:  SWAPF  00,W
0106E:  ANDLW  0F
01070:  MULLW  0A
01072:  MOVF   00,W
01074:  ANDLW  0F
01076:  ADDWF  FF3,W
01078:  RETURN 0
0107A:  RETURN 0
*
011FA:  TBLRD*+
011FC:  MOVFF  FF6,2F6
01200:  MOVFF  FF7,2F7
01204:  MOVFF  FF8,2F8
01208:  MOVFF  FF5,2FB
0120C:  RCALL  0F8A
0120E:  MOVFF  2F6,FF6
01212:  MOVFF  2F7,FF7
01216:  MOVFF  2F8,FF8
0121A:  MOVLB  2
0121C:  DECFSZ xF5,F
0121E:  BRA    1222
01220:  BRA    1226
01222:  MOVLB  0
01224:  BRA    11FA
01226:  MOVLB  0
01228:  RETURN 0
0122A:  MOVLB  2
0122C:  MOVF   xFC,W
0122E:  CLRF   01
01230:  SUBWF  xFB,W
01232:  BC    123A
01234:  MOVFF  2FB,00
01238:  BRA    1252
0123A:  CLRF   00
0123C:  MOVLW  08
0123E:  MOVWF  xFD
01240:  RLCF   xFB,F
01242:  RLCF   00,F
01244:  MOVF   xFC,W
01246:  SUBWF  00,W
01248:  BTFSC  FD8.0
0124A:  MOVWF  00
0124C:  RLCF   01,F
0124E:  DECFSZ xFD,F
01250:  BRA    1240
01252:  MOVLB  0
01254:  RETURN 0
01256:  MOVF   01,W
01258:  MOVFF  1CE,2FB
0125C:  MOVLW  64
0125E:  MOVLB  2
01260:  MOVWF  xFC
01262:  MOVLB  0
01264:  RCALL  122A
01266:  MOVFF  00,1CE
0126A:  MOVF   01,W
0126C:  MOVLW  30
0126E:  BNZ   1280
01270:  MOVLB  1
01272:  BTFSS  xCF.1
01274:  BRA    1292
01276:  BTFSC  xCF.3
01278:  BRA    1292
0127A:  BTFSC  xCF.4
0127C:  MOVLW  20
0127E:  BRA    1288
01280:  MOVLB  1
01282:  BCF    xCF.3
01284:  BCF    xCF.4
01286:  BSF    xCF.0
01288:  ADDWF  01,F
0128A:  MOVFF  01,2FB
0128E:  MOVLB  0
01290:  RCALL  0F8A
01292:  MOVFF  1CE,2FB
01296:  MOVLW  0A
01298:  MOVLB  2
0129A:  MOVWF  xFC
0129C:  MOVLB  0
0129E:  RCALL  122A
012A0:  MOVFF  00,1CE
012A4:  MOVF   01,W
012A6:  MOVLW  30
012A8:  BNZ   12BA
012AA:  MOVLB  1
012AC:  BTFSC  xCF.3
012AE:  BRA    12C4
012B0:  BTFSS  xCF.0
012B2:  BRA    12C4
012B4:  BTFSC  xCF.4
012B6:  MOVLW  20
012B8:  MOVLB  0
012BA:  ADDWF  01,F
012BC:  MOVFF  01,2FB
012C0:  RCALL  0F8A
012C2:  MOVLB  1
012C4:  MOVLW  30
012C6:  ADDWF  xCE,F
012C8:  MOVFF  1CE,2FB
012CC:  MOVLB  0
012CE:  RCALL  0F8A
012D0:  RETURN 0
012D2:  MOVLB  2
012D4:  BTFSC  xF6.7
012D6:  BRA    12FA
012D8:  MOVLW  0F
012DA:  MOVWF  00
012DC:  SWAPF  xF5,W
012DE:  ANDWF  00,F
012E0:  MOVLW  0A
012E2:  SUBWF  00,W
012E4:  BC    12EC
012E6:  MOVLW  30
012E8:  ADDWF  00,F
012EA:  BRA    12F0
012EC:  MOVF   xF6,W
012EE:  ADDWF  00,F
012F0:  MOVFF  00,2FB
012F4:  MOVLB  0
012F6:  RCALL  0F8A
012F8:  MOVLB  2
012FA:  MOVLW  0F
012FC:  ANDWF  xF5,F
012FE:  MOVLW  0A
01300:  SUBWF  xF5,W
01302:  BC    1308
01304:  MOVLW  30
01306:  BRA    130C
01308:  BCF    xF6.7
0130A:  MOVF   xF6,W
0130C:  ADDWF  xF5,F
0130E:  MOVFF  2F5,2FB
01312:  MOVLB  0
01314:  RCALL  0F8A
01316:  RETURN 0
*
01336:  MOVLW  20
01338:  MOVLB  2
0133A:  BTFSS  xF6.4
0133C:  MOVLW  30
0133E:  MOVWF  xF7
01340:  MOVFF  2F5,00
01344:  BTFSS  00.7
01346:  BRA    1358
01348:  COMF   00,F
0134A:  INCF   00,F
0134C:  MOVFF  00,2F5
01350:  MOVLW  2D
01352:  MOVWF  xF7
01354:  BSF    xF6.7
01356:  BSF    xF6.0
01358:  MOVF   01,W
0135A:  MOVFF  2F5,2FB
0135E:  MOVLW  64
01360:  MOVWF  xFC
01362:  MOVLB  0
01364:  RCALL  122A
01366:  MOVFF  00,2F5
0136A:  MOVLW  30
0136C:  ADDWF  01,W
0136E:  MOVLB  2
01370:  MOVWF  xF8
01372:  MOVFF  2F5,2FB
01376:  MOVLW  0A
01378:  MOVWF  xFC
0137A:  MOVLB  0
0137C:  RCALL  122A
0137E:  MOVLW  30
01380:  ADDWF  00,W
01382:  MOVLB  2
01384:  MOVWF  xFA
01386:  MOVLW  30
01388:  ADDWF  01,W
0138A:  MOVWF  xF9
0138C:  MOVFF  2F7,00
01390:  MOVLW  30
01392:  SUBWF  xF8,W
01394:  BZ    139E
01396:  BSF    xF6.1
01398:  BTFSC  xF6.7
0139A:  BSF    xF6.2
0139C:  BRA    13C2
0139E:  MOVFF  2F7,2F8
013A2:  MOVLW  20
013A4:  MOVWF  xF7
013A6:  MOVLW  30
013A8:  SUBWF  xF9,W
013AA:  BZ    13B4
013AC:  BSF    xF6.0
013AE:  BTFSC  xF6.7
013B0:  BSF    xF6.1
013B2:  BRA    13C2
013B4:  BTFSS  FD8.2
013B6:  BSF    xF6.0
013B8:  BNZ   13C2
013BA:  MOVFF  2F8,2F9
013BE:  MOVLW  20
013C0:  MOVWF  xF8
013C2:  BTFSC  xF6.2
013C4:  BRA    13D0
013C6:  BTFSC  xF6.1
013C8:  BRA    13D8
013CA:  BTFSC  xF6.0
013CC:  BRA    13E0
013CE:  BRA    13E8
013D0:  MOVFF  2F7,2FB
013D4:  MOVLB  0
013D6:  RCALL  0F8A
013D8:  MOVFF  2F8,2FB
013DC:  MOVLB  0
013DE:  RCALL  0F8A
013E0:  MOVFF  2F9,2FB
013E4:  MOVLB  0
013E6:  RCALL  0F8A
013E8:  MOVFF  2FA,2FB
013EC:  MOVLB  0
013EE:  RCALL  0F8A
013F0:  RETURN 0
*
0224E:  MOVLB  2
02250:  CLRF   xFE
02252:  CLRF   xFF
02254:  MOVLW  01
02256:  MOVLB  3
02258:  MOVWF  x00
0225A:  CLRF   FDA
0225C:  CLRF   FD9
0225E:  MOVLW  02
02260:  MOVWF  x03
02262:  MOVLW  F6
02264:  MOVWF  x02
02266:  MOVLW  02
02268:  MOVWF  FEA
0226A:  MOVLW  FA
0226C:  MOVWF  FE9
0226E:  MOVFF  303,FE2
02272:  MOVFF  302,FE1
02276:  MOVFF  300,301
0227A:  BCF    FD8.0
0227C:  MOVF   FE5,W
0227E:  MULWF  FEE
02280:  MOVF   FF3,W
02282:  MOVLB  2
02284:  ADDWFC xFE,F
02286:  MOVF   FF4,W
02288:  ADDWFC xFF,F
0228A:  MOVLB  3
0228C:  DECFSZ x01,F
0228E:  BRA    227A
02290:  MOVFF  2FE,FDE
02294:  MOVFF  2FF,2FE
02298:  MOVLB  2
0229A:  CLRF   xFF
0229C:  BTFSC  FD8.0
0229E:  INCF   xFF,F
022A0:  MOVLB  3
022A2:  INCF   x02,F
022A4:  BTFSC  FD8.2
022A6:  INCF   x03,F
022A8:  INCF   x00,F
022AA:  MOVF   x00,W
022AC:  SUBLW  05
022AE:  BNZ   2266
022B0:  MOVLB  0
022B2:  GOTO   235A (RETURN)
022B6:  MOVF   03,W
022B8:  SUBLW  20
022BA:  BZ    22CC
022BC:  MOVF   03,W
022BE:  SUBLW  08
022C0:  BC    22C8
022C2:  MOVF   03,W
022C4:  SUBLW  0D
022C6:  BC    22CC
022C8:  CLRF   01
022CA:  BRA    22D0
022CC:  MOVLW  01
022CE:  MOVWF  01
022D0:  RETURN 0
022D2:  MOVLB  2
022D4:  CLRF   xF0
022D6:  CLRF   xF4
022D8:  CLRF   xF3
022DA:  CLRF   xF2
022DC:  CLRF   xF1
022DE:  BTFSS  xEE.7
022E0:  BRA    22E8
022E2:  MOVF   xED,F
022E4:  BTFSC  FD8.2
022E6:  BRA    23BE
022E8:  MOVLB  0
022EA:  RCALL  1DC8
022EC:  MOVFF  01,2EF
022F0:  MOVLB  2
022F2:  MOVF   xEF,F
022F4:  BTFSC  FD8.2
022F6:  BRA    23BE
022F8:  INCF   xF0,F
022FA:  MOVF   xEF,W
022FC:  SUBLW  20
022FE:  BC    238A
02300:  MOVF   xEF,W
02302:  SUBLW  58
02304:  BZ    23A8
02306:  MOVF   xEF,W
02308:  SUBLW  78
0230A:  BZ    23A8
0230C:  MOVF   xEF,W
0230E:  SUBLW  2F
02310:  BC    23BA
02312:  MOVLW  30
02314:  SUBWF  xEF,F
02316:  MOVF   xEF,W
02318:  SUBLW  09
0231A:  BC    233C
0231C:  MOVLW  07
0231E:  SUBWF  xEF,F
02320:  MOVF   xEF,W
02322:  SUBLW  09
02324:  BC    23BA
02326:  MOVF   xEF,W
02328:  SUBLW  0F
0232A:  BC    233C
0232C:  MOVLW  20
0232E:  SUBWF  xEF,F
02330:  MOVF   xEF,W
02332:  SUBLW  09
02334:  BC    23BA
02336:  MOVF   xEF,W
02338:  SUBLW  0F
0233A:  BNC   23BA
0233C:  MOVFF  2F4,2F9
02340:  MOVFF  2F3,2F8
02344:  MOVFF  2F2,2F7
02348:  MOVFF  2F1,2F6
0234C:  CLRF   xFD
0234E:  CLRF   xFC
02350:  CLRF   xFB
02352:  MOVLW  10
02354:  MOVWF  xFA
02356:  MOVLB  0
02358:  BRA    224E
0235A:  MOVLB  2
0235C:  MOVF   xEF,W
0235E:  ADDWF  00,W
02360:  MOVWF  xF1
02362:  MOVLW  00
02364:  ADDWFC 01,W
02366:  MOVWF  xF2
02368:  MOVLW  00
0236A:  ADDWFC 02,W
0236C:  MOVWF  xF3
0236E:  MOVLW  00
02370:  ADDWFC 03,W
02372:  MOVWF  xF4
02374:  BTFSC  xEE.7
02376:  DECF   xED,F
02378:  BTFSC  xEE.0
0237A:  BRA    2384
0237C:  MOVF   xEF,F
0237E:  BNZ   2384
02380:  BSF    xEE.1
02382:  BRA    22DE
02384:  BCF    xEE.1
02386:  BSF    xEE.0
02388:  BRA    22DE
0238A:  MOVFF  2EF,03
0238E:  MOVLB  0
02390:  RCALL  22B6
02392:  MOVF   01,F
02394:  BTFSS  FD8.2
02396:  BRA    239C
02398:  MOVLB  2
0239A:  BRA    23BA
0239C:  MOVLB  2
0239E:  BTFSC  xEE.0
023A0:  BRA    23BE
023A2:  BTFSC  xEE.1
023A4:  BRA    23BE
023A6:  BRA    22DE
023A8:  BTFSC  xEE.0
023AA:  BRA    23BA
023AC:  BTFSS  xEE.1
023AE:  BRA    23BA
023B0:  BTFSC  xEE.7
023B2:  INCF   xED,F
023B4:  BCF    xEE.1
023B6:  BSF    xEE.0
023B8:  BRA    22DE
023BA:  CLRF   xF0
023BC:  BRA    23DA
023BE:  BTFSC  xEE.6
023C0:  BRA    23DA
023C2:  MOVFF  2EC,FEA
023C6:  MOVFF  2EB,FE9
023CA:  MOVFF  2F1,FEF
023CE:  MOVFF  2F2,FEC
023D2:  MOVFF  2F3,FEC
023D6:  MOVFF  2F4,FEC
023DA:  MOVFF  2F0,01
023DE:  MOVLB  0
023E0:  RETURN 0
023E2:  MOVLB  2
023E4:  CLRF   xF2
023E6:  CLRF   xF3
023E8:  BTFSS  xF0.7
023EA:  BRA    23F0
023EC:  MOVF   xEF,F
023EE:  BZ    249A
023F0:  MOVLB  0
023F2:  RCALL  1DC8
023F4:  MOVFF  01,2F1
023F8:  MOVLB  2
023FA:  MOVF   xF1,F
023FC:  BZ    249A
023FE:  INCF   xF2,F
02400:  MOVF   xF1,W
02402:  SUBLW  20
02404:  BC    2466
02406:  MOVF   xF1,W
02408:  SUBLW  58
0240A:  BZ    2484
0240C:  MOVF   xF1,W
0240E:  SUBLW  78
02410:  BZ    2484
02412:  MOVF   xF1,W
02414:  SUBLW  2F
02416:  BC    2496
02418:  MOVLW  30
0241A:  SUBWF  xF1,F
0241C:  MOVF   xF1,W
0241E:  SUBLW  09
02420:  BC    2442
02422:  MOVLW  07
02424:  SUBWF  xF1,F
02426:  MOVF   xF1,W
02428:  SUBLW  09
0242A:  BC    2496
0242C:  MOVF   xF1,W
0242E:  SUBLW  0F
02430:  BC    2442
02432:  MOVLW  20
02434:  SUBWF  xF1,F
02436:  MOVF   xF1,W
02438:  SUBLW  09
0243A:  BC    2496
0243C:  MOVF   xF1,W
0243E:  SUBLW  0F
02440:  BNC   2496
02442:  MOVF   xF3,W
02444:  MULLW  10
02446:  MOVFF  FF3,01
0244A:  MOVF   xF1,W
0244C:  ADDWF  01,W
0244E:  MOVWF  xF3
02450:  BTFSC  xF0.7
02452:  DECF   xEF,F
02454:  BTFSC  xF0.0
02456:  BRA    2460
02458:  MOVF   xF1,F
0245A:  BNZ   2460
0245C:  BSF    xF0.1
0245E:  BRA    23E8
02460:  BCF    xF0.1
02462:  BSF    xF0.0
02464:  BRA    23E8
02466:  MOVFF  2F1,03
0246A:  MOVLB  0
0246C:  RCALL  22B6
0246E:  MOVF   01,F
02470:  BTFSS  FD8.2
02472:  BRA    2478
02474:  MOVLB  2
02476:  BRA    2496
02478:  MOVLB  2
0247A:  BTFSC  xF0.0
0247C:  BRA    249A
0247E:  BTFSC  xF0.1
02480:  BRA    249A
02482:  BRA    23E8
02484:  BTFSC  xF0.0
02486:  BRA    2496
02488:  BTFSS  xF0.1
0248A:  BRA    2496
0248C:  BTFSC  xF0.7
0248E:  INCF   xEF,F
02490:  BCF    xF0.1
02492:  BSF    xF0.0
02494:  BRA    23E8
02496:  CLRF   xF2
02498:  BRA    24AA
0249A:  BTFSC  xF0.6
0249C:  BRA    24AA
0249E:  MOVFF  2EE,FEA
024A2:  MOVFF  2ED,FE9
024A6:  MOVFF  2F3,FEF
024AA:  MOVFF  2F2,01
024AE:  MOVLB  0
024B0:  RETURN 0
*
02846:  MOVWF  00
02848:  SWAPF  00,W
0284A:  ADDWF  00,W
0284C:  ANDLW  0F
0284E:  BTFSC  FD8.1
02850:  ADDLW  16
02852:  DAW   
02854:  BTFSC  00.4
02856:  ADDLW  15
02858:  BTFSC  00.5
0285A:  ADDLW  30
0285C:  BTFSC  00.6
0285E:  ADDLW  60
02860:  BTFSC  00.7
02862:  ADDLW  20
02864:  DAW   
02866:  RETURN 0
02868:  RETURN 0
.................... 
.................... #list
.................... 
.................... //#include <Menu_function.c>
.................... //#include <MT25Q_.h>
.................... #device ADC=16
.................... #device ICD=TRUE
.................... 
.................... #FUSES NOWDT NOBROWNOUT
.................... #use delay(crystal=16Mhz, clock=16Mhz)
*
00F60:  MOVLW  01
00F62:  MOVWF  FEA
00F64:  MOVLW  BC
00F66:  MOVWF  FE9
00F68:  MOVF   FEF,W
00F6A:  BZ    0F88
00F6C:  MOVLW  05
00F6E:  MOVWF  01
00F70:  CLRF   00
00F72:  DECFSZ 00,F
00F74:  BRA    0F72
00F76:  DECFSZ 01,F
00F78:  BRA    0F70
00F7A:  MOVLW  2E
00F7C:  MOVWF  00
00F7E:  DECFSZ 00,F
00F80:  BRA    0F7E
00F82:  BRA    0F84
00F84:  DECFSZ FEF,F
00F86:  BRA    0F6C
00F88:  RETURN 0
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... #use rs232(baud=9600, parity=N, xmit=PIN_E5, rcv=PIN_E4, bits=8, stream=EPS) //EPS DATA ACQUISITION
*
02C02:  BSF    F96.4
02C04:  BTFSC  F84.4
02C06:  BRA    2C04
02C08:  MOVLW  08
02C0A:  MOVWF  00
02C0C:  MOVLB  1
02C0E:  CLRF   xBC
02C10:  BSF    00.7
02C12:  BRA    2C30
02C14:  BCF    00.7
02C16:  BRA    2C30
02C18:  BCF    FD8.0
02C1A:  BTFSC  F84.4
02C1C:  BSF    FD8.0
02C1E:  RRCF   xBC,F
02C20:  BSF    00.6
02C22:  BRA    2C30
02C24:  BCF    00.6
02C26:  DECFSZ 00,F
02C28:  BRA    2C18
02C2A:  MOVFF  1BC,01
02C2E:  BRA    2C48
02C30:  MOVLW  84
02C32:  BTFSC  00.7
02C34:  MOVLW  24
02C36:  MOVWF  01
02C38:  DECFSZ 01,F
02C3A:  BRA    2C38
02C3C:  BRA    2C3E
02C3E:  BTFSC  00.7
02C40:  BRA    2C14
02C42:  BTFSC  00.6
02C44:  BRA    2C24
02C46:  BRA    2C18
02C48:  MOVLB  0
02C4A:  GOTO   2C54 (RETURN)
.................... #use rs232(baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8, stream=EXT) //MAIN RAB Rear access board 
*
00F8A:  BCF    F94.6
00F8C:  BCF    F8B.6
00F8E:  MOVLW  08
00F90:  MOVWF  01
00F92:  BRA    0F94
00F94:  NOP   
00F96:  BSF    01.7
00F98:  BRA    0FBA
00F9A:  BCF    01.7
00F9C:  MOVLB  2
00F9E:  RRCF   xFB,F
00FA0:  MOVLB  0
00FA2:  BTFSC  FD8.0
00FA4:  BSF    F8B.6
00FA6:  BTFSS  FD8.0
00FA8:  BCF    F8B.6
00FAA:  BSF    01.6
00FAC:  BRA    0FBA
00FAE:  BCF    01.6
00FB0:  DECFSZ 01,F
00FB2:  BRA    0F9C
00FB4:  BRA    0FB6
00FB6:  NOP   
00FB8:  BSF    F8B.6
00FBA:  MOVLW  84
00FBC:  MOVWF  FE9
00FBE:  DECFSZ FE9,F
00FC0:  BRA    0FBE
00FC2:  BRA    0FC4
00FC4:  NOP   
00FC6:  BTFSC  01.7
00FC8:  BRA    0F9A
00FCA:  BTFSC  01.6
00FCC:  BRA    0FAE
00FCE:  RETURN 0
*
01DC8:  BSF    F94.7
01DCA:  BTFSC  F82.7
01DCC:  BRA    1DCA
01DCE:  MOVLW  08
01DD0:  MOVWF  00
01DD2:  MOVLB  2
01DD4:  CLRF   xF6
01DD6:  BSF    00.7
01DD8:  BRA    1DF6
01DDA:  BCF    00.7
01DDC:  BRA    1DF6
01DDE:  BCF    FD8.0
01DE0:  BTFSC  F82.7
01DE2:  BSF    FD8.0
01DE4:  RRCF   xF6,F
01DE6:  BSF    00.6
01DE8:  BRA    1DF6
01DEA:  BCF    00.6
01DEC:  DECFSZ 00,F
01DEE:  BRA    1DDE
01DF0:  MOVFF  2F6,01
01DF4:  BRA    1E0E
01DF6:  MOVLW  84
01DF8:  BTFSC  00.7
01DFA:  MOVLW  24
01DFC:  MOVWF  01
01DFE:  DECFSZ 01,F
01E00:  BRA    1DFE
01E02:  BRA    1E04
01E04:  BTFSC  00.7
01E06:  BRA    1DDA
01E08:  BTFSC  00.6
01E0A:  BRA    1DEA
01E0C:  BRA    1DDE
01E0E:  MOVLB  0
01E10:  RETURN 0
.................... #use rs232(baud=57600, parity=N, xmit=PIN_D2, rcv=PIN_D3, bits=8, stream=COM, FORCE_SW) //MAIN COM Communication, send CW data 
.................... #use rs232(baud=57600, parity=N, xmit=PIN_F7, rcv=PIN_F6, bits=8, stream=CAM, FORCE_SW) //MAIN CAM Communicationx
.................... #use spi(MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6,  BAUD=10000, BITS=8, STREAM=MAIN_FM, MODE=0) //MAIN flash memory port
*
010E0:  MOVLB  2
010E2:  MOVF   xF7,W
010E4:  SUBLW  08
010E6:  BZ    10F0
010E8:  MOVWF  xF9
010EA:  RLCF   xF6,F
010EC:  DECFSZ xF9,F
010EE:  BRA    10EA
010F0:  BSF    F96.0
010F2:  BCF    F96.6
010F4:  BCF    F96.1
010F6:  BCF    F8D.1
010F8:  MOVFF  2F7,2F9
010FC:  BTFSS  xF6.7
010FE:  BCF    F8D.6
01100:  BTFSC  xF6.7
01102:  BSF    F8D.6
01104:  RLCF   xF6,F
01106:  BSF    F8D.1
01108:  MOVLW  41
0110A:  MOVWF  xFA
0110C:  DECFSZ xFA,F
0110E:  BRA    110C
01110:  RLCF   01,F
01112:  BTFSS  F84.0
01114:  BCF    01.0
01116:  BTFSC  F84.0
01118:  BSF    01.0
0111A:  BCF    F8D.1
0111C:  MOVLW  40
0111E:  MOVWF  xFA
01120:  DECFSZ xFA,F
01122:  BRA    1120
01124:  DECFSZ xF9,F
01126:  BRA    10FC
01128:  MOVLB  0
0112A:  RETURN 0
.................... #use spi(MASTER, CLK=PIN_B2, DI=PIN_B5, DO=PIN_B4,  BAUD=10000, BITS=8, STREAM=COM_FM, MODE=0) //COM shared flash memory port
*
01710:  MOVLB  1
01712:  MOVF   xC7,W
01714:  SUBLW  08
01716:  BZ    1720
01718:  MOVWF  xC9
0171A:  RLCF   xC6,F
0171C:  DECFSZ xC9,F
0171E:  BRA    171A
01720:  BSF    F93.5
01722:  BCF    F93.4
01724:  BCF    F93.2
01726:  BCF    F8A.2
01728:  MOVFF  1C7,1C9
0172C:  BTFSS  xC6.7
0172E:  BCF    F8A.4
01730:  BTFSC  xC6.7
01732:  BSF    F8A.4
01734:  RLCF   xC6,F
01736:  BSF    F8A.2
01738:  MOVLW  41
0173A:  MOVWF  xCA
0173C:  DECFSZ xCA,F
0173E:  BRA    173C
01740:  RLCF   01,F
01742:  BTFSS  F81.5
01744:  BCF    01.0
01746:  BTFSC  F81.5
01748:  BSF    01.0
0174A:  BCF    F8A.2
0174C:  MOVLW  40
0174E:  MOVWF  xCA
01750:  DECFSZ xCA,F
01752:  BRA    1750
01754:  DECFSZ xC9,F
01756:  BRA    172C
01758:  MOVLB  0
0175A:  RETURN 0
.................... #use spi(MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1,  BAUD=10000, BITS=8, STREAM=ADCS_FM, MODE=0) //ADCS shared flash memory port, Camera module (ovcam,mvcam)
*
017E8:  MOVLB  1
017EA:  MOVF   xC7,W
017EC:  SUBLW  08
017EE:  BZ    17F8
017F0:  MOVWF  xC9
017F2:  RLCF   xC6,F
017F4:  DECFSZ xC9,F
017F6:  BRA    17F2
017F8:  BSF    F92.0
017FA:  BCF    F92.1
017FC:  BCF    F92.3
017FE:  BCF    F89.3
01800:  MOVFF  1C7,1C9
01804:  BTFSS  xC6.7
01806:  BCF    F89.1
01808:  BTFSC  xC6.7
0180A:  BSF    F89.1
0180C:  RLCF   xC6,F
0180E:  BSF    F89.3
01810:  MOVLW  41
01812:  MOVWF  xCA
01814:  DECFSZ xCA,F
01816:  BRA    1814
01818:  RLCF   01,F
0181A:  BTFSS  F80.0
0181C:  BCF    01.0
0181E:  BTFSC  F80.0
01820:  BSF    01.0
01822:  BCF    F89.3
01824:  MOVLW  40
01826:  MOVWF  xCA
01828:  DECFSZ xCA,F
0182A:  BRA    1828
0182C:  DECFSZ xC9,F
0182E:  BRA    1804
01830:  MOVLB  0
01832:  RETURN 0
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... //SPI Stream alter name 
.................... #define SPIPORT MAIN_FM
.................... #define SPIPORT2 COM_FM
.................... #define SPIPORT3 ADCS_FM  //cam system
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
....................     
.................... //Flash memory chip select pins and mux control 
.................... #define CS_PIN_1 PIN_E2 //OBC_FLASH_SELECT
.................... #define CS_PIN_COM PIN_B3 //COM_CHIP_SELECT
.................... #define CS_PIN_ADCS PIN_A2 //ADCS_CHIP_SELECT
.................... #define MX_PIN_OVCAM PIN_G2 //OVCAM_MUX_SELECT
.................... #define MX_PIN_MVCAM PIN_G3 //MVCAM_MUX_SELECT
.................... #define MX_PIN_ADCS PIN_A5 //ADCS_MUX_SELECT
.................... #define MX_PIN_COM PIN_C4 //COM_MUX_SELECT
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... //mt25q flash memory command assigment
.................... #define READ_ID              0x9F
.................... #define READ_STATUS_REG      0x05 
.................... #define READ_DATA_BYTES      0x13  //0x03 for byte
.................... #define ENABLE_WRITE         0x06
.................... #define WRITE_PAGE           0x12  //0x02 for 3byte 
.................... #define ERASE_SECTOR         0xDC  //0xD8 for 3byte
.................... #define ERASE_4KB_SUBSECTOR  0x21
.................... #define ERASE_32KB_SUBSECTOR 0x5C
.................... #define DIE_ERASE            0xC4
.................... #define FAST_READ            0x0B
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... 
.................... //memory maping     
.................... #define SHUTDOWN_COUNT_ADDRESS 0x00100010
.................... 
.................... //digtal control pins 
.................... #define EN_SUP_3V3_1 PIN_B0
.................... #define EN_SUP_3V3_2 PIN_G1
.................... #define EN_SUP_3V3_DAQ PIN_D0
.................... #define EN_SUP_UNREG PIN_B1
.................... #define EN_SUP_5V0 PIN_D1
.................... #define KILL_SWITCH PIN_A4
.................... #define MVCAM_PWR PIN_G0
.................... #define OVCAM_PWR PIN_D7
.................... #define ADCS_PWR PIN_D6
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
....................     
.................... void WRITE_ENABLE_OF(){
....................  output_low(CS_PIN_1);
*
01318:  BCF    F96.2
0131A:  BCF    F8D.2
....................  spi_xfer(SPIPORT,ENABLE_WRITE);                //Send 0x06
0131C:  MOVLW  06
0131E:  MOVLB  2
01320:  MOVWF  xF6
01322:  MOVLW  08
01324:  MOVWF  xF7
01326:  MOVLW  01
01328:  MOVWF  xF8
0132A:  MOVLB  0
0132C:  RCALL  10E0
....................  output_high(CS_PIN_1);  
0132E:  BCF    F96.2
01330:  BSF    F8D.2
....................  return;
01332:  GOTO   1468 (RETURN)
.................... }
.................... 
.................... void WRITE_ENABLE_OF_COM(){
....................      // Lower CS to select the SPI device
....................     output_low(CS_PIN_COM);
*
018C0:  BCF    F93.3
018C2:  BCF    F8A.3
....................     // Lower MX to connect to flash device
....................     output_low(MX_PIN_COM);
018C4:  BCF    F94.4
018C6:  BCF    F8B.4
....................     spi_xfer(SPIPORT2,ENABLE_WRITE);                //Send 0x06
018C8:  MOVLW  06
018CA:  MOVLB  1
018CC:  MOVWF  xC6
018CE:  MOVLW  08
018D0:  MOVWF  xC7
018D2:  MOVLW  01
018D4:  MOVWF  xC8
018D6:  MOVLB  0
018D8:  RCALL  1710
....................     output_high(CS_PIN_COM);
018DA:  BCF    F93.3
018DC:  BSF    F8A.3
....................  return;
018DE:  GOTO   195A (RETURN)
.................... }
.................... void WRITE_ENABLE_OF_ADCS(){
....................      // Lower CS to select the SPI device
....................     output_low(CS_PIN_ADCS);
*
01B3E:  BCF    F92.2
01B40:  BCF    F89.2
....................     // Lower MX to connect to flash device
....................     output_low(MX_PIN_COM);
01B42:  BCF    F94.4
01B44:  BCF    F8B.4
....................     spi_xfer(SPIPORT3,ENABLE_WRITE);                //Send 0x06
01B46:  MOVLW  06
01B48:  MOVLB  1
01B4A:  MOVWF  xC6
01B4C:  MOVLW  08
01B4E:  MOVWF  xC7
01B50:  MOVLW  01
01B52:  MOVWF  xC8
01B54:  MOVLB  0
01B56:  RCALL  17E8
....................     output_high(CS_PIN_ADCS);  
01B58:  BCF    F92.2
01B5A:  BSF    F89.2
....................  return;
01B5C:  GOTO   1BE2 (RETURN)
.................... }
.................... 
.................... void WRITE_DATA_NBYTES(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS: 0x%08lx\n", ADDRESS);  // Print address as hex
*
013F2:  MOVLW  06
013F4:  MOVWF  FF6
013F6:  MOVLW  00
013F8:  MOVWF  FF7
013FA:  MOVLW  00
013FC:  MOVWF  FF8
013FE:  MOVLW  11
01400:  MOVLB  2
01402:  MOVWF  xF5
01404:  MOVLB  0
01406:  RCALL  11FA
01408:  MOVFF  2EC,2F5
0140C:  MOVLW  57
0140E:  MOVLB  2
01410:  MOVWF  xF6
01412:  MOVLB  0
01414:  RCALL  12D2
01416:  MOVFF  2EB,2F5
0141A:  MOVLW  57
0141C:  MOVLB  2
0141E:  MOVWF  xF6
01420:  MOVLB  0
01422:  RCALL  12D2
01424:  MOVFF  2EA,2F5
01428:  MOVLW  57
0142A:  MOVLB  2
0142C:  MOVWF  xF6
0142E:  MOVLB  0
01430:  RCALL  12D2
01432:  MOVFF  2E9,2F5
01436:  MOVLW  57
01438:  MOVLB  2
0143A:  MOVWF  xF6
0143C:  MOVLB  0
0143E:  RCALL  12D2
01440:  MOVLW  0A
01442:  MOVLB  2
01444:  MOVWF  xFB
01446:  MOVLB  0
01448:  RCALL  0F8A
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
0144A:  MOVLB  2
0144C:  MOVFF  2EC,2F0
01450:  CLRF   03
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01452:  MOVFF  2EB,2F1
01456:  CLRF   03
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
01458:  MOVFF  2EA,2F2
0145C:  CLRF   03
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
0145E:  MOVFF  2E9,2F3
01462:  CLRF   03
....................     WRITE_ENABLE_OF();  // Enable write operation
01464:  MOVLB  0
01466:  BRA    1318
.................... 
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_1);
01468:  BCF    F96.2
0146A:  BCF    F8D.2
....................     delay_us(2);  // Small delay for stabilization
0146C:  MOVLW  02
0146E:  MOVWF  00
01470:  DECFSZ 00,F
01472:  BRA    1470
01474:  NOP   
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT, WRITE_PAGE);
01476:  MOVLW  12
01478:  MOVLB  2
0147A:  MOVWF  xF6
0147C:  MOVLW  08
0147E:  MOVWF  xF7
01480:  MOVLW  01
01482:  MOVWF  xF8
01484:  MOVLB  0
01486:  RCALL  10E0
....................     spi_xfer(SPIPORT, adsress[0]);
01488:  MOVFF  2F0,2F6
0148C:  MOVLW  08
0148E:  MOVLB  2
01490:  MOVWF  xF7
01492:  MOVLW  01
01494:  MOVWF  xF8
01496:  MOVLB  0
01498:  RCALL  10E0
....................     spi_xfer(SPIPORT, adsress[1]);
0149A:  MOVFF  2F1,2F6
0149E:  MOVLW  08
014A0:  MOVLB  2
014A2:  MOVWF  xF7
014A4:  MOVLW  01
014A6:  MOVWF  xF8
014A8:  MOVLB  0
014AA:  RCALL  10E0
....................     spi_xfer(SPIPORT, adsress[2]);
014AC:  MOVFF  2F2,2F6
014B0:  MOVLW  08
014B2:  MOVLB  2
014B4:  MOVWF  xF7
014B6:  MOVLW  01
014B8:  MOVWF  xF8
014BA:  MOVLB  0
014BC:  RCALL  10E0
....................     spi_xfer(SPIPORT, adsress[3]);
014BE:  MOVFF  2F3,2F6
014C2:  MOVLW  08
014C4:  MOVLB  2
014C6:  MOVWF  xF7
014C8:  MOVLW  01
014CA:  MOVWF  xF8
014CC:  MOVLB  0
014CE:  RCALL  10E0
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
014D0:  MOVLB  2
014D2:  CLRF   xF4
014D4:  MOVF   xEF,W
014D6:  SUBWF  xF4,W
014D8:  BC    1528
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
014DA:  MOVF   xF4,W
014DC:  ADDWF  xED,W
014DE:  MOVWF  FE9
014E0:  MOVLW  00
014E2:  ADDWFC xEE,W
014E4:  MOVWF  FEA
014E6:  MOVFF  FEF,2F6
014EA:  MOVLW  08
014EC:  MOVWF  xF7
014EE:  MOVLW  01
014F0:  MOVWF  xF8
014F2:  MOVLB  0
014F4:  RCALL  10E0
....................         fprintf(EXT,"%02c", data[i]);    // Print each byte as hex (optional)
014F6:  MOVLB  2
014F8:  MOVF   xF4,W
014FA:  ADDWF  xED,W
014FC:  MOVWF  FE9
014FE:  MOVLW  00
01500:  ADDWFC xEE,W
01502:  MOVWF  FEA
01504:  MOVFF  FEF,2F5
01508:  MOVLW  01
0150A:  MOVWF  xF6
0150C:  MOVLW  20
0150E:  MOVWF  xFB
01510:  MOVLB  0
01512:  RCALL  0F8A
01514:  MOVLB  2
01516:  DECFSZ xF6,F
01518:  BRA    150C
0151A:  MOVFF  2F5,2FB
0151E:  MOVLB  0
01520:  RCALL  0F8A
01522:  MOVLB  2
01524:  INCF   xF4,F
01526:  BRA    14D4
....................     }
....................     
....................     output_high(CS_PIN_1);  // Deselect SPI device
01528:  BCF    F96.2
0152A:  BSF    F8D.2
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN IN MAIN!\n", data_number);
0152C:  MOVLW  0A
0152E:  MOVWF  xFB
01530:  MOVLB  0
01532:  RCALL  0F8A
01534:  MOVFF  2EF,2F5
01538:  MOVLW  18
0153A:  MOVLB  2
0153C:  MOVWF  xF6
0153E:  MOVLB  0
01540:  RCALL  1336
01542:  MOVLW  21
01544:  MOVWF  FF6
01546:  MOVLW  00
01548:  MOVWF  FF7
0154A:  MOVLW  00
0154C:  MOVWF  FF8
0154E:  MOVLW  18
01550:  MOVLB  2
01552:  MOVWF  xF5
01554:  MOVLB  0
01556:  RCALL  11FA
....................     return;
01558:  RETURN 0
.................... }
.................... 
.................... 
.................... void WRITE_DATA_NBYTES_COM(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS IN COM: 0x%08lx\n", ADDRESS);  // Print address as hex
*
018E2:  MOVLW  3A
018E4:  MOVWF  FF6
018E6:  MOVLW  00
018E8:  MOVWF  FF7
018EA:  MOVLW  00
018EC:  MOVWF  FF8
018EE:  MOVLW  18
018F0:  MOVLB  2
018F2:  MOVWF  xF5
018F4:  MOVLB  0
018F6:  RCALL  11FA
018F8:  MOVFF  1BD,2F5
018FC:  MOVLW  57
018FE:  MOVLB  2
01900:  MOVWF  xF6
01902:  MOVLB  0
01904:  RCALL  12D2
01906:  MOVFF  1BC,2F5
0190A:  MOVLW  57
0190C:  MOVLB  2
0190E:  MOVWF  xF6
01910:  MOVLB  0
01912:  RCALL  12D2
01914:  MOVFF  1BB,2F5
01918:  MOVLW  57
0191A:  MOVLB  2
0191C:  MOVWF  xF6
0191E:  MOVLB  0
01920:  RCALL  12D2
01922:  MOVFF  1BA,2F5
01926:  MOVLW  57
01928:  MOVLB  2
0192A:  MOVWF  xF6
0192C:  MOVLB  0
0192E:  RCALL  12D2
01930:  MOVLW  0A
01932:  MOVLB  2
01934:  MOVWF  xFB
01936:  MOVLB  0
01938:  CALL   0F8A
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
0193C:  MOVLB  1
0193E:  MOVFF  1BD,1C1
01942:  CLRF   03
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01944:  MOVFF  1BC,1C2
01948:  CLRF   03
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
0194A:  MOVFF  1BB,1C3
0194E:  CLRF   03
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
01950:  MOVFF  1BA,1C4
01954:  CLRF   03
....................     WRITE_ENABLE_OF_COM();  // Enable write operation
01956:  MOVLB  0
01958:  BRA    18C0
.................... 
.................... //    // Lower MX to connect to flash device
.................... //    output_low(MX_PIN_COM);
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_COM);
0195A:  BCF    F93.3
0195C:  BCF    F8A.3
....................     delay_us(2);  // Small delay for stabilization
0195E:  MOVLW  02
01960:  MOVWF  00
01962:  DECFSZ 00,F
01964:  BRA    1962
01966:  NOP   
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT2, WRITE_PAGE);
01968:  MOVLW  12
0196A:  MOVLB  1
0196C:  MOVWF  xC6
0196E:  MOVLW  08
01970:  MOVWF  xC7
01972:  MOVLW  01
01974:  MOVWF  xC8
01976:  MOVLB  0
01978:  RCALL  1710
....................     spi_xfer(SPIPORT2, adsress[0]);
0197A:  MOVFF  1C1,1C6
0197E:  MOVLW  08
01980:  MOVLB  1
01982:  MOVWF  xC7
01984:  MOVLW  01
01986:  MOVWF  xC8
01988:  MOVLB  0
0198A:  RCALL  1710
....................     spi_xfer(SPIPORT2, adsress[1]);
0198C:  MOVFF  1C2,1C6
01990:  MOVLW  08
01992:  MOVLB  1
01994:  MOVWF  xC7
01996:  MOVLW  01
01998:  MOVWF  xC8
0199A:  MOVLB  0
0199C:  RCALL  1710
....................     spi_xfer(SPIPORT2, adsress[2]);
0199E:  MOVFF  1C3,1C6
019A2:  MOVLW  08
019A4:  MOVLB  1
019A6:  MOVWF  xC7
019A8:  MOVLW  01
019AA:  MOVWF  xC8
019AC:  MOVLB  0
019AE:  RCALL  1710
....................     spi_xfer(SPIPORT2, adsress[3]);
019B0:  MOVFF  1C4,1C6
019B4:  MOVLW  08
019B6:  MOVLB  1
019B8:  MOVWF  xC7
019BA:  MOVLW  01
019BC:  MOVWF  xC8
019BE:  MOVLB  0
019C0:  RCALL  1710
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
019C2:  MOVLB  1
019C4:  CLRF   xC5
019C6:  MOVF   xC0,W
019C8:  SUBWF  xC5,W
019CA:  BC    1A24
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
019CC:  MOVF   xC5,W
019CE:  ADDWF  xBE,W
019D0:  MOVWF  FE9
019D2:  MOVLW  00
019D4:  ADDWFC xBF,W
019D6:  MOVWF  FEA
019D8:  MOVFF  FEF,2F6
019DC:  MOVLW  08
019DE:  MOVLB  2
019E0:  MOVWF  xF7
019E2:  MOVLW  01
019E4:  MOVWF  xF8
019E6:  MOVLB  0
019E8:  CALL   10E0
....................         fprintf(EXT,"%02c", data[i]);    // Print each byte as hex (debugging purpose)
019EC:  MOVLB  1
019EE:  MOVF   xC5,W
019F0:  ADDWF  xBE,W
019F2:  MOVWF  FE9
019F4:  MOVLW  00
019F6:  ADDWFC xBF,W
019F8:  MOVWF  FEA
019FA:  MOVFF  FEF,1C6
019FE:  MOVLW  01
01A00:  MOVWF  xC7
01A02:  MOVLW  20
01A04:  MOVLB  2
01A06:  MOVWF  xFB
01A08:  MOVLB  0
01A0A:  CALL   0F8A
01A0E:  MOVLB  1
01A10:  DECFSZ xC7,F
01A12:  BRA    1A02
01A14:  MOVFF  1C6,2FB
01A18:  MOVLB  0
01A1A:  CALL   0F8A
01A1E:  MOVLB  1
01A20:  INCF   xC5,F
01A22:  BRA    19C6
....................     }
....................     
....................     output_high(CS_PIN_COM);  // Deselect SPI devices
01A24:  BCF    F93.3
01A26:  BSF    F8A.3
....................     output_high(MX_PIN_COM);  //Deselect MUX from flash
01A28:  BCF    F94.4
01A2A:  BSF    F8B.4
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN IN COM!\n", data_number);
01A2C:  MOVLW  0A
01A2E:  MOVLB  2
01A30:  MOVWF  xFB
01A32:  MOVLB  0
01A34:  CALL   0F8A
01A38:  MOVFF  1C0,2F5
01A3C:  MOVLW  18
01A3E:  MOVLB  2
01A40:  MOVWF  xF6
01A42:  MOVLB  0
01A44:  RCALL  1336
01A46:  MOVLW  5D
01A48:  MOVWF  FF6
01A4A:  MOVLW  00
01A4C:  MOVWF  FF7
01A4E:  MOVLW  00
01A50:  MOVWF  FF8
01A52:  MOVLW  17
01A54:  MOVLB  2
01A56:  MOVWF  xF5
01A58:  MOVLB  0
01A5A:  CALL   11FA
01A5E:  GOTO   306A (RETURN)
.................... }
.................... 
.................... void WRITE_DATA_NBYTES_ADCS(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS IN ADCS: 0x%08lx\n", ADDRESS);  // Print address as hex
*
01B60:  MOVLW  76
01B62:  MOVWF  FF6
01B64:  MOVLW  00
01B66:  MOVWF  FF7
01B68:  MOVLW  00
01B6A:  MOVWF  FF8
01B6C:  MOVLW  19
01B6E:  MOVLB  2
01B70:  MOVWF  xF5
01B72:  MOVLB  0
01B74:  CALL   11FA
01B78:  MOVFF  1BD,2F5
01B7C:  MOVLW  57
01B7E:  MOVLB  2
01B80:  MOVWF  xF6
01B82:  MOVLB  0
01B84:  CALL   12D2
01B88:  MOVFF  1BC,2F5
01B8C:  MOVLW  57
01B8E:  MOVLB  2
01B90:  MOVWF  xF6
01B92:  MOVLB  0
01B94:  CALL   12D2
01B98:  MOVFF  1BB,2F5
01B9C:  MOVLW  57
01B9E:  MOVLB  2
01BA0:  MOVWF  xF6
01BA2:  MOVLB  0
01BA4:  CALL   12D2
01BA8:  MOVFF  1BA,2F5
01BAC:  MOVLW  57
01BAE:  MOVLB  2
01BB0:  MOVWF  xF6
01BB2:  MOVLB  0
01BB4:  CALL   12D2
01BB8:  MOVLW  0A
01BBA:  MOVLB  2
01BBC:  MOVWF  xFB
01BBE:  MOVLB  0
01BC0:  CALL   0F8A
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
01BC4:  MOVLB  1
01BC6:  MOVFF  1BD,1C1
01BCA:  CLRF   03
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01BCC:  MOVFF  1BC,1C2
01BD0:  CLRF   03
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
01BD2:  MOVFF  1BB,1C3
01BD6:  CLRF   03
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
01BD8:  MOVFF  1BA,1C4
01BDC:  CLRF   03
....................     WRITE_ENABLE_OF_ADCS();  // Enable write operation
01BDE:  MOVLB  0
01BE0:  BRA    1B3E
.................... 
.................... //    // Lower MX to connect to flash device
.................... //    output_low(MX_PIN_ADCS);
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_ADCS);
01BE2:  BCF    F92.2
01BE4:  BCF    F89.2
....................     delay_us(2);  // Small delay for stabilization
01BE6:  MOVLW  02
01BE8:  MOVWF  00
01BEA:  DECFSZ 00,F
01BEC:  BRA    1BEA
01BEE:  NOP   
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT3, WRITE_PAGE);
01BF0:  MOVLW  12
01BF2:  MOVLB  1
01BF4:  MOVWF  xC6
01BF6:  MOVLW  08
01BF8:  MOVWF  xC7
01BFA:  MOVLW  01
01BFC:  MOVWF  xC8
01BFE:  MOVLB  0
01C00:  RCALL  17E8
....................     spi_xfer(SPIPORT3, adsress[0]);
01C02:  MOVFF  1C1,1C6
01C06:  MOVLW  08
01C08:  MOVLB  1
01C0A:  MOVWF  xC7
01C0C:  MOVLW  01
01C0E:  MOVWF  xC8
01C10:  MOVLB  0
01C12:  RCALL  17E8
....................     spi_xfer(SPIPORT3, adsress[1]);
01C14:  MOVFF  1C2,1C6
01C18:  MOVLW  08
01C1A:  MOVLB  1
01C1C:  MOVWF  xC7
01C1E:  MOVLW  01
01C20:  MOVWF  xC8
01C22:  MOVLB  0
01C24:  RCALL  17E8
....................     spi_xfer(SPIPORT3, adsress[2]);
01C26:  MOVFF  1C3,1C6
01C2A:  MOVLW  08
01C2C:  MOVLB  1
01C2E:  MOVWF  xC7
01C30:  MOVLW  01
01C32:  MOVWF  xC8
01C34:  MOVLB  0
01C36:  RCALL  17E8
....................     spi_xfer(SPIPORT3, adsress[3]);
01C38:  MOVFF  1C4,1C6
01C3C:  MOVLW  08
01C3E:  MOVLB  1
01C40:  MOVWF  xC7
01C42:  MOVLW  01
01C44:  MOVWF  xC8
01C46:  MOVLB  0
01C48:  RCALL  17E8
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
01C4A:  MOVLB  1
01C4C:  CLRF   xC5
01C4E:  MOVF   xC0,W
01C50:  SUBWF  xC5,W
01C52:  BC    1CAC
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
01C54:  MOVF   xC5,W
01C56:  ADDWF  xBE,W
01C58:  MOVWF  FE9
01C5A:  MOVLW  00
01C5C:  ADDWFC xBF,W
01C5E:  MOVWF  FEA
01C60:  MOVFF  FEF,2F6
01C64:  MOVLW  08
01C66:  MOVLB  2
01C68:  MOVWF  xF7
01C6A:  MOVLW  01
01C6C:  MOVWF  xF8
01C6E:  MOVLB  0
01C70:  CALL   10E0
....................         fprintf(EXT,"%02c", data[i]);    // Print each byte as hex (debugging purpose)
01C74:  MOVLB  1
01C76:  MOVF   xC5,W
01C78:  ADDWF  xBE,W
01C7A:  MOVWF  FE9
01C7C:  MOVLW  00
01C7E:  ADDWFC xBF,W
01C80:  MOVWF  FEA
01C82:  MOVFF  FEF,1C6
01C86:  MOVLW  01
01C88:  MOVWF  xC7
01C8A:  MOVLW  20
01C8C:  MOVLB  2
01C8E:  MOVWF  xFB
01C90:  MOVLB  0
01C92:  CALL   0F8A
01C96:  MOVLB  1
01C98:  DECFSZ xC7,F
01C9A:  BRA    1C8A
01C9C:  MOVFF  1C6,2FB
01CA0:  MOVLB  0
01CA2:  CALL   0F8A
01CA6:  MOVLB  1
01CA8:  INCF   xC5,F
01CAA:  BRA    1C4E
....................     }
....................     
....................     output_high(CS_PIN_ADCS);  // Deselect SPI device5
01CAC:  BCF    F92.2
01CAE:  BSF    F89.2
....................     output_high(MX_PIN_ADCS);  //Deselect MUX from flash
01CB0:  BCF    F92.5
01CB2:  BSF    F89.5
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN IN ADCS!\n", data_number);
01CB4:  MOVLW  0A
01CB6:  MOVLB  2
01CB8:  MOVWF  xFB
01CBA:  MOVLB  0
01CBC:  CALL   0F8A
01CC0:  MOVFF  1C0,2F5
01CC4:  MOVLW  18
01CC6:  MOVLB  2
01CC8:  MOVWF  xF6
01CCA:  MOVLB  0
01CCC:  CALL   1336
01CD0:  MOVLW  99
01CD2:  MOVWF  FF6
01CD4:  MOVLW  00
01CD6:  MOVWF  FF7
01CD8:  MOVLW  00
01CDA:  MOVWF  FF8
01CDC:  MOVLW  18
01CDE:  MOVLB  2
01CE0:  MOVWF  xF5
01CE2:  MOVLB  0
01CE4:  CALL   11FA
01CE8:  GOTO   30CC (RETURN)
.................... }
....................  
.................... 
.................... void READ_DATA_NBYTES(unsigned int32 ADDRESS, unsigned char *Data_return, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................    
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
*
0112C:  MOVLB  1
0112E:  MOVFF  1BF,1C3
01132:  CLRF   03
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01134:  MOVFF  1BE,1C4
01138:  CLRF   03
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
0113A:  MOVFF  1BD,1C5
0113E:  CLRF   03
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
01140:  MOVFF  1BC,1C6
01144:  CLRF   03
.................... 
....................     output_low(CS_PIN_1);  // Select SPI device
01146:  BCF    F96.2
01148:  BCF    F8D.2
.................... 
....................     // Send READ DATA COMMAND (0x13 or appropriate for your flash chip)
....................     spi_xfer(SPIPORT, READ_DATA_BYTES);
0114A:  MOVLW  13
0114C:  MOVLB  2
0114E:  MOVWF  xF6
01150:  MOVLW  08
01152:  MOVWF  xF7
01154:  MOVLW  01
01156:  MOVWF  xF8
01158:  MOVLB  0
0115A:  RCALL  10E0
....................     // Send address bytes
....................     spi_xfer(SPIPORT, adsress[0]);
0115C:  MOVFF  1C3,2F6
01160:  MOVLW  08
01162:  MOVLB  2
01164:  MOVWF  xF7
01166:  MOVLW  01
01168:  MOVWF  xF8
0116A:  MOVLB  0
0116C:  RCALL  10E0
....................     spi_xfer(SPIPORT, adsress[1]);
0116E:  MOVFF  1C4,2F6
01172:  MOVLW  08
01174:  MOVLB  2
01176:  MOVWF  xF7
01178:  MOVLW  01
0117A:  MOVWF  xF8
0117C:  MOVLB  0
0117E:  RCALL  10E0
....................     spi_xfer(SPIPORT, adsress[2]);
01180:  MOVFF  1C5,2F6
01184:  MOVLW  08
01186:  MOVLB  2
01188:  MOVWF  xF7
0118A:  MOVLW  01
0118C:  MOVWF  xF8
0118E:  MOVLB  0
01190:  RCALL  10E0
....................     spi_xfer(SPIPORT, adsress[3]);
01192:  MOVFF  1C6,2F6
01196:  MOVLW  08
01198:  MOVLB  2
0119A:  MOVWF  xF7
0119C:  MOVLW  01
0119E:  MOVWF  xF8
011A0:  MOVLB  0
011A2:  RCALL  10E0
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number; i++) {
011A4:  MOVLB  1
011A6:  CLRF   xC7
011A8:  MOVF   xC2,W
011AA:  SUBWF  xC7,W
011AC:  BC    11EA
....................         Data_return[i] = spi_xfer(SPIPORT, 0x00);  // Send dummy byte to receive data
011AE:  MOVF   xC7,W
011B0:  ADDWF  xC0,W
011B2:  MOVWF  FE9
011B4:  MOVLW  00
011B6:  ADDWFC xC1,W
011B8:  MOVWF  FEA
011BA:  MOVLB  2
011BC:  CLRF   xF6
011BE:  MOVLW  08
011C0:  MOVWF  xF7
011C2:  MOVLW  01
011C4:  MOVWF  xF8
011C6:  MOVLB  0
011C8:  RCALL  10E0
011CA:  MOVFF  01,FEF
....................         fprintf(EXT,"%c", Data_return[i]);           // Print each byte as hex
011CE:  MOVLB  1
011D0:  MOVF   xC7,W
011D2:  ADDWF  xC0,W
011D4:  MOVWF  FE9
011D6:  MOVLW  00
011D8:  ADDWFC xC1,W
011DA:  MOVWF  FEA
011DC:  MOVFF  FEF,2FB
011E0:  MOVLB  0
011E2:  RCALL  0F8A
011E4:  MOVLB  1
011E6:  INCF   xC7,F
011E8:  BRA    11A8
....................     }
.................... 
....................     output_high(CS_PIN_1);  // Deselect SPI device after reading
011EA:  BCF    F96.2
011EC:  BSF    F8D.2
....................     fprintf(EXT,"\n");
011EE:  MOVLW  0A
011F0:  MOVLB  2
011F2:  MOVWF  xFB
011F4:  MOVLB  0
011F6:  RCALL  0F8A
....................     return ;
011F8:  RETURN 0
.................... } 
.................... 
.................... void READ_DATA_NBYTES_COM(unsigned int32 ADDRESS, unsigned char *Data_return, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................    
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
*
01A62:  MOVLB  1
01A64:  MOVFF  1BD,1C1
01A68:  CLRF   03
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01A6A:  MOVFF  1BC,1C2
01A6E:  CLRF   03
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
01A70:  MOVFF  1BB,1C3
01A74:  CLRF   03
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
01A76:  MOVFF  1BA,1C4
01A7A:  CLRF   03
.................... 
....................     output_low(MX_PIN_COM);  // Lower MX to connect to flash device
01A7C:  BCF    F94.4
01A7E:  BCF    F8B.4
....................     output_low(CS_PIN_COM);  // Select SPI device
01A80:  BCF    F93.3
01A82:  BCF    F8A.3
.................... 
....................     // Send READ DATA COMMAND (0x13 or appropriate for your flash chip)
....................     spi_xfer(SPIPORT2, READ_DATA_BYTES);
01A84:  MOVLW  13
01A86:  MOVWF  xC6
01A88:  MOVLW  08
01A8A:  MOVWF  xC7
01A8C:  MOVLW  01
01A8E:  MOVWF  xC8
01A90:  MOVLB  0
01A92:  RCALL  1710
....................     // Send address bytes
....................     spi_xfer(SPIPORT2, adsress[0]);
01A94:  MOVFF  1C1,1C6
01A98:  MOVLW  08
01A9A:  MOVLB  1
01A9C:  MOVWF  xC7
01A9E:  MOVLW  01
01AA0:  MOVWF  xC8
01AA2:  MOVLB  0
01AA4:  RCALL  1710
....................     spi_xfer(SPIPORT2, adsress[1]);
01AA6:  MOVFF  1C2,1C6
01AAA:  MOVLW  08
01AAC:  MOVLB  1
01AAE:  MOVWF  xC7
01AB0:  MOVLW  01
01AB2:  MOVWF  xC8
01AB4:  MOVLB  0
01AB6:  RCALL  1710
....................     spi_xfer(SPIPORT2, adsress[2]);
01AB8:  MOVFF  1C3,1C6
01ABC:  MOVLW  08
01ABE:  MOVLB  1
01AC0:  MOVWF  xC7
01AC2:  MOVLW  01
01AC4:  MOVWF  xC8
01AC6:  MOVLB  0
01AC8:  RCALL  1710
....................     spi_xfer(SPIPORT2, adsress[3]);
01ACA:  MOVFF  1C4,1C6
01ACE:  MOVLW  08
01AD0:  MOVLB  1
01AD2:  MOVWF  xC7
01AD4:  MOVLW  01
01AD6:  MOVWF  xC8
01AD8:  MOVLB  0
01ADA:  RCALL  1710
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number; i++) {
01ADC:  MOVLB  1
01ADE:  CLRF   xC5
01AE0:  MOVF   xC0,W
01AE2:  SUBWF  xC5,W
01AE4:  BC    1B26
....................         Data_return[i] = spi_xfer(SPIPORT, 0x00);  // Send dummy byte to receive data
01AE6:  MOVF   xC5,W
01AE8:  ADDWF  xBE,W
01AEA:  MOVWF  FE9
01AEC:  MOVLW  00
01AEE:  ADDWFC xBF,W
01AF0:  MOVWF  FEA
01AF2:  MOVLB  2
01AF4:  CLRF   xF6
01AF6:  MOVLW  08
01AF8:  MOVWF  xF7
01AFA:  MOVLW  01
01AFC:  MOVWF  xF8
01AFE:  MOVLB  0
01B00:  CALL   10E0
01B04:  MOVFF  01,FEF
....................         fprintf(EXT,"%c", Data_return[i]);           // Print each byte as hex
01B08:  MOVLB  1
01B0A:  MOVF   xC5,W
01B0C:  ADDWF  xBE,W
01B0E:  MOVWF  FE9
01B10:  MOVLW  00
01B12:  ADDWFC xBF,W
01B14:  MOVWF  FEA
01B16:  MOVFF  FEF,2FB
01B1A:  MOVLB  0
01B1C:  CALL   0F8A
01B20:  MOVLB  1
01B22:  INCF   xC5,F
01B24:  BRA    1AE0
....................     }
....................     fprintf(EXT,"\n");
01B26:  MOVLW  0A
01B28:  MOVLB  2
01B2A:  MOVWF  xFB
01B2C:  MOVLB  0
01B2E:  CALL   0F8A
....................     
....................     output_high(CS_PIN_COM);  // Deselect SPI device after reading
01B32:  BCF    F93.3
01B34:  BSF    F8A.3
....................     output_high(MX_PIN_COM);  //Deselect MUX from flash
01B36:  BCF    F94.4
01B38:  BSF    F8B.4
01B3A:  GOTO   309C (RETURN)
.................... }
.................... 
.................... void READ_DATA_NBYTES_ADCS(unsigned int32 ADDRESS, unsigned char *Data_return, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................    
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
*
01CEC:  MOVLB  1
01CEE:  MOVFF  1BD,1C1
01CF2:  CLRF   03
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
01CF4:  MOVFF  1BC,1C2
01CF8:  CLRF   03
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
01CFA:  MOVFF  1BB,1C3
01CFE:  CLRF   03
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
01D00:  MOVFF  1BA,1C4
01D04:  CLRF   03
.................... 
....................     output_low(MX_PIN_ADCS);  // Lower MX to connect to flash device
01D06:  BCF    F92.5
01D08:  BCF    F89.5
....................     output_low(CS_PIN_ADCS);  // Select SPI device
01D0A:  BCF    F92.2
01D0C:  BCF    F89.2
.................... 
....................     // Send READ DATA COMMAND (0x13 or appropriate for your flash chip)
....................     spi_xfer(SPIPORT3, READ_DATA_BYTES);
01D0E:  MOVLW  13
01D10:  MOVWF  xC6
01D12:  MOVLW  08
01D14:  MOVWF  xC7
01D16:  MOVLW  01
01D18:  MOVWF  xC8
01D1A:  MOVLB  0
01D1C:  RCALL  17E8
....................     // Send address bytes
....................     spi_xfer(SPIPORT3, adsress[0]);
01D1E:  MOVFF  1C1,1C6
01D22:  MOVLW  08
01D24:  MOVLB  1
01D26:  MOVWF  xC7
01D28:  MOVLW  01
01D2A:  MOVWF  xC8
01D2C:  MOVLB  0
01D2E:  RCALL  17E8
....................     spi_xfer(SPIPORT3, adsress[1]);
01D30:  MOVFF  1C2,1C6
01D34:  MOVLW  08
01D36:  MOVLB  1
01D38:  MOVWF  xC7
01D3A:  MOVLW  01
01D3C:  MOVWF  xC8
01D3E:  MOVLB  0
01D40:  RCALL  17E8
....................     spi_xfer(SPIPORT3, adsress[2]);
01D42:  MOVFF  1C3,1C6
01D46:  MOVLW  08
01D48:  MOVLB  1
01D4A:  MOVWF  xC7
01D4C:  MOVLW  01
01D4E:  MOVWF  xC8
01D50:  MOVLB  0
01D52:  RCALL  17E8
....................     spi_xfer(SPIPORT3, adsress[3]);
01D54:  MOVFF  1C4,1C6
01D58:  MOVLW  08
01D5A:  MOVLB  1
01D5C:  MOVWF  xC7
01D5E:  MOVLW  01
01D60:  MOVWF  xC8
01D62:  MOVLB  0
01D64:  RCALL  17E8
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number; i++) {
01D66:  MOVLB  1
01D68:  CLRF   xC5
01D6A:  MOVF   xC0,W
01D6C:  SUBWF  xC5,W
01D6E:  BC    1DB0
....................         Data_return[i] = spi_xfer(SPIPORT, 0x00);  // Send dummy byte to receive data
01D70:  MOVF   xC5,W
01D72:  ADDWF  xBE,W
01D74:  MOVWF  FE9
01D76:  MOVLW  00
01D78:  ADDWFC xBF,W
01D7A:  MOVWF  FEA
01D7C:  MOVLB  2
01D7E:  CLRF   xF6
01D80:  MOVLW  08
01D82:  MOVWF  xF7
01D84:  MOVLW  01
01D86:  MOVWF  xF8
01D88:  MOVLB  0
01D8A:  CALL   10E0
01D8E:  MOVFF  01,FEF
....................         fprintf(EXT,"%c", Data_return[i]);           // Print each byte as hex
01D92:  MOVLB  1
01D94:  MOVF   xC5,W
01D96:  ADDWF  xBE,W
01D98:  MOVWF  FE9
01D9A:  MOVLW  00
01D9C:  ADDWFC xBF,W
01D9E:  MOVWF  FEA
01DA0:  MOVFF  FEF,2FB
01DA4:  MOVLB  0
01DA6:  CALL   0F8A
01DAA:  MOVLB  1
01DAC:  INCF   xC5,F
01DAE:  BRA    1D6A
....................     }
....................     fprintf(EXT,"\n");
01DB0:  MOVLW  0A
01DB2:  MOVLB  2
01DB4:  MOVWF  xFB
01DB6:  MOVLB  0
01DB8:  CALL   0F8A
....................     
....................     output_high(CS_PIN_ADCS);  // Deselect SPI device after reading
01DBC:  BCF    F92.2
01DBE:  BSF    F89.2
....................     output_high(MX_PIN_ADCS);  //Deselect MUX from flash
01DC0:  BCF    F92.5
01DC2:  BSF    F89.5
01DC4:  GOTO   30FE (RETURN)
.................... }
.................... 
.................... void READ_CHIP_ID_OF() {
....................     int8 chip_id[8];
....................     output_low(CS_PIN_1);  // Lower the CS PIN
*
01690:  BCF    F96.2
01692:  BCF    F8D.2
....................     spi_xfer(SPIPORT, READ_ID);  // READ ID COMMAND (0x9F)
01694:  MOVLW  9F
01696:  MOVLB  2
01698:  MOVWF  xF6
0169A:  MOVLW  08
0169C:  MOVWF  xF7
0169E:  MOVLW  01
016A0:  MOVWF  xF8
016A2:  MOVLB  0
016A4:  RCALL  10E0
....................     
....................     // Receive 8 bytes of chip ID
....................     for (int i = 0; i < 8; i++) {
016A6:  MOVLB  1
016A8:  CLRF   xEA
016AA:  MOVF   xEA,W
016AC:  SUBLW  07
016AE:  BNC   1700
....................         chip_id[i] = spi_xfer(SPIPORT, 0x00);  // Send dummy bytes to receive data
016B0:  CLRF   03
016B2:  MOVF   xEA,W
016B4:  ADDLW  E2
016B6:  MOVWF  FE9
016B8:  MOVLW  01
016BA:  ADDWFC 03,W
016BC:  MOVWF  FEA
016BE:  MOVLB  2
016C0:  CLRF   xF6
016C2:  MOVLW  08
016C4:  MOVWF  xF7
016C6:  MOVLW  01
016C8:  MOVWF  xF8
016CA:  MOVLB  0
016CC:  RCALL  10E0
016CE:  MOVFF  01,FEF
....................         fprintf(EXT, "%02X ", chip_id[i]);
016D2:  CLRF   03
016D4:  MOVLB  1
016D6:  MOVF   xEA,W
016D8:  ADDLW  E2
016DA:  MOVWF  FE9
016DC:  MOVLW  01
016DE:  ADDWFC 03,W
016E0:  MOVWF  FEA
016E2:  MOVFF  FEF,2F5
016E6:  MOVLW  37
016E8:  MOVLB  2
016EA:  MOVWF  xF6
016EC:  MOVLB  0
016EE:  RCALL  12D2
016F0:  MOVLW  20
016F2:  MOVLB  2
016F4:  MOVWF  xFB
016F6:  MOVLB  0
016F8:  RCALL  0F8A
016FA:  MOVLB  1
016FC:  INCF   xEA,F
016FE:  BRA    16AA
....................     }
....................     fprintf(EXT,"\n");
01700:  MOVLW  0A
01702:  MOVLB  2
01704:  MOVWF  xFB
01706:  MOVLB  0
01708:  RCALL  0F8A
.................... 
....................     output_high(CS_PIN_1);  // Raise CS PIN back
0170A:  BCF    F96.2
0170C:  BSF    F8D.2
0170E:  RETURN 0
.................... }
.................... void READ_CHIP_ID_OF_COM() {
....................     int8 chip_id[8];
....................     output_low(MX_PIN_COM);
*
0175C:  BCF    F94.4
0175E:  BCF    F8B.4
....................     output_low(CS_PIN_COM);  // Lower the CS PIN
01760:  BCF    F93.3
01762:  BCF    F8A.3
....................     spi_xfer(SPIPORT2, READ_ID);  // READ ID COMMAND (0x9F)
01764:  MOVLW  9F
01766:  MOVLB  1
01768:  MOVWF  xC6
0176A:  MOVLW  08
0176C:  MOVWF  xC7
0176E:  MOVLW  01
01770:  MOVWF  xC8
01772:  MOVLB  0
01774:  RCALL  1710
....................     
....................     // Receive 8 bytes of chip ID
....................     for (int i = 0; i < 8; i++) {
01776:  MOVLB  1
01778:  CLRF   xC2
0177A:  MOVF   xC2,W
0177C:  SUBLW  07
0177E:  BNC   17D0
....................         chip_id[i] = spi_xfer(SPIPORT2, 0x00);  // Send dummy bytes to receive data
01780:  CLRF   03
01782:  MOVF   xC2,W
01784:  ADDLW  BA
01786:  MOVWF  FE9
01788:  MOVLW  01
0178A:  ADDWFC 03,W
0178C:  MOVWF  FEA
0178E:  CLRF   xC6
01790:  MOVLW  08
01792:  MOVWF  xC7
01794:  MOVLW  01
01796:  MOVWF  xC8
01798:  MOVLB  0
0179A:  RCALL  1710
0179C:  MOVFF  01,FEF
....................         fprintf(EXT, "%02X ", chip_id[i]);
017A0:  CLRF   03
017A2:  MOVLB  1
017A4:  MOVF   xC2,W
017A6:  ADDLW  BA
017A8:  MOVWF  FE9
017AA:  MOVLW  01
017AC:  ADDWFC 03,W
017AE:  MOVWF  FEA
017B0:  MOVFF  FEF,2F5
017B4:  MOVLW  37
017B6:  MOVLB  2
017B8:  MOVWF  xF6
017BA:  MOVLB  0
017BC:  RCALL  12D2
017BE:  MOVLW  20
017C0:  MOVLB  2
017C2:  MOVWF  xFB
017C4:  MOVLB  0
017C6:  CALL   0F8A
017CA:  MOVLB  1
017CC:  INCF   xC2,F
017CE:  BRA    177A
....................     }
....................     fprintf(EXT,"\n");
017D0:  MOVLW  0A
017D2:  MOVLB  2
017D4:  MOVWF  xFB
017D6:  MOVLB  0
017D8:  CALL   0F8A
.................... 
....................     output_high(CS_PIN_COM);  // Raise CS PIN back
017DC:  BCF    F93.3
017DE:  BSF    F8A.3
....................     output_high(MX_PIN_COM);
017E0:  BCF    F94.4
017E2:  BSF    F8B.4
017E4:  GOTO   2F74 (RETURN)
.................... }
.................... 
.................... void READ_CHIP_ID_OF_ADCS() {
....................     int8 chip_id[8];
....................     output_low(MX_PIN_ADCS);
*
01834:  BCF    F92.5
01836:  BCF    F89.5
....................     output_low(CS_PIN_ADCS);  // Lower the CS PIN
01838:  BCF    F92.2
0183A:  BCF    F89.2
....................     spi_xfer(SPIPORT3, READ_ID);  // READ ID COMMAND (0x9F)
0183C:  MOVLW  9F
0183E:  MOVLB  1
01840:  MOVWF  xC6
01842:  MOVLW  08
01844:  MOVWF  xC7
01846:  MOVLW  01
01848:  MOVWF  xC8
0184A:  MOVLB  0
0184C:  RCALL  17E8
....................     
....................     // Receive 8 bytes of chip ID
....................     for (int i = 0; i < 8; i++) {
0184E:  MOVLB  1
01850:  CLRF   xC2
01852:  MOVF   xC2,W
01854:  SUBLW  07
01856:  BNC   18A8
....................         chip_id[i] = spi_xfer(SPIPORT3, 0x00);  // Send dummy bytes to receive data
01858:  CLRF   03
0185A:  MOVF   xC2,W
0185C:  ADDLW  BA
0185E:  MOVWF  FE9
01860:  MOVLW  01
01862:  ADDWFC 03,W
01864:  MOVWF  FEA
01866:  CLRF   xC6
01868:  MOVLW  08
0186A:  MOVWF  xC7
0186C:  MOVLW  01
0186E:  MOVWF  xC8
01870:  MOVLB  0
01872:  RCALL  17E8
01874:  MOVFF  01,FEF
....................         fprintf(EXT, "%02X ", chip_id[i]);
01878:  CLRF   03
0187A:  MOVLB  1
0187C:  MOVF   xC2,W
0187E:  ADDLW  BA
01880:  MOVWF  FE9
01882:  MOVLW  01
01884:  ADDWFC 03,W
01886:  MOVWF  FEA
01888:  MOVFF  FEF,2F5
0188C:  MOVLW  37
0188E:  MOVLB  2
01890:  MOVWF  xF6
01892:  MOVLB  0
01894:  RCALL  12D2
01896:  MOVLW  20
01898:  MOVLB  2
0189A:  MOVWF  xFB
0189C:  MOVLB  0
0189E:  CALL   0F8A
018A2:  MOVLB  1
018A4:  INCF   xC2,F
018A6:  BRA    1852
....................     }
....................     fprintf(EXT,"\n");
018A8:  MOVLW  0A
018AA:  MOVLB  2
018AC:  MOVWF  xFB
018AE:  MOVLB  0
018B0:  CALL   0F8A
.................... 
....................     output_high(CS_PIN_ADCS);  // Raise CS PIN back
018B4:  BCF    F92.2
018B6:  BSF    F89.2
....................     output_high(MX_PIN_ADCS);
018B8:  BCF    F92.5
018BA:  BSF    F89.5
018BC:  GOTO   2F88 (RETURN)
.................... }
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... // Main menu functions
.................... 
.................... void startup_freeze(){
....................     delay_ms(2000);
*
00FF8:  MOVLW  08
00FFA:  MOVLB  1
00FFC:  MOVWF  xBA
00FFE:  MOVLW  FA
01000:  MOVWF  xBC
01002:  MOVLB  0
01004:  RCALL  0F60
01006:  MOVLB  1
01008:  DECFSZ xBA,F
0100A:  BRA    0FFE
....................     fprintf(EXT, "POWER ON!\n");
0100C:  MOVLW  B2
0100E:  MOVWF  FF6
01010:  MOVLW  00
01012:  MOVWF  FF7
01014:  MOVLW  00
01016:  MOVWF  FF8
01018:  MOVLB  0
0101A:  RCALL  0FD0
....................     output_low(EN_SUP_3V3_1);
0101C:  BCF    F93.0
0101E:  BCF    F8A.0
....................     output_low(EN_SUP_3V3_2 );
01020:  BCF    F98.1
01022:  BCF    F8F.1
....................     output_low(EN_SUP_3V3_DAQ );
01024:  BCF    F95.0
01026:  BCF    F8C.0
....................     output_low(EN_SUP_UNREG);
01028:  BCF    F93.1
0102A:  BCF    F8A.1
....................     output_low(EN_SUP_5V0);
0102C:  BCF    F95.1
0102E:  BCF    F8C.1
....................     output_low(MVCAM_PWR);
01030:  BCF    F98.0
01032:  BCF    F8F.0
....................     output_low(OVCAM_PWR);
01034:  BCF    F95.7
01036:  BCF    F8C.7
....................     output_high(ADCS_PWR);
01038:  BCF    F95.6
0103A:  BSF    F8C.6
....................     output_high(CS_PIN_1);
0103C:  BCF    F96.2
0103E:  BSF    F8D.2
....................     output_high(CS_PIN_COM );
01040:  BCF    F93.3
01042:  BSF    F8A.3
....................     output_high(CS_PIN_ADCS );
01044:  BCF    F92.2
01046:  BSF    F89.2
....................     output_high(MX_PIN_OVCAM );
01048:  BCF    F98.2
0104A:  BSF    F8F.2
....................     output_high(MX_PIN_MVCAM );
0104C:  BCF    F98.3
0104E:  BSF    F8F.3
....................     output_high(MX_PIN_ADCS );
01050:  BCF    F92.5
01052:  BSF    F89.5
....................     output_high(MX_PIN_COM );
01054:  BCF    F94.4
01056:  BSF    F8B.4
....................     
....................     fprintf(EXT, "Digital pin out configured \n");
01058:  MOVLW  BE
0105A:  MOVWF  FF6
0105C:  MOVLW  00
0105E:  MOVWF  FF7
01060:  MOVLW  00
01062:  MOVWF  FF8
01064:  RCALL  0FD0
01066:  GOTO   2F44 (RETURN)
....................         
.................... }
.................... 
.................... void RTC_initialize(){
....................         setup_lcd(LCD_DISABLED);
*
0107C:  MOVLB  E
0107E:  CLRF   xD6
01080:  CLRF   xD7
01082:  CLRF   xDA
01084:  CLRF   xD8
01086:  CLRF   xD9
01088:  MOVLB  F
....................     rtc_time_t read_clock;
....................     setup_rtc(RTC_ENABLE | RTC_CLOCK_SOSC | RTC_CLOCK_INT, 0);
0108A:  MOVLB  F
0108C:  MOVLW  55
0108E:  MOVWF  F7E
01090:  MOVLW  AA
01092:  MOVWF  F7E
01094:  BSF    x5F.5
01096:  CLRF   x5E
01098:  MOVLW  04
0109A:  MOVWF  x57
0109C:  MOVLW  80
0109E:  MOVWF  x5F
010A0:  BCF    x5F.5
....................     rtc_read(&read_clock);
010A2:  BSF    x5F.0
010A4:  BSF    x5F.1
010A6:  MOVLW  01
010A8:  MOVWF  FEA
010AA:  MOVLW  BA
010AC:  MOVWF  FE9
010AE:  MOVLW  04
010B0:  MOVWF  01
010B2:  MOVF   x5C,W
010B4:  MOVLB  0
010B6:  RCALL  106A
010B8:  MOVWF  FEE
010BA:  MOVLB  F
010BC:  MOVF   x5D,W
010BE:  MOVLB  0
010C0:  RCALL  106A
010C2:  MOVWF  FEE
010C4:  DECFSZ 01,F
010C6:  BRA    10CA
010C8:  BRA    10CE
010CA:  MOVLB  F
010CC:  BRA    10B2
....................     fprintf(EXT, "RTCC setup started!\n");
010CE:  MOVLW  DC
010D0:  MOVWF  FF6
010D2:  MOVLW  00
010D4:  MOVWF  FF7
010D6:  MOVLW  00
010D8:  MOVWF  FF8
010DA:  RCALL  0FD0
010DC:  GOTO   2F48 (RETURN)
.................... 
.................... }
.................... 
.................... void uart_repeater() {
....................     char received_data;
.................... 
....................     while (TRUE) {
....................         // Check if data is available on the EPS stream
....................         if (kbhit(EPS)) {
*
02C4E:  BTFSC  F84.4
02C50:  BRA    2C60
....................             // Read one byte from the EPS stream
....................             received_data = fgetc(EPS);
02C52:  BRA    2C02
02C54:  MOVFF  01,1BB
.................... 
....................             // Send the received byte to the EXT stream
....................             fputc(received_data, EXT);
02C58:  MOVFF  1BB,2FB
02C5C:  CALL   0F8A
....................         }
02C60:  BRA    2C4E
....................     }
02C62:  GOTO   2E58 (RETURN)
.................... }
.................... 
.................... //#define SHUTDOWN_COUNT_ADDRESS  0x00000500  // Address where shutdown count is stored
.................... 
.................... int8 update_shutdown_count(void) {
....................     fprintf(EXT, "Shutdown count started\n");
*
0155A:  MOVLW  F2
0155C:  MOVWF  FF6
0155E:  MOVLW  00
01560:  MOVWF  FF7
01562:  MOVLW  00
01564:  MOVWF  FF8
01566:  RCALL  0FD0
.................... 
....................     unsigned int8 shutdown_count[1];
....................     READ_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
01568:  MOVLB  1
0156A:  CLRF   xBF
0156C:  MOVLW  10
0156E:  MOVWF  xBE
01570:  CLRF   xBD
01572:  MOVWF  xBC
01574:  MOVLW  01
01576:  MOVWF  xC1
01578:  MOVLW  BA
0157A:  MOVWF  xC0
0157C:  MOVLW  01
0157E:  MOVWF  xC2
01580:  MOVLB  0
01582:  RCALL  112C
....................     delay_ms(10);
01584:  MOVLW  0A
01586:  MOVLB  1
01588:  MOVWF  xBC
0158A:  MOVLB  0
0158C:  RCALL  0F60
.................... 
....................     fprintf(EXT, "Read shutdown count: %u\n", shutdown_count[0]);
0158E:  MOVLW  0A
01590:  MOVWF  FF6
01592:  MOVLW  01
01594:  MOVWF  FF7
01596:  MOVLW  00
01598:  MOVWF  FF8
0159A:  MOVLW  15
0159C:  MOVLB  2
0159E:  MOVWF  xF5
015A0:  MOVLB  0
015A2:  RCALL  11FA
015A4:  MOVFF  1BA,1CE
015A8:  MOVLW  1B
015AA:  MOVLB  1
015AC:  MOVWF  xCF
015AE:  MOVLB  0
015B0:  RCALL  1256
015B2:  MOVLW  0A
015B4:  MOVLB  2
015B6:  MOVWF  xFB
015B8:  MOVLB  0
015BA:  RCALL  0F8A
.................... 
....................     // Check if the shutdown count is uninitialized (0xFF)
....................     if (shutdown_count[0] == 0xFF) {
015BC:  MOVLB  1
015BE:  INCFSZ xBA,W
015C0:  BRA    15D6
....................         shutdown_count[0] = 0;  // Initialize to 0 if uninitialized
015C2:  CLRF   xBA
....................         fprintf(EXT, "Shutdown count uninitialized, setting to 0\n");
015C4:  MOVLW  24
015C6:  MOVWF  FF6
015C8:  MOVLW  01
015CA:  MOVWF  FF7
015CC:  MOVLW  00
015CE:  MOVWF  FF8
015D0:  MOVLB  0
015D2:  RCALL  0FD0
015D4:  MOVLB  1
....................     }
.................... 
....................     shutdown_count[0] += 1;  // Increment the shutdown count
015D6:  MOVLW  01
015D8:  ADDWF  xBA,F
....................     WRITE_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
015DA:  MOVLB  2
015DC:  CLRF   xEC
015DE:  MOVLW  10
015E0:  MOVWF  xEB
015E2:  CLRF   xEA
015E4:  MOVWF  xE9
015E6:  MOVLW  01
015E8:  MOVWF  xEE
015EA:  MOVLW  BA
015EC:  MOVWF  xED
015EE:  MOVLW  01
015F0:  MOVWF  xEF
015F2:  MOVLB  0
015F4:  RCALL  13F2
....................     delay_ms(10);
015F6:  MOVLW  0A
015F8:  MOVLB  1
015FA:  MOVWF  xBC
015FC:  MOVLB  0
015FE:  RCALL  0F60
.................... 
....................     // Read back to verify it was written correctly
....................     unsigned int8 verify_count[1];
....................     READ_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, verify_count, 1);
01600:  MOVLB  1
01602:  CLRF   xBF
01604:  MOVLW  10
01606:  MOVWF  xBE
01608:  CLRF   xBD
0160A:  MOVWF  xBC
0160C:  MOVLW  01
0160E:  MOVWF  xC1
01610:  MOVLW  BB
01612:  MOVWF  xC0
01614:  MOVLW  01
01616:  MOVWF  xC2
01618:  MOVLB  0
0161A:  RCALL  112C
....................     if (shutdown_count[0] == verify_count[0]) {
0161C:  MOVLB  1
0161E:  MOVF   xBB,W
01620:  SUBWF  xBA,W
01622:  BNZ   1656
....................         fprintf(EXT, "Shutdown count successfully updated: %u\n", verify_count[0]);
01624:  MOVLW  50
01626:  MOVWF  FF6
01628:  MOVLW  01
0162A:  MOVWF  FF7
0162C:  MOVLW  00
0162E:  MOVWF  FF8
01630:  MOVLW  25
01632:  MOVLB  2
01634:  MOVWF  xF5
01636:  MOVLB  0
01638:  RCALL  11FA
0163A:  MOVFF  1BB,1CE
0163E:  MOVLW  1B
01640:  MOVLB  1
01642:  MOVWF  xCF
01644:  MOVLB  0
01646:  RCALL  1256
01648:  MOVLW  0A
0164A:  MOVLB  2
0164C:  MOVWF  xFB
0164E:  MOVLB  0
01650:  RCALL  0F8A
....................     } else {
01652:  BRA    1684
01654:  MOVLB  1
....................         fprintf(EXT, "Failed to update shutdown count. Read back: %u\n", verify_count[0]);
01656:  MOVLW  7A
01658:  MOVWF  FF6
0165A:  MOVLW  01
0165C:  MOVWF  FF7
0165E:  MOVLW  00
01660:  MOVWF  FF8
01662:  MOVLW  2C
01664:  MOVLB  2
01666:  MOVWF  xF5
01668:  MOVLB  0
0166A:  RCALL  11FA
0166C:  MOVFF  1BB,1CE
01670:  MOVLW  1B
01672:  MOVLB  1
01674:  MOVWF  xCF
01676:  MOVLB  0
01678:  RCALL  1256
0167A:  MOVLW  0A
0167C:  MOVLB  2
0167E:  MOVWF  xFB
01680:  MOVLB  0
01682:  RCALL  0F8A
....................     }
.................... 
....................     return shutdown_count[0];
01684:  MOVLB  1
01686:  MOVFF  1BA,01
0168A:  MOVLB  0
0168C:  GOTO   2F4C (RETURN)
.................... }
.................... void set_clock(rtc_time_t &date_time){
.................... 
....................    date_time.tm_year=0000;
*
029C0:  MOVLB  1
029C2:  CLRF   xBC
....................    date_time.tm_mon=00;
029C4:  CLRF   xBF
....................    date_time.tm_mday=00;
029C6:  CLRF   xBE
....................    date_time.tm_wday=00;
029C8:  CLRF   xC1
....................    date_time.tm_hour=00;
029CA:  CLRF   xC0
....................    date_time.tm_min=00;
029CC:  CLRF   xC3
....................    date_time.tm_sec=0; 
029CE:  CLRF   xC2
029D0:  MOVLB  F
.................... }
.................... void write_to_main_flash_menu(){
....................             unsigned int32 address;
....................             unsigned int8 data[256]; // Buffer for data to be written (adjust size as needed)
....................             unsigned char data_number;
....................             unsigned char choice;
....................             unsigned int8 i;
....................             // Prompt user to enter the address
....................             fprintf(EXT, "\nEnter Address (hex, 0x1234): 0x");
*
024B2:  MOVLW  AA
024B4:  MOVWF  FF6
024B6:  MOVLW  01
024B8:  MOVWF  FF7
024BA:  MOVLW  00
024BC:  MOVWF  FF8
024BE:  CALL   0FD0
....................             fscanf(EXT, "%x", &address); // Read address input in hex
024C2:  MOVLB  2
024C4:  CLRF   xE9
024C6:  CLRF   xEA
024C8:  MOVLW  01
024CA:  MOVWF  xEC
024CC:  MOVLW  E2
024CE:  MOVWF  xEB
024D0:  CLRF   xEE
024D2:  CLRF   xED
024D4:  MOVLB  0
024D6:  RCALL  22D2
024D8:  MOVF   01,F
024DA:  BNZ   24E4
024DC:  MOVLB  2
024DE:  CLRF   xEA
024E0:  BRA    24EC
024E2:  MOVLB  0
024E4:  MOVF   01,W
024E6:  MOVLB  2
024E8:  ADDWF  xE9,F
024EA:  INCF   xEA,F
.................... 
....................             // Prompt user to enter the number of bytes
....................             fprintf(EXT, "\nEnter number of bytes to write (max 256): ");
024EC:  MOVLW  CC
024EE:  MOVWF  FF6
024F0:  MOVLW  01
024F2:  MOVWF  FF7
024F4:  MOVLW  00
024F6:  MOVWF  FF8
024F8:  MOVLB  0
024FA:  CALL   0FD0
....................             fscanf(EXT, "%x", &data_number); // Read number of bytes
024FE:  MOVLB  2
02500:  CLRF   xE9
02502:  CLRF   xEA
02504:  MOVLW  02
02506:  MOVWF  xEE
02508:  MOVLW  E6
0250A:  MOVWF  xED
0250C:  CLRF   xF0
0250E:  CLRF   xEF
02510:  MOVLB  0
02512:  RCALL  23E2
02514:  MOVF   01,F
02516:  BNZ   2520
02518:  MOVLB  2
0251A:  CLRF   xEA
0251C:  BRA    2528
0251E:  MOVLB  0
02520:  MOVF   01,W
02522:  MOVLB  2
02524:  ADDWF  xE9,F
02526:  INCF   xEA,F
.................... 
....................             if (data_number > 256) {
....................                 fprintf(EXT, "Error: Maximum data length is 256 bytes.\n");
....................                 continue;
....................             }
.................... 
....................             // Get data from user
....................             fprintf(EXT, "Enter %d bytes of data (in hex):\n", data_number);
02528:  MOVLW  22
0252A:  MOVWF  FF6
0252C:  MOVLW  02
0252E:  MOVWF  FF7
02530:  MOVLW  00
02532:  MOVWF  FF8
02534:  MOVLW  06
02536:  MOVWF  xF5
02538:  MOVLB  0
0253A:  CALL   11FA
0253E:  MOVFF  2E6,2F5
02542:  MOVLW  18
02544:  MOVLB  2
02546:  MOVWF  xF6
02548:  MOVLB  0
0254A:  CALL   1336
0254E:  MOVLW  2A
02550:  MOVWF  FF6
02552:  MOVLW  02
02554:  MOVWF  FF7
02556:  MOVLW  00
02558:  MOVWF  FF8
0255A:  MOVLW  19
0255C:  MOVLB  2
0255E:  MOVWF  xF5
02560:  MOVLB  0
02562:  CALL   11FA
....................             for (i = 0; i < data_number; i++) {
02566:  MOVLB  2
02568:  CLRF   xE8
0256A:  MOVF   xE6,W
0256C:  SUBWF  xE8,W
0256E:  BC    25F6
....................                 fprintf(EXT, "Byte %d: 0x", i + 1);
02570:  MOVLW  01
02572:  ADDWF  xE8,W
02574:  MOVWF  xE9
02576:  MOVLW  44
02578:  MOVWF  FF6
0257A:  MOVLW  02
0257C:  MOVWF  FF7
0257E:  MOVLW  00
02580:  MOVWF  FF8
02582:  MOVLW  05
02584:  MOVWF  xF5
02586:  MOVLB  0
02588:  CALL   11FA
0258C:  MOVFF  2E9,2F5
02590:  MOVLW  18
02592:  MOVLB  2
02594:  MOVWF  xF6
02596:  MOVLB  0
02598:  CALL   1336
0259C:  MOVLW  4B
0259E:  MOVWF  FF6
025A0:  MOVLW  02
025A2:  MOVWF  FF7
025A4:  MOVLW  00
025A6:  MOVWF  FF8
025A8:  MOVLW  04
025AA:  MOVLB  2
025AC:  MOVWF  xF5
025AE:  MOVLB  0
025B0:  CALL   11FA
....................                 fscanf(EXT, "%x", &data[i]); // Read byte in hex format
025B4:  CLRF   03
025B6:  MOVLB  2
025B8:  MOVF   xE8,W
025BA:  ADDLW  E6
025BC:  MOVWF  01
025BE:  MOVLW  01
025C0:  ADDWFC 03,F
025C2:  MOVFF  01,2E9
025C6:  MOVFF  03,2EA
025CA:  CLRF   xEB
025CC:  CLRF   xEC
025CE:  MOVFF  03,2EE
025D2:  MOVFF  01,2ED
025D6:  CLRF   xF0
025D8:  CLRF   xEF
025DA:  MOVLB  0
025DC:  RCALL  23E2
025DE:  MOVF   01,F
025E0:  BNZ   25EA
025E2:  MOVLB  2
025E4:  CLRF   xEC
025E6:  BRA    25F2
025E8:  MOVLB  0
025EA:  MOVF   01,W
025EC:  MOVLB  2
025EE:  ADDWF  xEB,F
025F0:  INCF   xEC,F
025F2:  INCF   xE8,F
025F4:  BRA    256A
....................             }
.................... 
....................             // Call the function to write data to the address
....................             WRITE_DATA_NBYTES(address, data, data_number);
025F6:  MOVFF  1E5,2EC
025FA:  MOVFF  1E4,2EB
025FE:  MOVFF  1E3,2EA
02602:  MOVFF  1E2,2E9
02606:  MOVLW  01
02608:  MOVWF  xEE
0260A:  MOVLW  E6
0260C:  MOVWF  xED
0260E:  MOVFF  2E6,2EF
02612:  MOVLB  0
02614:  CALL   13F2
.................... 
....................             fprintf(EXT, "\nData successfully written.\n");
02618:  MOVLW  50
0261A:  MOVWF  FF6
0261C:  MOVLW  02
0261E:  MOVWF  FF7
02620:  MOVLW  00
02622:  MOVWF  FF8
02624:  CALL   0FD0
02628:  GOTO   2728 (RETURN)
.................... }
.................... 
.................... void handle_main_flash_memory() {
....................     char main_flash_option;
....................     unsigned int32 address;
....................     unsigned char data[32];
....................     unsigned char data_length;
.................... 
....................     fprintf(EXT, "MAIN flash memory chosen\n");
0262C:  MOVLW  6E
0262E:  MOVWF  FF6
02630:  MOVLW  02
02632:  MOVWF  FF7
02634:  MOVLW  00
02636:  MOVWF  FF8
02638:  CALL   0FD0
....................     fprintf(EXT, "press a: Read ID of the chip\n");
0263C:  MOVLW  88
0263E:  MOVWF  FF6
02640:  MOVLW  02
02642:  MOVWF  FF7
02644:  MOVLW  00
02646:  MOVWF  FF8
02648:  CALL   0FD0
....................     fprintf(EXT, "press b: Write data set in specified address\n");
0264C:  MOVLW  A6
0264E:  MOVWF  FF6
02650:  MOVLW  02
02652:  MOVWF  FF7
02654:  MOVLW  00
02656:  MOVWF  FF8
02658:  CALL   0FD0
....................     fprintf(EXT, "press c: Read data set in specified address\n");
0265C:  MOVLW  D4
0265E:  MOVWF  FF6
02660:  MOVLW  02
02662:  MOVWF  FF7
02664:  MOVLW  00
02666:  MOVWF  FF8
02668:  CALL   0FD0
....................     fprintf(EXT, "press x: Return to MAIN MENU\n");
0266C:  MOVLW  02
0266E:  MOVWF  FF6
02670:  MOVLW  03
02672:  MOVWF  FF7
02674:  MOVLW  00
02676:  MOVWF  FF8
02678:  CALL   0FD0
.................... 
....................     main_flash_option = fgetc(EXT);
0267C:  CALL   1DC8
02680:  MOVFF  01,1BC
.................... 
....................     switch (main_flash_option) {
02684:  MOVLB  1
02686:  MOVF   xBC,W
02688:  XORLW  61
0268A:  MOVLB  0
0268C:  BZ    269C
0268E:  XORLW  03
02690:  BZ    26B2
02692:  XORLW  01
02694:  BZ    26B6
02696:  XORLW  1B
02698:  BZ    2716
0269A:  BRA    2718
....................         case 'a':
....................             fprintf(EXT, "Started reading chip ID of MAIN flash memory\n");
0269C:  MOVLW  20
0269E:  MOVWF  FF6
026A0:  MOVLW  03
026A2:  MOVWF  FF7
026A4:  MOVLW  00
026A6:  MOVWF  FF8
026A8:  CALL   0FD0
....................             READ_CHIP_ID_OF();  // Replace with actual function
026AC:  CALL   1690
....................             break;
026B0:  BRA    2728
....................         case 'b':
....................             write_to_main_flash_menu();
026B2:  BRA    24B2
....................             break;
026B4:  BRA    2728
....................         case 'c':
....................             fprintf(EXT, "Read data set in specified address\n");
026B6:  MOVLW  4E
026B8:  MOVWF  FF6
026BA:  MOVLW  03
026BC:  MOVWF  FF7
026BE:  MOVLW  00
026C0:  MOVWF  FF8
026C2:  CALL   0FD0
....................             fprintf(EXT, "Enter your specified address: ");
026C6:  MOVLW  72
026C8:  MOVWF  FF6
026CA:  MOVLW  03
026CC:  MOVWF  FF7
026CE:  MOVLW  00
026D0:  MOVWF  FF8
026D2:  CALL   0FD0
....................             scanf("%x", &address);
026D6:  MOVLB  1
026D8:  CLRF   xE2
026DA:  CLRF   xE3
026DC:  MOVLW  01
026DE:  MOVLB  2
026E0:  MOVWF  xEC
026E2:  MOVLW  BD
026E4:  MOVWF  xEB
026E6:  CLRF   xEE
026E8:  CLRF   xED
026EA:  MOVLB  0
026EC:  RCALL  22D2
026EE:  MOVF   01,F
026F0:  BNZ   26FA
026F2:  MOVLB  1
026F4:  CLRF   xE3
026F6:  BRA    2702
026F8:  MOVLB  0
026FA:  MOVF   01,W
026FC:  MOVLB  1
026FE:  ADDWF  xE2,F
02700:  INCF   xE3,F
....................             fprintf(EXT, "Enter your specified address length : ");
02702:  MOVLW  92
02704:  MOVWF  FF6
02706:  MOVLW  03
02708:  MOVWF  FF7
0270A:  MOVLW  00
0270C:  MOVWF  FF8
0270E:  MOVLB  0
02710:  CALL   0FD0
.................... //            scanf("%d", &data_length);
.................... //            READ_DATA_NBYTES(address,data_length);  // Replace with actual function
....................             break;
02714:  BRA    2728
....................         case 'x':
....................             return;
02716:  BRA    2728
....................         default:
....................             fprintf(EXT, "Invalid MAIN flash memory option. Please try again.\n");
02718:  MOVLW  BA
0271A:  MOVWF  FF6
0271C:  MOVLW  03
0271E:  MOVWF  FF7
02720:  MOVLW  00
02722:  MOVWF  FF8
02724:  CALL   0FD0
....................             break;
....................     }
02728:  GOTO   2842 (RETURN)
.................... }
.................... 
.................... void handle_flash_memories() {
....................     char flash_option;
....................     fprintf(EXT, "pressed option d: Check Flash Memories\n\n");
0272C:  MOVLW  F0
0272E:  MOVWF  FF6
02730:  MOVLW  03
02732:  MOVWF  FF7
02734:  MOVLW  00
02736:  MOVWF  FF8
02738:  CALL   0FD0
....................     fprintf(EXT, "Please choose which flash memory to work on (a, b, c):\n");
0273C:  MOVLW  1A
0273E:  MOVWF  FF6
02740:  MOVLW  04
02742:  MOVWF  FF7
02744:  MOVLW  00
02746:  MOVWF  FF8
02748:  CALL   0FD0
....................     fprintf(EXT, "press a: MAIN flash memory\n");
0274C:  MOVLW  52
0274E:  MOVWF  FF6
02750:  MOVLW  04
02752:  MOVWF  FF7
02754:  MOVLW  00
02756:  MOVWF  FF8
02758:  CALL   0FD0
....................     fprintf(EXT, "press b: COM shared flash memory\n");
0275C:  MOVLW  6E
0275E:  MOVWF  FF6
02760:  MOVLW  04
02762:  MOVWF  FF7
02764:  MOVLW  00
02766:  MOVWF  FF8
02768:  CALL   0FD0
....................     fprintf(EXT, "press c: ADCS shared flash memory\n");
0276C:  MOVLW  90
0276E:  MOVWF  FF6
02770:  MOVLW  04
02772:  MOVWF  FF7
02774:  MOVLW  00
02776:  MOVWF  FF8
02778:  CALL   0FD0
....................     fprintf(EXT, "press d: OVCAM shared flash memory\n");
0277C:  MOVLW  B4
0277E:  MOVWF  FF6
02780:  MOVLW  04
02782:  MOVWF  FF7
02784:  MOVLW  00
02786:  MOVWF  FF8
02788:  CALL   0FD0
....................     fprintf(EXT, "press e: MVCAM shared flash memory\n");
0278C:  MOVLW  D8
0278E:  MOVWF  FF6
02790:  MOVLW  04
02792:  MOVWF  FF7
02794:  MOVLW  00
02796:  MOVWF  FF8
02798:  CALL   0FD0
....................     fprintf(EXT, "press x: Return to MAIN MENU\n");
0279C:  MOVLW  FC
0279E:  MOVWF  FF6
027A0:  MOVLW  04
027A2:  MOVWF  FF7
027A4:  MOVLW  00
027A6:  MOVWF  FF8
027A8:  CALL   0FD0
.................... 
....................     flash_option = fgetc(EXT);
027AC:  CALL   1DC8
027B0:  MOVFF  01,1BB
.................... 
....................     switch (flash_option) {
027B4:  MOVLB  1
027B6:  MOVF   xBB,W
027B8:  XORLW  61
027BA:  MOVLB  0
027BC:  BZ    27D4
027BE:  XORLW  03
027C0:  BZ    27E8
027C2:  XORLW  01
027C4:  BZ    27FA
027C6:  XORLW  07
027C8:  BZ    280C
027CA:  XORLW  01
027CC:  BZ    281E
027CE:  XORLW  1D
027D0:  BZ    2830
027D2:  BRA    2832
....................         case 'a':
....................             fprintf(EXT, "MAIN shared flash memory chosen\n");
027D4:  MOVLW  1A
027D6:  MOVWF  FF6
027D8:  MOVLW  05
027DA:  MOVWF  FF7
027DC:  MOVLW  00
027DE:  MOVWF  FF8
027E0:  CALL   0FD0
....................             handle_main_flash_memory();
027E4:  BRA    262C
....................             break;
027E6:  BRA    2842
....................         case 'b':
....................             fprintf(EXT, "COM shared flash memory chosen\n");
027E8:  MOVLW  3C
027EA:  MOVWF  FF6
027EC:  MOVLW  05
027EE:  MOVWF  FF7
027F0:  MOVLW  00
027F2:  MOVWF  FF8
027F4:  CALL   0FD0
....................             // Implement COM shared flash memory handling
....................             break;
027F8:  BRA    2842
....................         case 'c':
....................             fprintf(EXT, "ADCS shared flash memory chosen\n");
027FA:  MOVLW  5C
027FC:  MOVWF  FF6
027FE:  MOVLW  05
02800:  MOVWF  FF7
02802:  MOVLW  00
02804:  MOVWF  FF8
02806:  CALL   0FD0
....................             // Implement ADCS shared flash memory handling
....................             break;
0280A:  BRA    2842
....................          case 'd':
....................             fprintf(EXT, "OVCAM shared flash memory chosen\n");
0280C:  MOVLW  7E
0280E:  MOVWF  FF6
02810:  MOVLW  05
02812:  MOVWF  FF7
02814:  MOVLW  00
02816:  MOVWF  FF8
02818:  CALL   0FD0
....................             // Implement ADCS shared flash memory handling
....................             break;
0281C:  BRA    2842
....................          case 'e':
....................             fprintf(EXT, "MVCAM shared flash memory chosen\n");
0281E:  MOVLW  A0
02820:  MOVWF  FF6
02822:  MOVLW  05
02824:  MOVWF  FF7
02826:  MOVLW  00
02828:  MOVWF  FF8
0282A:  CALL   0FD0
....................             // Implement ADCS shared flash memory handling
....................             break;
0282E:  BRA    2842
....................          case'x':
....................              break;
02830:  BRA    2842
....................         default:
....................             fprintf(EXT, "Invalid flash memory option. Please try again.\n");
02832:  MOVLW  C2
02834:  MOVWF  FF6
02836:  MOVLW  05
02838:  MOVWF  FF7
0283A:  MOVLW  00
0283C:  MOVWF  FF8
0283E:  CALL   0FD0
....................             break;
....................     }
02842:  GOTO   2E58 (RETURN)
.................... }
.................... 
.................... 
.................... void handle_set_time() {
....................     char handle_set_time_option;
....................     fprintf(EXT, "Settings of RTC chosen\n");
*
0286A:  MOVLW  F2
0286C:  MOVWF  FF6
0286E:  MOVLW  05
02870:  MOVWF  FF7
02872:  MOVLW  00
02874:  MOVWF  FF8
02876:  CALL   0FD0
....................     fprintf(EXT, "    press a: to reset the RTC /all current time will be set zero/\n");
0287A:  MOVLW  0A
0287C:  MOVWF  FF6
0287E:  MOVLW  06
02880:  MOVWF  FF7
02882:  MOVLW  00
02884:  MOVWF  FF8
02886:  CALL   0FD0
....................     fprintf(EXT, "    press b: display current time\n");
0288A:  MOVLW  4E
0288C:  MOVWF  FF6
0288E:  MOVLW  06
02890:  MOVWF  FF7
02892:  MOVLW  00
02894:  MOVWF  FF8
02896:  CALL   0FD0
....................     handle_set_time_option = fgetc(EXT);
0289A:  CALL   1DC8
0289E:  MOVFF  01,1BB
.................... 
....................     switch (handle_set_time_option) {
028A2:  MOVLB  1
028A4:  MOVF   xBB,W
028A6:  XORLW  61
028A8:  MOVLB  0
028AA:  BZ    28BA
028AC:  XORLW  03
028AE:  BTFSC  FD8.2
028B0:  BRA    2B02
028B2:  XORLW  1A
028B4:  BTFSC  FD8.2
028B6:  BRA    2BEA
028B8:  BRA    2BEE
....................         case 'a':
....................     rtc_time_t write_clock, read_clock;
....................     rtc_read(&read_clock);
028BA:  MOVLB  F
028BC:  BSF    x5F.0
028BE:  BSF    x5F.1
028C0:  MOVLW  01
028C2:  MOVWF  FEA
028C4:  MOVLW  C5
028C6:  MOVWF  FE9
028C8:  MOVLW  04
028CA:  MOVWF  01
028CC:  MOVF   x5C,W
028CE:  MOVLB  0
028D0:  CALL   106A
028D4:  MOVWF  FEE
028D6:  MOVLB  F
028D8:  MOVF   x5D,W
028DA:  MOVLB  0
028DC:  CALL   106A
028E0:  MOVWF  FEE
028E2:  DECFSZ 01,F
028E4:  BRA    28E8
028E6:  BRA    28EC
028E8:  MOVLB  F
028EA:  BRA    28CC
....................     fprintf(EXT, "Now time is\n");
028EC:  MOVLW  72
028EE:  MOVWF  FF6
028F0:  MOVLW  06
028F2:  MOVWF  FF7
028F4:  MOVLW  00
028F6:  MOVWF  FF8
028F8:  CALL   0FD0
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
028FC:  MOVLW  0D
028FE:  MOVLB  2
02900:  MOVWF  xFB
02902:  MOVLB  0
02904:  CALL   0F8A
02908:  MOVFF  1C8,1CE
0290C:  MOVLW  01
0290E:  MOVLB  1
02910:  MOVWF  xCF
02912:  MOVLB  0
02914:  CALL   1256
02918:  MOVLW  2F
0291A:  MOVLB  2
0291C:  MOVWF  xFB
0291E:  MOVLB  0
02920:  CALL   0F8A
02924:  MOVFF  1C7,1CE
02928:  MOVLW  01
0292A:  MOVLB  1
0292C:  MOVWF  xCF
0292E:  MOVLB  0
02930:  CALL   1256
02934:  MOVLW  8A
02936:  MOVWF  FF6
02938:  MOVLW  06
0293A:  MOVWF  FF7
0293C:  MOVLW  00
0293E:  MOVWF  FF8
02940:  MOVLW  03
02942:  MOVLB  2
02944:  MOVWF  xF5
02946:  MOVLB  0
02948:  CALL   11FA
0294C:  MOVFF  1C5,1CE
02950:  MOVLW  01
02952:  MOVLB  1
02954:  MOVWF  xCF
02956:  MOVLB  0
02958:  CALL   1256
0295C:  MOVLW  20
0295E:  MOVLB  2
02960:  MOVWF  xFB
02962:  MOVLB  0
02964:  CALL   0F8A
02968:  MOVFF  1C9,1CE
0296C:  MOVLW  01
0296E:  MOVLB  1
02970:  MOVWF  xCF
02972:  MOVLB  0
02974:  CALL   1256
02978:  MOVLW  3A
0297A:  MOVLB  2
0297C:  MOVWF  xFB
0297E:  MOVLB  0
02980:  CALL   0F8A
02984:  MOVFF  1CC,1CE
02988:  MOVLW  01
0298A:  MOVLB  1
0298C:  MOVWF  xCF
0298E:  MOVLB  0
02990:  CALL   1256
02994:  MOVLW  3A
02996:  MOVLB  2
02998:  MOVWF  xFB
0299A:  MOVLB  0
0299C:  CALL   0F8A
029A0:  MOVFF  1CB,1CE
029A4:  MOVLW  01
029A6:  MOVLB  1
029A8:  MOVWF  xCF
029AA:  MOVLB  0
029AC:  CALL   1256
....................     fprintf(EXT, "Time changing function activated\n");
029B0:  MOVLW  A2
029B2:  MOVWF  FF6
029B4:  MOVLW  06
029B6:  MOVWF  FF7
029B8:  MOVLW  00
029BA:  MOVWF  FF8
029BC:  CALL   0FD0
....................     set_clock(write_clock);
....................     rtc_write(&write_clock);
*
029D2:  MOVLB  F
029D4:  MOVLW  55
029D6:  MOVWF  F7E
029D8:  MOVLW  AA
029DA:  MOVWF  F7E
029DC:  BSF    x5F.5
029DE:  BSF    x5F.0
029E0:  BSF    x5F.1
029E2:  MOVLW  01
029E4:  MOVWF  FEA
029E6:  MOVLW  BC
029E8:  MOVWF  FE9
029EA:  MOVLW  04
029EC:  MOVWF  01
029EE:  MOVF   FEE,W
029F0:  MOVLB  0
029F2:  RCALL  2846
029F4:  MOVLB  F
029F6:  MOVWF  x5C
029F8:  MOVF   FEE,W
029FA:  MOVLB  0
029FC:  RCALL  2846
029FE:  MOVLB  F
02A00:  MOVWF  x5D
02A02:  DECFSZ 01,F
02A04:  BRA    29EE
02A06:  BCF    x5F.5
....................     fprintf(EXT, "Time successfully changed. Current time is:\n");
02A08:  MOVLW  C4
02A0A:  MOVWF  FF6
02A0C:  MOVLW  06
02A0E:  MOVWF  FF7
02A10:  MOVLW  00
02A12:  MOVWF  FF8
02A14:  MOVLB  0
02A16:  CALL   0FD0
....................     rtc_read(&read_clock);
02A1A:  MOVLB  F
02A1C:  BSF    x5F.0
02A1E:  BSF    x5F.1
02A20:  MOVLW  01
02A22:  MOVWF  FEA
02A24:  MOVLW  C5
02A26:  MOVWF  FE9
02A28:  MOVLW  04
02A2A:  MOVWF  01
02A2C:  MOVF   x5C,W
02A2E:  MOVLB  0
02A30:  CALL   106A
02A34:  MOVWF  FEE
02A36:  MOVLB  F
02A38:  MOVF   x5D,W
02A3A:  MOVLB  0
02A3C:  CALL   106A
02A40:  MOVWF  FEE
02A42:  DECFSZ 01,F
02A44:  BRA    2A48
02A46:  BRA    2A4C
02A48:  MOVLB  F
02A4A:  BRA    2A2C
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
02A4C:  MOVLW  0D
02A4E:  MOVLB  2
02A50:  MOVWF  xFB
02A52:  MOVLB  0
02A54:  CALL   0F8A
02A58:  MOVFF  1C8,1CE
02A5C:  MOVLW  01
02A5E:  MOVLB  1
02A60:  MOVWF  xCF
02A62:  MOVLB  0
02A64:  CALL   1256
02A68:  MOVLW  2F
02A6A:  MOVLB  2
02A6C:  MOVWF  xFB
02A6E:  MOVLB  0
02A70:  CALL   0F8A
02A74:  MOVFF  1C7,1CE
02A78:  MOVLW  01
02A7A:  MOVLB  1
02A7C:  MOVWF  xCF
02A7E:  MOVLB  0
02A80:  CALL   1256
02A84:  MOVLW  FC
02A86:  MOVWF  FF6
02A88:  MOVLW  06
02A8A:  MOVWF  FF7
02A8C:  MOVLW  00
02A8E:  MOVWF  FF8
02A90:  MOVLW  03
02A92:  MOVLB  2
02A94:  MOVWF  xF5
02A96:  MOVLB  0
02A98:  CALL   11FA
02A9C:  MOVFF  1C5,1CE
02AA0:  MOVLW  01
02AA2:  MOVLB  1
02AA4:  MOVWF  xCF
02AA6:  MOVLB  0
02AA8:  CALL   1256
02AAC:  MOVLW  20
02AAE:  MOVLB  2
02AB0:  MOVWF  xFB
02AB2:  MOVLB  0
02AB4:  CALL   0F8A
02AB8:  MOVFF  1C9,1CE
02ABC:  MOVLW  01
02ABE:  MOVLB  1
02AC0:  MOVWF  xCF
02AC2:  MOVLB  0
02AC4:  CALL   1256
02AC8:  MOVLW  3A
02ACA:  MOVLB  2
02ACC:  MOVWF  xFB
02ACE:  MOVLB  0
02AD0:  CALL   0F8A
02AD4:  MOVFF  1CC,1CE
02AD8:  MOVLW  01
02ADA:  MOVLB  1
02ADC:  MOVWF  xCF
02ADE:  MOVLB  0
02AE0:  CALL   1256
02AE4:  MOVLW  3A
02AE6:  MOVLB  2
02AE8:  MOVWF  xFB
02AEA:  MOVLB  0
02AEC:  CALL   0F8A
02AF0:  MOVFF  1CB,1CE
02AF4:  MOVLW  01
02AF6:  MOVLB  1
02AF8:  MOVWF  xCF
02AFA:  MOVLB  0
02AFC:  CALL   1256
....................     break;
02B00:  BRA    2BFE
....................         case 'b':
....................             rtc_read(&read_clock);
02B02:  MOVLB  F
02B04:  BSF    x5F.0
02B06:  BSF    x5F.1
02B08:  MOVLW  01
02B0A:  MOVWF  FEA
02B0C:  MOVLW  C5
02B0E:  MOVWF  FE9
02B10:  MOVLW  04
02B12:  MOVWF  01
02B14:  MOVF   x5C,W
02B16:  MOVLB  0
02B18:  CALL   106A
02B1C:  MOVWF  FEE
02B1E:  MOVLB  F
02B20:  MOVF   x5D,W
02B22:  MOVLB  0
02B24:  CALL   106A
02B28:  MOVWF  FEE
02B2A:  DECFSZ 01,F
02B2C:  BRA    2B30
02B2E:  BRA    2B34
02B30:  MOVLB  F
02B32:  BRA    2B14
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
02B34:  MOVLW  0D
02B36:  MOVLB  2
02B38:  MOVWF  xFB
02B3A:  MOVLB  0
02B3C:  CALL   0F8A
02B40:  MOVFF  1C8,1CE
02B44:  MOVLW  01
02B46:  MOVLB  1
02B48:  MOVWF  xCF
02B4A:  MOVLB  0
02B4C:  CALL   1256
02B50:  MOVLW  2F
02B52:  MOVLB  2
02B54:  MOVWF  xFB
02B56:  MOVLB  0
02B58:  CALL   0F8A
02B5C:  MOVFF  1C7,1CE
02B60:  MOVLW  01
02B62:  MOVLB  1
02B64:  MOVWF  xCF
02B66:  MOVLB  0
02B68:  CALL   1256
02B6C:  MOVLW  1E
02B6E:  MOVWF  FF6
02B70:  MOVLW  07
02B72:  MOVWF  FF7
02B74:  MOVLW  00
02B76:  MOVWF  FF8
02B78:  MOVLW  03
02B7A:  MOVLB  2
02B7C:  MOVWF  xF5
02B7E:  MOVLB  0
02B80:  CALL   11FA
02B84:  MOVFF  1C5,1CE
02B88:  MOVLW  01
02B8A:  MOVLB  1
02B8C:  MOVWF  xCF
02B8E:  MOVLB  0
02B90:  CALL   1256
02B94:  MOVLW  20
02B96:  MOVLB  2
02B98:  MOVWF  xFB
02B9A:  MOVLB  0
02B9C:  CALL   0F8A
02BA0:  MOVFF  1C9,1CE
02BA4:  MOVLW  01
02BA6:  MOVLB  1
02BA8:  MOVWF  xCF
02BAA:  MOVLB  0
02BAC:  CALL   1256
02BB0:  MOVLW  3A
02BB2:  MOVLB  2
02BB4:  MOVWF  xFB
02BB6:  MOVLB  0
02BB8:  CALL   0F8A
02BBC:  MOVFF  1CC,1CE
02BC0:  MOVLW  01
02BC2:  MOVLB  1
02BC4:  MOVWF  xCF
02BC6:  MOVLB  0
02BC8:  CALL   1256
02BCC:  MOVLW  3A
02BCE:  MOVLB  2
02BD0:  MOVWF  xFB
02BD2:  MOVLB  0
02BD4:  CALL   0F8A
02BD8:  MOVFF  1CB,1CE
02BDC:  MOVLW  01
02BDE:  MOVLB  1
02BE0:  MOVWF  xCF
02BE2:  MOVLB  0
02BE4:  CALL   1256
....................     break;
02BE8:  BRA    2BFE
....................         case 'x':
....................             break;
02BEA:  BRA    2BFE
....................             return;
02BEC:  BRA    2BFE
....................         default:
....................             fprintf(EXT, "Invalid IO option. Please try again.\n");
02BEE:  MOVLW  36
02BF0:  MOVWF  FF6
02BF2:  MOVLW  07
02BF4:  MOVWF  FF7
02BF6:  MOVLW  00
02BF8:  MOVWF  FF8
02BFA:  CALL   0FD0
....................     break;
....................             
.................... }
02BFE:  GOTO   2E58 (RETURN)
.................... }
.................... 
.................... void handle_io_control() {
....................     char io_option;
....................     int8 state_of_pin;
.................... 
....................     fprintf(EXT, "IO control chosen\n");
*
01E12:  MOVLW  5C
01E14:  MOVWF  FF6
01E16:  MOVLW  07
01E18:  MOVWF  FF7
01E1A:  MOVLW  00
01E1C:  MOVWF  FF8
01E1E:  CALL   0FD0
.................... 
....................     // Check and display the state of each pin before providing options
....................     state_of_pin = input_state(EN_SUP_3V3_1);
01E22:  MOVLB  1
01E24:  CLRF   xBC
01E26:  BTFSC  F81.0
01E28:  INCF   xBC,F
....................     fprintf(EXT, "    press a: Toggle EN_SUP_3V3_1 /is currently/");
01E2A:  MOVLW  70
01E2C:  MOVWF  FF6
01E2E:  MOVLW  07
01E30:  MOVWF  FF7
01E32:  MOVLW  00
01E34:  MOVWF  FF8
01E36:  MOVLB  0
01E38:  CALL   0FD0
....................     if(state_of_pin == 1 ){
01E3C:  MOVLB  1
01E3E:  DECFSZ xBC,W
01E40:  BRA    1E58
....................         fprintf(EXT, "HIGH\n");
01E42:  MOVLW  A0
01E44:  MOVWF  FF6
01E46:  MOVLW  07
01E48:  MOVWF  FF7
01E4A:  MOVLW  00
01E4C:  MOVWF  FF8
01E4E:  MOVLB  0
01E50:  CALL   0FD0
....................     }else if(state_of_pin == 0){
01E54:  BRA    1E84
01E56:  MOVLB  1
01E58:  MOVF   xBC,F
01E5A:  BNZ   1E72
....................         fprintf(EXT, "LOW\n");
01E5C:  MOVLW  A6
01E5E:  MOVWF  FF6
01E60:  MOVLW  07
01E62:  MOVWF  FF7
01E64:  MOVLW  00
01E66:  MOVWF  FF8
01E68:  MOVLB  0
01E6A:  CALL   0FD0
....................     }else {
01E6E:  BRA    1E84
01E70:  MOVLB  1
....................         fprintf(EXT, "Invalid\n"); 
01E72:  MOVLW  AC
01E74:  MOVWF  FF6
01E76:  MOVLW  07
01E78:  MOVWF  FF7
01E7A:  MOVLW  00
01E7C:  MOVWF  FF8
01E7E:  MOVLB  0
01E80:  CALL   0FD0
....................     }
....................     state_of_pin = input_state(EN_SUP_3V3_2);
01E84:  MOVLB  1
01E86:  CLRF   xBC
01E88:  BTFSC  F86.1
01E8A:  INCF   xBC,F
....................     fprintf(EXT, "    press b: Toggle EN_SUP_3V3_2 /is currently/");
01E8C:  MOVLW  B6
01E8E:  MOVWF  FF6
01E90:  MOVLW  07
01E92:  MOVWF  FF7
01E94:  MOVLW  00
01E96:  MOVWF  FF8
01E98:  MOVLB  0
01E9A:  CALL   0FD0
....................     if(state_of_pin == 1 ){
01E9E:  MOVLB  1
01EA0:  DECFSZ xBC,W
01EA2:  BRA    1EBA
....................         fprintf(EXT, "HIGH\n");
01EA4:  MOVLW  E6
01EA6:  MOVWF  FF6
01EA8:  MOVLW  07
01EAA:  MOVWF  FF7
01EAC:  MOVLW  00
01EAE:  MOVWF  FF8
01EB0:  MOVLB  0
01EB2:  CALL   0FD0
....................     }else if(state_of_pin == 0){
01EB6:  BRA    1EE6
01EB8:  MOVLB  1
01EBA:  MOVF   xBC,F
01EBC:  BNZ   1ED4
....................         fprintf(EXT, "LOW\n");
01EBE:  MOVLW  EC
01EC0:  MOVWF  FF6
01EC2:  MOVLW  07
01EC4:  MOVWF  FF7
01EC6:  MOVLW  00
01EC8:  MOVWF  FF8
01ECA:  MOVLB  0
01ECC:  CALL   0FD0
....................     }else {
01ED0:  BRA    1EE6
01ED2:  MOVLB  1
....................         fprintf(EXT, "Invalid\n"); 
01ED4:  MOVLW  F2
01ED6:  MOVWF  FF6
01ED8:  MOVLW  07
01EDA:  MOVWF  FF7
01EDC:  MOVLW  00
01EDE:  MOVWF  FF8
01EE0:  MOVLB  0
01EE2:  CALL   0FD0
....................     }
....................      state_of_pin = input_state(EN_SUP_3V3_DAQ);
01EE6:  MOVLB  1
01EE8:  CLRF   xBC
01EEA:  BTFSC  F83.0
01EEC:  INCF   xBC,F
....................     fprintf(EXT, "    press c: Toggle EN_SUP_3V3_DAQ /is currently/");
01EEE:  MOVLW  FC
01EF0:  MOVWF  FF6
01EF2:  MOVLW  07
01EF4:  MOVWF  FF7
01EF6:  MOVLW  00
01EF8:  MOVWF  FF8
01EFA:  MOVLB  0
01EFC:  CALL   0FD0
....................     if(state_of_pin == 1 ){
01F00:  MOVLB  1
01F02:  DECFSZ xBC,W
01F04:  BRA    1F1C
....................         fprintf(EXT, "HIGH\n");
01F06:  MOVLW  2E
01F08:  MOVWF  FF6
01F0A:  MOVLW  08
01F0C:  MOVWF  FF7
01F0E:  MOVLW  00
01F10:  MOVWF  FF8
01F12:  MOVLB  0
01F14:  CALL   0FD0
....................     }else if(state_of_pin == 0){
01F18:  BRA    1F48
01F1A:  MOVLB  1
01F1C:  MOVF   xBC,F
01F1E:  BNZ   1F36
....................         fprintf(EXT, "LOW\n");
01F20:  MOVLW  34
01F22:  MOVWF  FF6
01F24:  MOVLW  08
01F26:  MOVWF  FF7
01F28:  MOVLW  00
01F2A:  MOVWF  FF8
01F2C:  MOVLB  0
01F2E:  CALL   0FD0
....................     }else {
01F32:  BRA    1F48
01F34:  MOVLB  1
....................         fprintf(EXT, "Invalid\n"); 
01F36:  MOVLW  3A
01F38:  MOVWF  FF6
01F3A:  MOVLW  08
01F3C:  MOVWF  FF7
01F3E:  MOVLW  00
01F40:  MOVWF  FF8
01F42:  MOVLB  0
01F44:  CALL   0FD0
....................     }
....................     state_of_pin = input_state(EN_SUP_UNREG);
01F48:  MOVLB  1
01F4A:  CLRF   xBC
01F4C:  BTFSC  F81.1
01F4E:  INCF   xBC,F
....................     fprintf(EXT, "    press d: Toggle EN_SUP_UNREG /is currently/");
01F50:  MOVLW  44
01F52:  MOVWF  FF6
01F54:  MOVLW  08
01F56:  MOVWF  FF7
01F58:  MOVLW  00
01F5A:  MOVWF  FF8
01F5C:  MOVLB  0
01F5E:  CALL   0FD0
....................     if(state_of_pin == 1 ){
01F62:  MOVLB  1
01F64:  DECFSZ xBC,W
01F66:  BRA    1F7E
....................         fprintf(EXT, "HIGH\n");
01F68:  MOVLW  74
01F6A:  MOVWF  FF6
01F6C:  MOVLW  08
01F6E:  MOVWF  FF7
01F70:  MOVLW  00
01F72:  MOVWF  FF8
01F74:  MOVLB  0
01F76:  CALL   0FD0
....................     }else if(state_of_pin == 0){
01F7A:  BRA    1FAA
01F7C:  MOVLB  1
01F7E:  MOVF   xBC,F
01F80:  BNZ   1F98
....................         fprintf(EXT, "LOW\n");
01F82:  MOVLW  7A
01F84:  MOVWF  FF6
01F86:  MOVLW  08
01F88:  MOVWF  FF7
01F8A:  MOVLW  00
01F8C:  MOVWF  FF8
01F8E:  MOVLB  0
01F90:  CALL   0FD0
....................     }else {
01F94:  BRA    1FAA
01F96:  MOVLB  1
....................         fprintf(EXT, "Invalid\n"); 
01F98:  MOVLW  80
01F9A:  MOVWF  FF6
01F9C:  MOVLW  08
01F9E:  MOVWF  FF7
01FA0:  MOVLW  00
01FA2:  MOVWF  FF8
01FA4:  MOVLB  0
01FA6:  CALL   0FD0
....................     }
....................     state_of_pin = input_state(EN_SUP_5V0);
01FAA:  MOVLB  1
01FAC:  CLRF   xBC
01FAE:  BTFSC  F83.1
01FB0:  INCF   xBC,F
....................     fprintf(EXT, "    press e: Toggle EN_SUP_5V0 /is currently/");
01FB2:  MOVLW  8A
01FB4:  MOVWF  FF6
01FB6:  MOVLW  08
01FB8:  MOVWF  FF7
01FBA:  MOVLW  00
01FBC:  MOVWF  FF8
01FBE:  MOVLB  0
01FC0:  CALL   0FD0
....................     if(state_of_pin == 1 ){
01FC4:  MOVLB  1
01FC6:  DECFSZ xBC,W
01FC8:  BRA    1FE0
....................         fprintf(EXT, "HIGH\n");
01FCA:  MOVLW  B8
01FCC:  MOVWF  FF6
01FCE:  MOVLW  08
01FD0:  MOVWF  FF7
01FD2:  MOVLW  00
01FD4:  MOVWF  FF8
01FD6:  MOVLB  0
01FD8:  CALL   0FD0
....................     }else if(state_of_pin == 0){
01FDC:  BRA    200C
01FDE:  MOVLB  1
01FE0:  MOVF   xBC,F
01FE2:  BNZ   1FFA
....................         fprintf(EXT, "LOW\n");
01FE4:  MOVLW  BE
01FE6:  MOVWF  FF6
01FE8:  MOVLW  08
01FEA:  MOVWF  FF7
01FEC:  MOVLW  00
01FEE:  MOVWF  FF8
01FF0:  MOVLB  0
01FF2:  CALL   0FD0
....................     }else {
01FF6:  BRA    200C
01FF8:  MOVLB  1
....................         fprintf(EXT, "Invalid\n"); 
01FFA:  MOVLW  C4
01FFC:  MOVWF  FF6
01FFE:  MOVLW  08
02000:  MOVWF  FF7
02002:  MOVLW  00
02004:  MOVWF  FF8
02006:  MOVLB  0
02008:  CALL   0FD0
....................     }
....................     state_of_pin = input_state(KILL_SWITCH);
0200C:  MOVLB  1
0200E:  CLRF   xBC
02010:  BTFSC  F80.4
02012:  INCF   xBC,F
....................     fprintf(EXT, "    press f: Toggle KILL_SWITCH /is currently/");
02014:  MOVLW  CE
02016:  MOVWF  FF6
02018:  MOVLW  08
0201A:  MOVWF  FF7
0201C:  MOVLW  00
0201E:  MOVWF  FF8
02020:  MOVLB  0
02022:  CALL   0FD0
....................     if(state_of_pin == 1 ){
02026:  MOVLB  1
02028:  DECFSZ xBC,W
0202A:  BRA    2042
....................         fprintf(EXT, "HIGH\n");
0202C:  MOVLW  FE
0202E:  MOVWF  FF6
02030:  MOVLW  08
02032:  MOVWF  FF7
02034:  MOVLW  00
02036:  MOVWF  FF8
02038:  MOVLB  0
0203A:  CALL   0FD0
....................     }else if(state_of_pin == 0){
0203E:  BRA    206E
02040:  MOVLB  1
02042:  MOVF   xBC,F
02044:  BNZ   205C
....................         fprintf(EXT, "LOW\n");
02046:  MOVLW  04
02048:  MOVWF  FF6
0204A:  MOVLW  09
0204C:  MOVWF  FF7
0204E:  MOVLW  00
02050:  MOVWF  FF8
02052:  MOVLB  0
02054:  CALL   0FD0
....................     }else {
02058:  BRA    206E
0205A:  MOVLB  1
....................         fprintf(EXT, "Invalid\n"); 
0205C:  MOVLW  0A
0205E:  MOVWF  FF6
02060:  MOVLW  09
02062:  MOVWF  FF7
02064:  MOVLW  00
02066:  MOVWF  FF8
02068:  MOVLB  0
0206A:  CALL   0FD0
....................     }
....................         state_of_pin = input_state(MVCAM_PWR);
0206E:  MOVLB  1
02070:  CLRF   xBC
02072:  BTFSC  F86.0
02074:  INCF   xBC,F
....................     fprintf(EXT, "    press g: Toggle MVCAM_PWR /is currently/");
02076:  MOVLW  14
02078:  MOVWF  FF6
0207A:  MOVLW  09
0207C:  MOVWF  FF7
0207E:  MOVLW  00
02080:  MOVWF  FF8
02082:  MOVLB  0
02084:  CALL   0FD0
....................     if(state_of_pin == 1 ){
02088:  MOVLB  1
0208A:  DECFSZ xBC,W
0208C:  BRA    20A4
....................         fprintf(EXT, "HIGH\n");
0208E:  MOVLW  42
02090:  MOVWF  FF6
02092:  MOVLW  09
02094:  MOVWF  FF7
02096:  MOVLW  00
02098:  MOVWF  FF8
0209A:  MOVLB  0
0209C:  CALL   0FD0
....................     }else if(state_of_pin == 0){
020A0:  BRA    20D0
020A2:  MOVLB  1
020A4:  MOVF   xBC,F
020A6:  BNZ   20BE
....................         fprintf(EXT, "LOW\n");
020A8:  MOVLW  48
020AA:  MOVWF  FF6
020AC:  MOVLW  09
020AE:  MOVWF  FF7
020B0:  MOVLW  00
020B2:  MOVWF  FF8
020B4:  MOVLB  0
020B6:  CALL   0FD0
....................     }else {
020BA:  BRA    20D0
020BC:  MOVLB  1
....................         fprintf(EXT, "Invalid\n"); 
020BE:  MOVLW  4E
020C0:  MOVWF  FF6
020C2:  MOVLW  09
020C4:  MOVWF  FF7
020C6:  MOVLW  00
020C8:  MOVWF  FF8
020CA:  MOVLB  0
020CC:  CALL   0FD0
....................     }
....................         state_of_pin = input_state(OVCAM_PWR);
020D0:  MOVLB  1
020D2:  CLRF   xBC
020D4:  BTFSC  F83.7
020D6:  INCF   xBC,F
....................     fprintf(EXT, "    press h: Toggle OVCAM_PWR /is currently/");
020D8:  MOVLW  58
020DA:  MOVWF  FF6
020DC:  MOVLW  09
020DE:  MOVWF  FF7
020E0:  MOVLW  00
020E2:  MOVWF  FF8
020E4:  MOVLB  0
020E6:  CALL   0FD0
....................     if(state_of_pin == 1 ){
020EA:  MOVLB  1
020EC:  DECFSZ xBC,W
020EE:  BRA    2106
....................         fprintf(EXT, "HIGH\n");
020F0:  MOVLW  86
020F2:  MOVWF  FF6
020F4:  MOVLW  09
020F6:  MOVWF  FF7
020F8:  MOVLW  00
020FA:  MOVWF  FF8
020FC:  MOVLB  0
020FE:  CALL   0FD0
....................     }else if(state_of_pin == 0){
02102:  BRA    2132
02104:  MOVLB  1
02106:  MOVF   xBC,F
02108:  BNZ   2120
....................         fprintf(EXT, "LOW\n");
0210A:  MOVLW  8C
0210C:  MOVWF  FF6
0210E:  MOVLW  09
02110:  MOVWF  FF7
02112:  MOVLW  00
02114:  MOVWF  FF8
02116:  MOVLB  0
02118:  CALL   0FD0
....................     }else {
0211C:  BRA    2132
0211E:  MOVLB  1
....................         fprintf(EXT, "Invalid\n"); 
02120:  MOVLW  92
02122:  MOVWF  FF6
02124:  MOVLW  09
02126:  MOVWF  FF7
02128:  MOVLW  00
0212A:  MOVWF  FF8
0212C:  MOVLB  0
0212E:  CALL   0FD0
....................     }
....................         state_of_pin = input_state(ADCS_PWR);
02132:  MOVLB  1
02134:  CLRF   xBC
02136:  BTFSC  F83.6
02138:  INCF   xBC,F
....................     fprintf(EXT, "    press i: Toggle ADCS_PWR /is currently/");
0213A:  MOVLW  9C
0213C:  MOVWF  FF6
0213E:  MOVLW  09
02140:  MOVWF  FF7
02142:  MOVLW  00
02144:  MOVWF  FF8
02146:  MOVLB  0
02148:  CALL   0FD0
....................     if(state_of_pin == 1 ){
0214C:  MOVLB  1
0214E:  DECFSZ xBC,W
02150:  BRA    2168
....................         fprintf(EXT, "HIGH\n");
02152:  MOVLW  C8
02154:  MOVWF  FF6
02156:  MOVLW  09
02158:  MOVWF  FF7
0215A:  MOVLW  00
0215C:  MOVWF  FF8
0215E:  MOVLB  0
02160:  CALL   0FD0
....................     }else if(state_of_pin == 0){
02164:  BRA    2194
02166:  MOVLB  1
02168:  MOVF   xBC,F
0216A:  BNZ   2182
....................         fprintf(EXT, "LOW\n");
0216C:  MOVLW  CE
0216E:  MOVWF  FF6
02170:  MOVLW  09
02172:  MOVWF  FF7
02174:  MOVLW  00
02176:  MOVWF  FF8
02178:  MOVLB  0
0217A:  CALL   0FD0
....................     }else {
0217E:  BRA    2194
02180:  MOVLB  1
....................         fprintf(EXT, "Invalid\n"); 
02182:  MOVLW  D4
02184:  MOVWF  FF6
02186:  MOVLW  09
02188:  MOVWF  FF7
0218A:  MOVLW  00
0218C:  MOVWF  FF8
0218E:  MOVLB  0
02190:  CALL   0FD0
....................     }
....................     fprintf(EXT, "    press j: Toggle all Pins");
02194:  MOVLW  DE
02196:  MOVWF  FF6
02198:  MOVLW  09
0219A:  MOVWF  FF7
0219C:  MOVLW  00
0219E:  MOVWF  FF8
021A0:  CALL   0FD0
....................     
.................... 
....................     io_option = fgetc(EXT);
021A4:  RCALL  1DC8
021A6:  MOVFF  01,1BB
.................... 
....................     switch (io_option) {
021AA:  MOVLB  1
021AC:  MOVF   xBB,W
021AE:  XORLW  61
021B0:  MOVLB  0
021B2:  BZ    21DE
021B4:  XORLW  03
021B6:  BZ    21E4
021B8:  XORLW  01
021BA:  BZ    21EA
021BC:  XORLW  07
021BE:  BZ    21F0
021C0:  XORLW  01
021C2:  BZ    21F6
021C4:  XORLW  03
021C6:  BZ    21FC
021C8:  XORLW  01
021CA:  BZ    2202
021CC:  XORLW  0F
021CE:  BZ    2208
021D0:  XORLW  01
021D2:  BZ    220E
021D4:  XORLW  03
021D6:  BZ    2214
021D8:  XORLW  12
021DA:  BZ    2236
021DC:  BRA    223A
....................         case 'a':
....................             output_toggle(EN_SUP_3V3_1);
021DE:  BCF    F93.0
021E0:  BTG    F8A.0
....................             break;
021E2:  BRA    224A
....................         case 'b':
....................             output_toggle(EN_SUP_3V3_2);
021E4:  BCF    F98.1
021E6:  BTG    F8F.1
....................             break;
021E8:  BRA    224A
....................         case 'c':
....................             output_toggle(EN_SUP_3V3_DAQ);
021EA:  BCF    F95.0
021EC:  BTG    F8C.0
....................             break;
021EE:  BRA    224A
....................         case 'd':
....................             output_toggle(EN_SUP_UNREG);
021F0:  BCF    F93.1
021F2:  BTG    F8A.1
....................             break;
021F4:  BRA    224A
....................         case 'e':
....................             output_toggle(EN_SUP_5V0);
021F6:  BCF    F95.1
021F8:  BTG    F8C.1
....................             break;
021FA:  BRA    224A
....................         case 'f':
....................             output_toggle(KILL_SWITCH);
021FC:  BCF    F92.4
021FE:  BTG    F89.4
....................             break;
02200:  BRA    224A
....................         case 'g':
....................             output_toggle(MVCAM_PWR);
02202:  BCF    F98.0
02204:  BTG    F8F.0
....................             break;
02206:  BRA    224A
....................         case 'h':
....................             output_toggle(OVCAM_PWR);        
02208:  BCF    F95.7
0220A:  BTG    F8C.7
....................             break;
0220C:  BRA    224A
....................         case 'i':
....................             output_toggle(ADCS_PWR);        
0220E:  BCF    F95.6
02210:  BTG    F8C.6
....................             break;    
02212:  BRA    224A
....................         case 'j' :
....................             output_toggle(OVCAM_PWR);
02214:  BCF    F95.7
02216:  BTG    F8C.7
....................             output_toggle(MVCAM_PWR);  
02218:  BCF    F98.0
0221A:  BTG    F8F.0
....................             output_toggle(KILL_SWITCH);
0221C:  BCF    F92.4
0221E:  BTG    F89.4
....................             output_toggle(EN_SUP_5V0);
02220:  BCF    F95.1
02222:  BTG    F8C.1
....................             output_toggle(EN_SUP_UNREG);
02224:  BCF    F93.1
02226:  BTG    F8A.1
....................             output_toggle(EN_SUP_3V3_DAQ);
02228:  BCF    F95.0
0222A:  BTG    F8C.0
....................             output_toggle(EN_SUP_3V3_2);
0222C:  BCF    F98.1
0222E:  BTG    F8F.1
....................             output_toggle(EN_SUP_3V3_1);
02230:  BCF    F93.0
02232:  BTG    F8A.0
....................             break;
02234:  BRA    224A
....................         case 'x':
....................             break;
02236:  BRA    224A
....................             return;
02238:  BRA    224A
....................         default:
....................             fprintf(EXT, "Invalid IO option. Please try again.\n");
0223A:  MOVLW  FC
0223C:  MOVWF  FF6
0223E:  MOVLW  09
02240:  MOVWF  FF7
02242:  MOVLW  00
02244:  MOVWF  FF8
02246:  CALL   0FD0
....................             break;
....................     }
0224A:  GOTO   2E58 (RETURN)
.................... }
.................... 
.................... 
.................... void main_menu(void) {
....................     char option;
....................   fprintf(EXT, " __  __ _____ _   _ _   _   _____                 _   _             \n");
*
02C66:  MOVLW  22
02C68:  MOVWF  FF6
02C6A:  MOVLW  0A
02C6C:  MOVWF  FF7
02C6E:  MOVLW  00
02C70:  MOVWF  FF8
02C72:  CALL   0FD0
....................   fprintf(EXT, "|  \\/  | ____| \\ | | | | | |  ___|   _ _ __   ___| |_(_) ___  _ __  \n");
02C76:  MOVLW  68
02C78:  MOVWF  FF6
02C7A:  MOVLW  0A
02C7C:  MOVWF  FF7
02C7E:  MOVLW  00
02C80:  MOVWF  FF8
02C82:  CALL   0FD0
....................   fprintf(EXT, "| |\\/| |  _| |  \\| | | | | | |_ | | | | '_ \\ / __| __| |/ _ \\| '_ \\ \n");
02C86:  MOVLW  AE
02C88:  MOVWF  FF6
02C8A:  MOVLW  0A
02C8C:  MOVWF  FF7
02C8E:  MOVLW  00
02C90:  MOVWF  FF8
02C92:  CALL   0FD0
....................   fprintf(EXT, "| |  | | |___| |\\  | |_| | |  _|| |_| | | | | (__| |_| | (_) | | | |\n");
02C96:  MOVLW  F4
02C98:  MOVWF  FF6
02C9A:  MOVLW  0A
02C9C:  MOVWF  FF7
02C9E:  MOVLW  00
02CA0:  MOVWF  FF8
02CA2:  CALL   0FD0
....................   fprintf(EXT, "|_| _|_|_____|_| \\_|\\___/  |_|_  \\__,_|_| |_|\\___|\\__|_|\\___/|_| |_|\n");
02CA6:  MOVLW  3A
02CA8:  MOVWF  FF6
02CAA:  MOVLW  0B
02CAC:  MOVWF  FF7
02CAE:  MOVLW  00
02CB0:  MOVWF  FF8
02CB2:  CALL   0FD0
....................   fprintf(EXT, "   / \\   ___| |_(_)_   ____ _| |_ ___  __| | |                      \n");
02CB6:  MOVLW  80
02CB8:  MOVWF  FF6
02CBA:  MOVLW  0B
02CBC:  MOVWF  FF7
02CBE:  MOVLW  00
02CC0:  MOVWF  FF8
02CC2:  CALL   0FD0
....................   fprintf(EXT, "  / _ \\ / __| __| \\ \\ / / _` | __/ _ \\/ _` | |                      \n");
02CC6:  MOVLW  C6
02CC8:  MOVWF  FF6
02CCA:  MOVLW  0B
02CCC:  MOVWF  FF7
02CCE:  MOVLW  00
02CD0:  MOVWF  FF8
02CD2:  CALL   0FD0
....................   fprintf(EXT, " / ___ \\ (__| |_| |\\ V / (_| | ||  __/ (_| |_|                      \n");
02CD6:  MOVLW  0C
02CD8:  MOVWF  FF6
02CDA:  MOVLW  0C
02CDC:  MOVWF  FF7
02CDE:  MOVLW  00
02CE0:  MOVWF  FF8
02CE2:  CALL   0FD0
....................   fprintf(EXT, "/_/   \\_\\___|\\__|_| \\_/ \\__,_|\\__\\___|\\__,_(_)                      \n");
02CE6:  MOVLW  52
02CE8:  MOVWF  FF6
02CEA:  MOVLW  0C
02CEC:  MOVWF  FF7
02CEE:  MOVLW  00
02CF0:  MOVWF  FF8
02CF2:  CALL   0FD0
....................     
....................     while (1) {
....................         // Display Main Menu
....................         fprintf(EXT, "\n-----------------Main Menu-----------------\n");
02CF6:  MOVLW  98
02CF8:  MOVWF  FF6
02CFA:  MOVLW  0C
02CFC:  MOVWF  FF7
02CFE:  MOVLW  00
02D00:  MOVWF  FF8
02D02:  CALL   0FD0
....................         fprintf(EXT, "    press a: Get House keeping data\n");
02D06:  MOVLW  C6
02D08:  MOVWF  FF6
02D0A:  MOVLW  0C
02D0C:  MOVWF  FF7
02D0E:  MOVLW  00
02D10:  MOVWF  FF8
02D12:  CALL   0FD0
....................         fprintf(EXT, "    press b: EPS Power output control\n");
02D16:  MOVLW  EC
02D18:  MOVWF  FF6
02D1A:  MOVLW  0C
02D1C:  MOVWF  FF7
02D1E:  MOVLW  00
02D20:  MOVWF  FF8
02D22:  CALL   0FD0
....................         fprintf(EXT, "    press c: House keeping data collection\n");
02D26:  MOVLW  14
02D28:  MOVWF  FF6
02D2A:  MOVLW  0D
02D2C:  MOVWF  FF7
02D2E:  MOVLW  00
02D30:  MOVWF  FF8
02D32:  CALL   0FD0
....................         fprintf(EXT, "    press d: Check Flash Memories\n");
02D36:  MOVLW  40
02D38:  MOVWF  FF6
02D3A:  MOVLW  0D
02D3C:  MOVWF  FF7
02D3E:  MOVLW  00
02D40:  MOVWF  FF8
02D42:  CALL   0FD0
....................         fprintf(EXT, "    press e: See satellite Log\n");
02D46:  MOVLW  64
02D48:  MOVWF  FF6
02D4A:  MOVLW  0D
02D4C:  MOVWF  FF7
02D4E:  MOVLW  00
02D50:  MOVWF  FF8
02D52:  CALL   0FD0
....................         fprintf(EXT, "    press f: Settings of RTC\n");
02D56:  MOVLW  84
02D58:  MOVWF  FF6
02D5A:  MOVLW  0D
02D5C:  MOVWF  FF7
02D5E:  MOVLW  00
02D60:  MOVWF  FF8
02D62:  CALL   0FD0
....................         fprintf(EXT, "    press g: Satellite log down-link command\n");
02D66:  MOVLW  A2
02D68:  MOVWF  FF6
02D6A:  MOVLW  0D
02D6C:  MOVWF  FF7
02D6E:  MOVLW  00
02D70:  MOVWF  FF8
02D72:  CALL   0FD0
....................         fprintf(EXT, "    press h: IHC Mission start\n");
02D76:  MOVLW  D0
02D78:  MOVWF  FF6
02D7A:  MOVLW  0D
02D7C:  MOVWF  FF7
02D7E:  MOVLW  00
02D80:  MOVWF  FF8
02D82:  CALL   0FD0
....................         fprintf(EXT, "    press i: SEL current Measurement\n");
02D86:  MOVLW  F0
02D88:  MOVWF  FF6
02D8A:  MOVLW  0D
02D8C:  MOVWF  FF7
02D8E:  MOVLW  00
02D90:  MOVWF  FF8
02D92:  CALL   0FD0
....................         fprintf(EXT, "    press j: H8 COM Reset\n");
02D96:  MOVLW  16
02D98:  MOVWF  FF6
02D9A:  MOVLW  0E
02D9C:  MOVWF  FF7
02D9E:  MOVLW  00
02DA0:  MOVWF  FF8
02DA2:  CALL   0FD0
....................         fprintf(EXT, "    press i: UART repeater of EPS\n");
02DA6:  MOVLW  32
02DA8:  MOVWF  FF6
02DAA:  MOVLW  0E
02DAC:  MOVWF  FF7
02DAE:  MOVLW  00
02DB0:  MOVWF  FF8
02DB2:  CALL   0FD0
....................         fprintf(EXT, "    press x: Exit Main Menu\n");
02DB6:  MOVLW  56
02DB8:  MOVWF  FF6
02DBA:  MOVLW  0E
02DBC:  MOVWF  FF7
02DBE:  MOVLW  00
02DC0:  MOVWF  FF8
02DC2:  CALL   0FD0
....................         fprintf(EXT, "    DO NOT USE CAPITAL CHARACTERS TO WRITE!\n\n");
02DC6:  MOVLW  74
02DC8:  MOVWF  FF6
02DCA:  MOVLW  0E
02DCC:  MOVWF  FF7
02DCE:  MOVLW  00
02DD0:  MOVWF  FF8
02DD2:  CALL   0FD0
.................... 
....................         // Read the user's choice
....................         option = fgetc(EXT);
02DD6:  CALL   1DC8
02DDA:  MOVFF  01,1BA
.................... 
....................         // Main menu switch
....................         switch (option) {
02DDE:  MOVLB  1
02DE0:  MOVF   xBA,W
02DE2:  XORLW  61
02DE4:  MOVLB  0
02DE6:  BZ    2E16
02DE8:  XORLW  03
02DEA:  BZ    2E18
02DEC:  XORLW  01
02DEE:  BZ    2E1E
02DF0:  XORLW  07
02DF2:  BZ    2E20
02DF4:  XORLW  01
02DF6:  BZ    2E24
02DF8:  XORLW  03
02DFA:  BZ    2E26
02DFC:  XORLW  01
02DFE:  BZ    2E2A
02E00:  XORLW  0F
02E02:  BZ    2E2C
02E04:  XORLW  01
02E06:  BZ    2E2E
02E08:  XORLW  03
02E0A:  BZ    2E30
02E0C:  XORLW  06
02E0E:  BZ    2E32
02E10:  XORLW  14
02E12:  BZ    2E46
02E14:  BRA    2E48
....................             case 'a':
....................                 // Call a function to get housekeeping data
....................                 // get_housekeeping_data();
....................                 break;
02E16:  BRA    2E58
....................             case 'b':
....................                 // Call a function to control EPS power output
....................                 handle_io_control();
02E18:  GOTO   1E12
....................                 break;
02E1C:  BRA    2E58
....................             case 'c':
....................                 // Call a function to collect housekeeping data
....................                 // collect_housekeeping_data();
....................                 break;
02E1E:  BRA    2E58
....................             case 'd':
....................                 handle_flash_memories();
02E20:  BRA    272C
....................                 break;
02E22:  BRA    2E58
....................             case 'e':
....................                 // Call a function to see satellite log
....................                 // see_satellite_log();
....................                 break;
02E24:  BRA    2E58
....................             case 'f':
....................                 handle_set_time();
02E26:  BRA    286A
....................                 break;
02E28:  BRA    2E58
....................             case 'g':
....................                 // Call a function for satellite log downlink command
....................                 // satellite_log_downlink_command();
....................                 break;
02E2A:  BRA    2E58
....................             case 'h':
....................                 // Call a function for IHC mission start
....................                 // ihc_mission_start();
....................                 break;
02E2C:  BRA    2E58
....................             case 'i':
....................                 // Call a function for SEL current measurement
....................                 // sel_current_measurement();
....................                 break;
02E2E:  BRA    2E58
....................             case 'j':
....................                 // Call a function for H8 COM reset
....................                 // h8_com_reset();
....................                 break;
02E30:  BRA    2E58
....................             case 'l':
....................                 fprintf(EXT, "UART Repeater Initialized.\n");
02E32:  MOVLW  A2
02E34:  MOVWF  FF6
02E36:  MOVLW  0E
02E38:  MOVWF  FF7
02E3A:  MOVLW  00
02E3C:  MOVWF  FF8
02E3E:  CALL   0FD0
....................                 uart_repeater();
02E42:  BRA    2C4E
....................                 break;
02E44:  BRA    2E58
....................             case 'x':
....................                 return;
02E46:  BRA    2E5A
....................             default:
....................                 fprintf(EXT, "Invalid option. Please try again.\n");
02E48:  MOVLW  BE
02E4A:  MOVWF  FF6
02E4C:  MOVLW  0E
02E4E:  MOVWF  FF7
02E50:  MOVLW  00
02E52:  MOVWF  FF8
02E54:  CALL   0FD0
....................                 break;
....................         }
02E58:  BRA    2CF6
....................     }
02E5A:  GOTO   3184 (RETURN)
.................... }
.................... 
.................... #ifdef	__cplusplus
.................... }
.................... #endif
.................... 
.................... #endif	/* MAIN_H */
.................... 
.................... 
.................... 
.................... 
.................... /*
....................  * 
....................  */
.................... 
.................... //int8 setup_oscillator(OSC_PRIMARY|OSC_SOSC_ENABLED);
.................... char bichig[25] = "test data update of MAIN";
.................... char bichigcom[24] = "test data update of COM";
.................... char bichigadcs[25] = "test data update of ADCS";
.................... unsigned char *read_data[80];
.................... unsigned char buffer[40];
.................... char read_data_com[80];
.................... char read_data_adcs[80];
.................... 
.................... void main() {
02E5E:  CLRF   FF8
02E60:  BCF    FD0.7
02E62:  CLRF   F9B
02E64:  CLRF   F64
02E66:  CLRF   F65
02E68:  CLRF   F66
02E6A:  MOVLW  02
02E6C:  MOVWF  FD3
02E6E:  BCF    F96.5
02E70:  BSF    F8D.5
02E72:  BCF    F94.6
02E74:  BSF    F8B.6
02E76:  BCF    F95.2
02E78:  BSF    F8C.2
02E7A:  BCF    F97.7
02E7C:  BSF    F8E.7
02E7E:  BSF    F96.0
02E80:  BCF    F96.6
02E82:  BCF    F96.1
02E84:  BCF    F8D.1
02E86:  BSF    F93.5
02E88:  BCF    F93.4
02E8A:  BCF    F93.2
02E8C:  BCF    F8A.2
02E8E:  BSF    F92.0
02E90:  BCF    F92.1
02E92:  BCF    F92.3
02E94:  BCF    F89.3
02E96:  CLRF   05
02E98:  CLRF   04
02E9A:  BRA    2F02
02E9C:  DATA 4A,00
02E9E:  DATA 06,74
02EA0:  DATA 65,73
02EA2:  DATA 74,20
02EA4:  DATA 64,61
02EA6:  DATA 74,61
02EA8:  DATA 20,75
02EAA:  DATA 70,64
02EAC:  DATA 61,74
02EAE:  DATA 65,20
02EB0:  DATA 6F,66
02EB2:  DATA 20,4D
02EB4:  DATA 41,49
02EB6:  DATA 4E,00
02EB8:  DATA 74,65
02EBA:  DATA 73,74
02EBC:  DATA 20,64
02EBE:  DATA 61,74
02EC0:  DATA 61,20
02EC2:  DATA 75,70
02EC4:  DATA 64,61
02EC6:  DATA 74,65
02EC8:  DATA 20,6F
02ECA:  DATA 66,20
02ECC:  DATA 43,4F
02ECE:  DATA 4D,00
02ED0:  DATA 74,65
02ED2:  DATA 73,74
02ED4:  DATA 20,64
02ED6:  DATA 61,74
02ED8:  DATA 61,20
02EDA:  DATA 75,70
02EDC:  DATA 64,61
02EDE:  DATA 74,65
02EE0:  DATA 20,6F
02EE2:  DATA 66,20
02EE4:  DATA 41,44
02EE6:  DATA 43,53
02EE8:  DATA 00,03
02EEA:  DATA 0E,45
02EEC:  DATA 00,00
02EEE:  DATA 00,08
02EF0:  DATA 4E,CE
02EF2:  DATA 00,02
02EF4:  DATA 0E,D9
02EF6:  DATA 00,00
02EF8:  DATA 02,0F
02EFA:  DATA 37,00
02EFC:  DATA 00,01
02EFE:  DATA 0F,53
02F00:  DATA 00,00
02F02:  MOVLW  00
02F04:  MOVWF  FF8
02F06:  MOVLW  2E
02F08:  MOVWF  FF7
02F0A:  MOVLW  9C
02F0C:  MOVWF  FF6
02F0E:  TBLRD*+
02F10:  MOVF   FF5,W
02F12:  MOVWF  00
02F14:  XORLW  00
02F16:  BZ    2F3E
02F18:  TBLRD*+
02F1A:  MOVF   FF5,W
02F1C:  MOVWF  01
02F1E:  BTFSC  FE8.7
02F20:  BRA    2F2C
02F22:  ANDLW  3F
02F24:  MOVWF  FEA
02F26:  TBLRD*+
02F28:  MOVFF  FF5,FE9
02F2C:  BTFSC  01.6
02F2E:  TBLRD*+
02F30:  BTFSS  01.6
02F32:  TBLRD*+
02F34:  MOVFF  FF5,FEE
02F38:  DCFSNZ 00,F
02F3A:  BRA    2F0E
02F3C:  BRA    2F30
02F3E:  CLRF   FF8
....................     //------------------------Start_Indicator-------------------------
.................... startup_freeze();
02F40:  GOTO   0FF8
....................     //--------------------------RTC-----------------------------------
.................... RTC_initialize();
02F44:  GOTO   107C
....................     //------------------------restart_indicator-----------------------
....................     update_shutdown_count();
02F48:  GOTO   155A
....................     //------------------------read_chip_ID----------------------------
....................     fprintf(EXT, "Reading chip ID of main\n");
02F4C:  MOVLW  E2
02F4E:  MOVWF  FF6
02F50:  MOVLW  0E
02F52:  MOVWF  FF7
02F54:  MOVLW  00
02F56:  MOVWF  FF8
02F58:  CALL   0FD0
....................     READ_CHIP_ID_OF();  // Pass the array to be filled by the function
02F5C:  CALL   1690
....................     fprintf(EXT, "Reading chip ID of COM\n");
02F60:  MOVLW  FC
02F62:  MOVWF  FF6
02F64:  MOVLW  0E
02F66:  MOVWF  FF7
02F68:  MOVLW  00
02F6A:  MOVWF  FF8
02F6C:  CALL   0FD0
....................     READ_CHIP_ID_OF_COM();
02F70:  GOTO   175C
....................     fprintf(EXT, "Reading chip ID of ADCS\n");
02F74:  MOVLW  14
02F76:  MOVWF  FF6
02F78:  MOVLW  0F
02F7A:  MOVWF  FF7
02F7C:  MOVLW  00
02F7E:  MOVWF  FF8
02F80:  CALL   0FD0
....................     READ_CHIP_ID_OF_ADCS();
02F84:  GOTO   1834
....................     fprintf(EXT, "Done reading chip ID\n");
02F88:  MOVLW  2E
02F8A:  MOVWF  FF6
02F8C:  MOVLW  0F
02F8E:  MOVWF  FF7
02F90:  MOVLW  00
02F92:  MOVWF  FF8
02F94:  CALL   0FD0
....................     delay_ms(1000);
02F98:  MOVLW  04
02F9A:  MOVLB  1
02F9C:  MOVWF  xBA
02F9E:  MOVLW  FA
02FA0:  MOVWF  xBC
02FA2:  MOVLB  0
02FA4:  CALL   0F60
02FA8:  MOVLB  1
02FAA:  DECFSZ xBA,F
02FAC:  BRA    2F9E
.................... //------------------------write_flash_memory--------------------------
....................     //  fprintf(EXT, "Starting to write data\n");
....................     WRITE_DATA_NBYTES(0x00005000,bichig,29);
02FAE:  MOVLB  2
02FB0:  CLRF   xEC
02FB2:  CLRF   xEB
02FB4:  MOVLW  50
02FB6:  MOVWF  xEA
02FB8:  CLRF   xE9
02FBA:  CLRF   xEE
02FBC:  MOVLW  06
02FBE:  MOVWF  xED
02FC0:  MOVLW  1D
02FC2:  MOVWF  xEF
02FC4:  MOVLB  0
02FC6:  CALL   13F2
....................     delay_ms(1000);
02FCA:  MOVLW  04
02FCC:  MOVLB  1
02FCE:  MOVWF  xBA
02FD0:  MOVLW  FA
02FD2:  MOVWF  xBC
02FD4:  MOVLB  0
02FD6:  CALL   0F60
02FDA:  MOVLB  1
02FDC:  DECFSZ xBA,F
02FDE:  BRA    2FD0
....................     READ_DATA_NBYTES(0x00005000,read_data, 29);
02FE0:  CLRF   xBF
02FE2:  CLRF   xBE
02FE4:  MOVLW  50
02FE6:  MOVWF  xBD
02FE8:  CLRF   xBC
02FEA:  CLRF   xC1
02FEC:  MOVWF  xC0
02FEE:  MOVLW  1D
02FF0:  MOVWF  xC2
02FF2:  MOVLB  0
02FF4:  CALL   112C
....................     delay_ms(1000);
02FF8:  MOVLW  04
02FFA:  MOVLB  1
02FFC:  MOVWF  xBA
02FFE:  MOVLW  FA
03000:  MOVWF  xBC
03002:  MOVLB  0
03004:  CALL   0F60
03008:  MOVLB  1
0300A:  DECFSZ xBA,F
0300C:  BRA    2FFE
....................     for (int i = 0; i < buffer[i]; i++) {
0300E:  CLRF   xB8
03010:  CLRF   03
03012:  MOVF   xB8,W
03014:  ADDLW  F0
03016:  MOVWF  FE9
03018:  MOVLW  00
0301A:  ADDWFC 03,W
0301C:  MOVWF  FEA
0301E:  MOVF   FEF,W
03020:  SUBWF  xB8,W
03022:  BC    3042
....................         fprintf(EXT, "%c", buffer[i]);
03024:  CLRF   03
03026:  MOVF   xB8,W
03028:  ADDLW  F0
0302A:  MOVWF  FE9
0302C:  MOVLW  00
0302E:  ADDWFC 03,W
03030:  MOVWF  FEA
03032:  MOVFF  FEF,2FB
03036:  MOVLB  0
03038:  CALL   0F8A
0303C:  MOVLB  1
0303E:  INCF   xB8,F
03040:  BRA    3010
....................     }
....................     fprintf(EXT, "\n");
03042:  MOVLW  0A
03044:  MOVLB  2
03046:  MOVWF  xFB
03048:  MOVLB  0
0304A:  CALL   0F8A
....................     WRITE_DATA_NBYTES_COM(0x00005000,bichigcom,29);
0304E:  MOVLB  1
03050:  CLRF   xBD
03052:  CLRF   xBC
03054:  MOVLW  50
03056:  MOVWF  xBB
03058:  CLRF   xBA
0305A:  CLRF   xBF
0305C:  MOVLW  1F
0305E:  MOVWF  xBE
03060:  MOVLW  1D
03062:  MOVWF  xC0
03064:  MOVLB  0
03066:  GOTO   18E2
....................     delay_ms(1000);
0306A:  MOVLW  04
0306C:  MOVLB  1
0306E:  MOVWF  xBA
03070:  MOVLW  FA
03072:  MOVWF  xBC
03074:  MOVLB  0
03076:  CALL   0F60
0307A:  MOVLB  1
0307C:  DECFSZ xBA,F
0307E:  BRA    3070
....................     READ_DATA_NBYTES_COM(0x00005000,read_data_com, 29);
03080:  CLRF   xBD
03082:  CLRF   xBC
03084:  MOVLW  50
03086:  MOVWF  xBB
03088:  CLRF   xBA
0308A:  MOVLW  01
0308C:  MOVWF  xBF
0308E:  MOVLW  18
03090:  MOVWF  xBE
03092:  MOVLW  1D
03094:  MOVWF  xC0
03096:  MOVLB  0
03098:  GOTO   1A62
....................     delay_ms(1000);
0309C:  MOVLW  04
0309E:  MOVLB  1
030A0:  MOVWF  xBA
030A2:  MOVLW  FA
030A4:  MOVWF  xBC
030A6:  MOVLB  0
030A8:  CALL   0F60
030AC:  MOVLB  1
030AE:  DECFSZ xBA,F
030B0:  BRA    30A2
....................     WRITE_DATA_NBYTES_ADCS(0x00005000,bichigadcs,29);
030B2:  CLRF   xBD
030B4:  CLRF   xBC
030B6:  MOVLW  50
030B8:  MOVWF  xBB
030BA:  CLRF   xBA
030BC:  CLRF   xBF
030BE:  MOVLW  37
030C0:  MOVWF  xBE
030C2:  MOVLW  1D
030C4:  MOVWF  xC0
030C6:  MOVLB  0
030C8:  GOTO   1B60
....................     delay_ms(1000);
030CC:  MOVLW  04
030CE:  MOVLB  1
030D0:  MOVWF  xBA
030D2:  MOVLW  FA
030D4:  MOVWF  xBC
030D6:  MOVLB  0
030D8:  CALL   0F60
030DC:  MOVLB  1
030DE:  DECFSZ xBA,F
030E0:  BRA    30D2
....................     READ_DATA_NBYTES_ADCS(0x00005000,read_data_adcs, 29);
030E2:  CLRF   xBD
030E4:  CLRF   xBC
030E6:  MOVLW  50
030E8:  MOVWF  xBB
030EA:  CLRF   xBA
030EC:  MOVLW  01
030EE:  MOVWF  xBF
030F0:  MOVLW  68
030F2:  MOVWF  xBE
030F4:  MOVLW  1D
030F6:  MOVWF  xC0
030F8:  MOVLB  0
030FA:  GOTO   1CEC
....................     delay_ms(1000);
030FE:  MOVLW  04
03100:  MOVLB  1
03102:  MOVWF  xBA
03104:  MOVLW  FA
03106:  MOVWF  xBC
03108:  MOVLB  0
0310A:  CALL   0F60
0310E:  MOVLB  1
03110:  DECFSZ xBA,F
03112:  BRA    3104
....................     
....................     //   WRITE_DATA_NBYTES(0x00000250,bichig,40);
.................... //    WRITE_DATA_NBYTES(0x00000300, bichig, 20);
.................... //    fprintf(EXT, "Byte saved\n");
.................... //    fprintf(EXT, "Reading desired address\n");
.................... //    fprintf(EXT, "Reading... \n");
.................... //    char baba;
....................      READ_DATA_NBYTES(0x00000300, read_data, 20);
03114:  CLRF   xBF
03116:  CLRF   xBE
03118:  MOVLW  03
0311A:  MOVWF  xBD
0311C:  CLRF   xBC
0311E:  CLRF   xC1
03120:  MOVLW  50
03122:  MOVWF  xC0
03124:  MOVLW  14
03126:  MOVWF  xC2
03128:  MOVLB  0
0312A:  CALL   112C
....................     fprintf(EXT, "%c", read_data);
0312E:  MOVLW  50
03130:  MOVLB  2
03132:  MOVWF  xFB
03134:  MOVLB  0
03136:  CALL   0F8A
....................     for (int i = 0; i < 19; i++) {
0313A:  MOVLB  1
0313C:  CLRF   xB9
0313E:  MOVF   xB9,W
03140:  SUBLW  12
03142:  BNC   3172
....................         fprintf(EXT, "%c", read_data[i]);
03144:  CLRF   03
03146:  MOVFF  1B9,02
0314A:  BCF    FD8.0
0314C:  RLCF   02,F
0314E:  RLCF   03,F
03150:  MOVF   02,W
03152:  ADDLW  50
03154:  MOVWF  FE9
03156:  MOVLW  00
03158:  ADDWFC 03,W
0315A:  MOVWF  FEA
0315C:  MOVFF  FEC,1BB
03160:  MOVF   FED,F
03162:  MOVFF  FEF,2FB
03166:  MOVLB  0
03168:  CALL   0F8A
0316C:  MOVLB  1
0316E:  INCF   xB9,F
03170:  BRA    313E
....................     }
....................     fprintf(EXT, "\n");
03172:  MOVLW  0A
03174:  MOVLB  2
03176:  MOVWF  xFB
03178:  MOVLB  0
0317A:  CALL   0F8A
....................     //------------------------MAIN_MENU-------------------------------
....................     while (TRUE) {
....................         if (kbhit(EXT)) {
0317E:  BTFSC  F82.7
03180:  BRA    3194
....................             main_menu();
03182:  BRA    2C66
....................             fprintf(EXT, "exiting main menu function");
03184:  MOVLW  44
03186:  MOVWF  FF6
03188:  MOVLW  0F
0318A:  MOVWF  FF7
0318C:  MOVLW  00
0318E:  MOVWF  FF8
03190:  CALL   0FD0
....................         }
03194:  BRA    317E
....................     }
.................... }
.................... 
03196:  BRA    3196
.................... 

Configuration Fuses:
   Word  1: F600   NOSTVREN NOXINST DEBUG NOBROWNOUT BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS DSWDT_ DSWDT DSWDTOSC_INT

   Some fuses have been forced to be compatible with the ICD debugger.
