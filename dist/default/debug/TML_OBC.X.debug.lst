CCS PCH C Compiler, Version 5.112, 5967               14-Oct-24 07:39

               Filename:   C:\Users\Ganji\Documents\------TEMUULEL------\CODE\TML_OBC.X\dist\default\debug\TML_OBC.X.debug.lst

               ROM used:   4918 bytes (4%)
                           Largest free fragment is 65520
               RAM used:   136 (4%) at main() level
                           159 (4%) worst case
               Stack used: 2 locations
               Stack size: 30

*
00000:  NOP   
00002:  GOTO   1116
.................... #import(file="build/default/debug/main.o")
.................... /* 
.................... /* 
....................  * File:   main.c
....................  * Author: Ganji
....................  *
....................  * Created on September 12, 2024, 7:31 AM
....................  */
.................... 
.................... #include <spi.h>
.................... /* 
....................  * File:   SPI.h
....................  * Author: Ganji
....................  *
....................  * Created on September 12, 2024, 7:30 AM
....................  */
.................... 
.................... #ifndef SPI_H
.................... #define	SPI_H
.................... 
.................... #ifdef	__cplusplus
.................... extern "C" {
.................... #endif
.................... 
.................... 
.................... 
.................... #include <18F67J94.h>
.................... //////////// Standard Header file for the PIC18F67J94 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC18F67J94
00006:  DATA 57,52
00008:  DATA 49,54
0000A:  DATA 45,20
0000C:  DATA 41,44
0000E:  DATA 44,52
00010:  DATA 45,53
00012:  DATA 53,3A
00014:  DATA 20,30
00016:  DATA 78,25
00018:  DATA 30,38
0001A:  DATA 6C,78
0001C:  DATA 0A,00
0001E:  DATA 0A,25
00020:  DATA 64,20
00022:  DATA 42,59
00024:  DATA 54,45
00026:  DATA 53,20
00028:  DATA 57,52
0002A:  DATA 49,54
0002C:  DATA 54,45
0002E:  DATA 4E,21
00030:  DATA 0A,00
00032:  DATA 57,52
00034:  DATA 49,54
00036:  DATA 45,20
00038:  DATA 41,44
0003A:  DATA 44,52
0003C:  DATA 45,53
0003E:  DATA 53,3A
00040:  DATA 20,30
00042:  DATA 78,25
00044:  DATA 30,38
00046:  DATA 6C,78
00048:  DATA 0A,00
0004A:  DATA 0A,25
0004C:  DATA 64,20
0004E:  DATA 42,59
00050:  DATA 54,45
00052:  DATA 53,20
00054:  DATA 57,52
00056:  DATA 49,54
00058:  DATA 54,45
0005A:  DATA 4E,21
0005C:  DATA 0A,00
0005E:  DATA 70,72
00060:  DATA 65,73
00062:  DATA 73,65
00064:  DATA 64,20
00066:  DATA 6F,70
00068:  DATA 74,69
0006A:  DATA 6F,6E
0006C:  DATA 20,64
0006E:  DATA 3A,20
00070:  DATA 43,68
00072:  DATA 65,63
00074:  DATA 6B,20
00076:  DATA 46,6C
00078:  DATA 61,73
0007A:  DATA 68,20
0007C:  DATA 4D,65
0007E:  DATA 6D,6F
00080:  DATA 72,69
00082:  DATA 65,73
00084:  DATA 0A,0A
00086:  DATA 00,00
00088:  DATA 50,6C
0008A:  DATA 65,61
0008C:  DATA 73,65
0008E:  DATA 20,63
00090:  DATA 68,6F
00092:  DATA 6F,73
00094:  DATA 65,20
00096:  DATA 77,68
00098:  DATA 69,63
0009A:  DATA 68,20
0009C:  DATA 66,6C
0009E:  DATA 61,73
000A0:  DATA 68,20
000A2:  DATA 6D,65
000A4:  DATA 6D,6F
000A6:  DATA 72,79
000A8:  DATA 20,74
000AA:  DATA 6F,20
000AC:  DATA 77,6F
000AE:  DATA 72,6B
000B0:  DATA 20,6F
000B2:  DATA 6E,20
000B4:  DATA 28,61
000B6:  DATA 2C,20
000B8:  DATA 62,2C
000BA:  DATA 20,63
000BC:  DATA 29,3A
000BE:  DATA 0A,00
000C0:  DATA 70,72
000C2:  DATA 65,73
000C4:  DATA 73,20
000C6:  DATA 61,3A
000C8:  DATA 20,4D
000CA:  DATA 41,49
000CC:  DATA 4E,20
000CE:  DATA 66,6C
000D0:  DATA 61,73
000D2:  DATA 68,20
000D4:  DATA 6D,65
000D6:  DATA 6D,6F
000D8:  DATA 72,79
000DA:  DATA 0A,00
000DC:  DATA 70,72
000DE:  DATA 65,73
000E0:  DATA 73,20
000E2:  DATA 62,3A
000E4:  DATA 20,43
000E6:  DATA 4F,4D
000E8:  DATA 20,73
000EA:  DATA 68,61
000EC:  DATA 72,65
000EE:  DATA 64,20
000F0:  DATA 66,6C
000F2:  DATA 61,73
000F4:  DATA 68,20
000F6:  DATA 6D,65
000F8:  DATA 6D,6F
000FA:  DATA 72,79
000FC:  DATA 0A,00
000FE:  DATA 70,72
00100:  DATA 65,73
00102:  DATA 73,20
00104:  DATA 63,3A
00106:  DATA 20,41
00108:  DATA 44,43
0010A:  DATA 53,20
0010C:  DATA 73,68
0010E:  DATA 61,72
00110:  DATA 65,64
00112:  DATA 20,66
00114:  DATA 6C,61
00116:  DATA 73,68
00118:  DATA 20,6D
0011A:  DATA 65,6D
0011C:  DATA 6F,72
0011E:  DATA 79,0A
00120:  DATA 00,00
00122:  DATA 43,4F
00124:  DATA 4D,20
00126:  DATA 73,68
00128:  DATA 61,72
0012A:  DATA 65,64
0012C:  DATA 20,66
0012E:  DATA 6C,61
00130:  DATA 73,68
00132:  DATA 20,6D
00134:  DATA 65,6D
00136:  DATA 6F,72
00138:  DATA 79,20
0013A:  DATA 63,68
0013C:  DATA 6F,73
0013E:  DATA 65,6E
00140:  DATA 0A,00
00142:  DATA 41,44
00144:  DATA 43,53
00146:  DATA 20,73
00148:  DATA 68,61
0014A:  DATA 72,65
0014C:  DATA 64,20
0014E:  DATA 66,6C
00150:  DATA 61,73
00152:  DATA 68,20
00154:  DATA 6D,65
00156:  DATA 6D,6F
00158:  DATA 72,79
0015A:  DATA 20,63
0015C:  DATA 68,6F
0015E:  DATA 73,65
00160:  DATA 6E,0A
00162:  DATA 00,00
00164:  DATA 49,6E
00166:  DATA 76,61
00168:  DATA 6C,69
0016A:  DATA 64,20
0016C:  DATA 66,6C
0016E:  DATA 61,73
00170:  DATA 68,20
00172:  DATA 6D,65
00174:  DATA 6D,6F
00176:  DATA 72,79
00178:  DATA 20,6F
0017A:  DATA 70,74
0017C:  DATA 69,6F
0017E:  DATA 6E,2E
00180:  DATA 20,50
00182:  DATA 6C,65
00184:  DATA 61,73
00186:  DATA 65,20
00188:  DATA 74,72
0018A:  DATA 79,20
0018C:  DATA 61,67
0018E:  DATA 61,69
00190:  DATA 6E,2E
00192:  DATA 0A,00
00194:  DATA 4D,41
00196:  DATA 49,4E
00198:  DATA 20,66
0019A:  DATA 6C,61
0019C:  DATA 73,68
0019E:  DATA 20,6D
001A0:  DATA 65,6D
001A2:  DATA 6F,72
001A4:  DATA 79,20
001A6:  DATA 63,68
001A8:  DATA 6F,73
001AA:  DATA 65,6E
001AC:  DATA 0A,00
001AE:  DATA 70,72
001B0:  DATA 65,73
001B2:  DATA 73,20
001B4:  DATA 61,3A
001B6:  DATA 20,52
001B8:  DATA 65,61
001BA:  DATA 64,20
001BC:  DATA 49,44
001BE:  DATA 20,6F
001C0:  DATA 66,20
001C2:  DATA 74,68
001C4:  DATA 65,20
001C6:  DATA 63,68
001C8:  DATA 69,70
001CA:  DATA 0A,00
001CC:  DATA 70,72
001CE:  DATA 65,73
001D0:  DATA 73,20
001D2:  DATA 62,3A
001D4:  DATA 20,57
001D6:  DATA 72,69
001D8:  DATA 74,65
001DA:  DATA 20,64
001DC:  DATA 61,74
001DE:  DATA 61,20
001E0:  DATA 73,65
001E2:  DATA 74,20
001E4:  DATA 69,6E
001E6:  DATA 20,73
001E8:  DATA 70,65
001EA:  DATA 63,69
001EC:  DATA 66,69
001EE:  DATA 65,64
001F0:  DATA 20,61
001F2:  DATA 64,64
001F4:  DATA 72,65
001F6:  DATA 73,73
001F8:  DATA 0A,00
001FA:  DATA 70,72
001FC:  DATA 65,73
001FE:  DATA 73,20
00200:  DATA 63,3A
00202:  DATA 20,52
00204:  DATA 65,61
00206:  DATA 64,20
00208:  DATA 64,61
0020A:  DATA 74,61
0020C:  DATA 20,73
0020E:  DATA 65,74
00210:  DATA 20,69
00212:  DATA 6E,20
00214:  DATA 73,70
00216:  DATA 65,63
00218:  DATA 69,66
0021A:  DATA 69,65
0021C:  DATA 64,20
0021E:  DATA 61,64
00220:  DATA 64,72
00222:  DATA 65,73
00224:  DATA 73,0A
00226:  DATA 00,00
00228:  DATA 70,72
0022A:  DATA 65,73
0022C:  DATA 73,20
0022E:  DATA 64,3A
00230:  DATA 20,52
00232:  DATA 65,74
00234:  DATA 75,72
00236:  DATA 6E,20
00238:  DATA 74,6F
0023A:  DATA 20,4D
0023C:  DATA 41,49
0023E:  DATA 4E,20
00240:  DATA 4D,45
00242:  DATA 4E,55
00244:  DATA 0A,00
00246:  DATA 53,74
00248:  DATA 61,72
0024A:  DATA 74,65
0024C:  DATA 64,20
0024E:  DATA 72,65
00250:  DATA 61,64
00252:  DATA 69,6E
00254:  DATA 67,20
00256:  DATA 63,68
00258:  DATA 69,70
0025A:  DATA 20,49
0025C:  DATA 44,20
0025E:  DATA 6F,66
00260:  DATA 20,4D
00262:  DATA 41,49
00264:  DATA 4E,20
00266:  DATA 66,6C
00268:  DATA 61,73
0026A:  DATA 68,20
0026C:  DATA 6D,65
0026E:  DATA 6D,6F
00270:  DATA 72,79
00272:  DATA 0A,00
00274:  DATA 57,72
00276:  DATA 69,74
00278:  DATA 65,20
0027A:  DATA 64,61
0027C:  DATA 74,61
0027E:  DATA 20,73
00280:  DATA 65,74
00282:  DATA 20,69
00284:  DATA 6E,20
00286:  DATA 73,70
00288:  DATA 65,63
0028A:  DATA 69,66
0028C:  DATA 69,65
0028E:  DATA 64,20
00290:  DATA 61,64
00292:  DATA 64,72
00294:  DATA 65,73
00296:  DATA 73,0A
00298:  DATA 00,00
0029A:  DATA 45,6E
0029C:  DATA 74,65
0029E:  DATA 72,20
002A0:  DATA 61,64
002A2:  DATA 64,72
002A4:  DATA 65,73
002A6:  DATA 73,20
002A8:  DATA 28,33
002AA:  DATA 32,2D
002AC:  DATA 62,69
002AE:  DATA 74,20
002B0:  DATA 68,65
002B2:  DATA 78,61
002B4:  DATA 64,65
002B6:  DATA 63,69
002B8:  DATA 6D,61
002BA:  DATA 6C,29
002BC:  DATA 3A,20
002BE:  DATA 00,00
002C0:  DATA 45,6E
002C2:  DATA 74,65
002C4:  DATA 72,20
002C6:  DATA 64,61
002C8:  DATA 74,61
002CA:  DATA 20,6C
002CC:  DATA 65,6E
002CE:  DATA 67,74
002D0:  DATA 68,20
002D2:  DATA 28,31
002D4:  DATA 20,74
002D6:  DATA 6F,20
002D8:  DATA 33,32
002DA:  DATA 29,3A
002DC:  DATA 20,00
002DE:  DATA 45,6E
002E0:  DATA 74,65
002E2:  DATA 72,20
002E4:  DATA 64,61
002E6:  DATA 74,61
002E8:  DATA 20,62
002EA:  DATA 79,74
002EC:  DATA 65,73
002EE:  DATA 20,28
002F0:  DATA 73,70
002F2:  DATA 61,63
002F4:  DATA 65,2D
002F6:  DATA 73,65
002F8:  DATA 70,61
002FA:  DATA 72,61
002FC:  DATA 74,65
002FE:  DATA 64,20
00300:  DATA 68,65
00302:  DATA 78,61
00304:  DATA 64,65
00306:  DATA 63,69
00308:  DATA 6D,61
0030A:  DATA 6C,20
0030C:  DATA 76,61
0030E:  DATA 6C,75
00310:  DATA 65,73
00312:  DATA 29,3A
00314:  DATA 20,00
00316:  DATA 44,61
00318:  DATA 74,61
0031A:  DATA 20,77
0031C:  DATA 72,69
0031E:  DATA 74,74
00320:  DATA 65,6E
00322:  DATA 20,74
00324:  DATA 6F,20
00326:  DATA 73,70
00328:  DATA 65,63
0032A:  DATA 69,66
0032C:  DATA 69,65
0032E:  DATA 64,20
00330:  DATA 61,64
00332:  DATA 64,72
00334:  DATA 65,73
00336:  DATA 73,2E
00338:  DATA 0A,00
0033A:  DATA 52,65
0033C:  DATA 61,64
0033E:  DATA 20,64
00340:  DATA 61,74
00342:  DATA 61,20
00344:  DATA 73,65
00346:  DATA 74,20
00348:  DATA 69,6E
0034A:  DATA 20,73
0034C:  DATA 70,65
0034E:  DATA 63,69
00350:  DATA 66,69
00352:  DATA 65,64
00354:  DATA 20,61
00356:  DATA 64,64
00358:  DATA 72,65
0035A:  DATA 73,73
0035C:  DATA 0A,00
0035E:  DATA 45,6E
00360:  DATA 74,65
00362:  DATA 72,20
00364:  DATA 79,6F
00366:  DATA 75,72
00368:  DATA 20,73
0036A:  DATA 70,65
0036C:  DATA 63,69
0036E:  DATA 66,69
00370:  DATA 65,64
00372:  DATA 20,61
00374:  DATA 64,64
00376:  DATA 72,65
00378:  DATA 73,73
0037A:  DATA 3A,20
0037C:  DATA 00,00
0037E:  DATA 45,6E
00380:  DATA 74,65
00382:  DATA 72,20
00384:  DATA 79,6F
00386:  DATA 75,72
00388:  DATA 20,73
0038A:  DATA 70,65
0038C:  DATA 63,69
0038E:  DATA 66,69
00390:  DATA 65,64
00392:  DATA 20,61
00394:  DATA 64,64
00396:  DATA 72,65
00398:  DATA 73,73
0039A:  DATA 20,6C
0039C:  DATA 65,6E
0039E:  DATA 67,74
003A0:  DATA 68,20
003A2:  DATA 3A,20
003A4:  DATA 00,00
003A6:  DATA 49,6E
003A8:  DATA 76,61
003AA:  DATA 6C,69
003AC:  DATA 64,20
003AE:  DATA 4D,41
003B0:  DATA 49,4E
003B2:  DATA 20,66
003B4:  DATA 6C,61
003B6:  DATA 73,68
003B8:  DATA 20,6D
003BA:  DATA 65,6D
003BC:  DATA 6F,72
003BE:  DATA 79,20
003C0:  DATA 6F,70
003C2:  DATA 74,69
003C4:  DATA 6F,6E
003C6:  DATA 2E,20
003C8:  DATA 50,6C
003CA:  DATA 65,61
003CC:  DATA 73,65
003CE:  DATA 20,74
003D0:  DATA 72,79
003D2:  DATA 20,61
003D4:  DATA 67,61
003D6:  DATA 69,6E
003D8:  DATA 2E,0A
003DA:  DATA 00,00
003DC:  DATA 4E,6F
003DE:  DATA 77,20
003E0:  DATA 74,69
003E2:  DATA 6D,65
003E4:  DATA 20,69
003E6:  DATA 73,0A
003E8:  DATA 00,00
003EA:  DATA 0D,25
003EC:  DATA 30,32
003EE:  DATA 75,2F
003F0:  DATA 25,30
003F2:  DATA 32,75
003F4:  DATA 2F,32
003F6:  DATA 30,25
003F8:  DATA 30,32
003FA:  DATA 75,20
003FC:  DATA 25,30
003FE:  DATA 32,75
00400:  DATA 3A,25
00402:  DATA 30,32
00404:  DATA 75,3A
00406:  DATA 25,30
00408:  DATA 32,75
0040A:  DATA 00,00
0040C:  DATA 54,69
0040E:  DATA 6D,65
00410:  DATA 20,63
00412:  DATA 68,61
00414:  DATA 6E,67
00416:  DATA 69,6E
00418:  DATA 67,20
0041A:  DATA 66,75
0041C:  DATA 6E,63
0041E:  DATA 74,69
00420:  DATA 6F,6E
00422:  DATA 20,61
00424:  DATA 63,74
00426:  DATA 69,76
00428:  DATA 61,74
0042A:  DATA 65,64
0042C:  DATA 0A,00
0042E:  DATA 54,69
00430:  DATA 6D,65
00432:  DATA 20,73
00434:  DATA 75,63
00436:  DATA 63,65
00438:  DATA 73,73
0043A:  DATA 66,75
0043C:  DATA 6C,6C
0043E:  DATA 79,20
00440:  DATA 63,68
00442:  DATA 61,6E
00444:  DATA 67,65
00446:  DATA 64,2E
00448:  DATA 20,43
0044A:  DATA 75,72
0044C:  DATA 72,65
0044E:  DATA 6E,74
00450:  DATA 20,74
00452:  DATA 69,6D
00454:  DATA 65,20
00456:  DATA 69,73
00458:  DATA 3A,0A
0045A:  DATA 00,00
0045C:  DATA 0D,25
0045E:  DATA 30,32
00460:  DATA 75,2F
00462:  DATA 25,30
00464:  DATA 32,75
00466:  DATA 2F,32
00468:  DATA 30,25
0046A:  DATA 30,32
0046C:  DATA 75,20
0046E:  DATA 25,30
00470:  DATA 32,75
00472:  DATA 3A,25
00474:  DATA 30,32
00476:  DATA 75,3A
00478:  DATA 25,30
0047A:  DATA 32,75
0047C:  DATA 00,00
0047E:  DATA 49,4F
00480:  DATA 20,63
00482:  DATA 6F,6E
00484:  DATA 74,72
00486:  DATA 6F,6C
00488:  DATA 20,63
0048A:  DATA 68,6F
0048C:  DATA 73,65
0048E:  DATA 6E,0A
00490:  DATA 00,00
00492:  DATA 20,20
00494:  DATA 20,20
00496:  DATA 70,72
00498:  DATA 65,73
0049A:  DATA 73,20
0049C:  DATA 61,3A
0049E:  DATA 20,54
004A0:  DATA 6F,67
004A2:  DATA 67,6C
004A4:  DATA 65,20
004A6:  DATA 45,4E
004A8:  DATA 5F,53
004AA:  DATA 55,50
004AC:  DATA 5F,33
004AE:  DATA 56,33
004B0:  DATA 5F,31
004B2:  DATA 0A,00
004B4:  DATA 20,20
004B6:  DATA 20,20
004B8:  DATA 70,72
004BA:  DATA 65,73
004BC:  DATA 73,20
004BE:  DATA 62,3A
004C0:  DATA 20,54
004C2:  DATA 6F,67
004C4:  DATA 67,6C
004C6:  DATA 65,20
004C8:  DATA 45,4E
004CA:  DATA 5F,53
004CC:  DATA 55,50
004CE:  DATA 5F,55
004D0:  DATA 4E,52
004D2:  DATA 45,47
004D4:  DATA 0A,00
004D6:  DATA 20,20
004D8:  DATA 20,20
004DA:  DATA 70,72
004DC:  DATA 65,73
004DE:  DATA 73,20
004E0:  DATA 78,3A
004E2:  DATA 20,52
004E4:  DATA 65,74
004E6:  DATA 75,72
004E8:  DATA 6E,20
004EA:  DATA 74,6F
004EC:  DATA 20,4D
004EE:  DATA 41,49
004F0:  DATA 4E,20
004F2:  DATA 4D,45
004F4:  DATA 4E,55
004F6:  DATA 0A,00
004F8:  DATA 49,6E
004FA:  DATA 76,61
004FC:  DATA 6C,69
004FE:  DATA 64,20
00500:  DATA 49,4F
00502:  DATA 20,6F
00504:  DATA 70,74
00506:  DATA 69,6F
00508:  DATA 6E,2E
0050A:  DATA 20,50
0050C:  DATA 6C,65
0050E:  DATA 61,73
00510:  DATA 65,20
00512:  DATA 74,72
00514:  DATA 79,20
00516:  DATA 61,67
00518:  DATA 61,69
0051A:  DATA 6E,2E
0051C:  DATA 0A,00
0051E:  DATA 0A,2D
00520:  DATA 2D,2D
00522:  DATA 2D,2D
00524:  DATA 2D,2D
00526:  DATA 2D,2D
00528:  DATA 2D,2D
0052A:  DATA 2D,2D
0052C:  DATA 2D,2D
0052E:  DATA 2D,2D
00530:  DATA 4D,61
00532:  DATA 69,6E
00534:  DATA 20,4D
00536:  DATA 65,6E
00538:  DATA 75,2D
0053A:  DATA 2D,2D
0053C:  DATA 2D,2D
0053E:  DATA 2D,2D
00540:  DATA 2D,2D
00542:  DATA 2D,2D
00544:  DATA 2D,2D
00546:  DATA 2D,2D
00548:  DATA 2D,2D
0054A:  DATA 0A,00
0054C:  DATA 20,20
0054E:  DATA 20,20
00550:  DATA 70,72
00552:  DATA 65,73
00554:  DATA 73,20
00556:  DATA 61,3A
00558:  DATA 20,47
0055A:  DATA 65,74
0055C:  DATA 20,48
0055E:  DATA 6F,75
00560:  DATA 73,65
00562:  DATA 20,6B
00564:  DATA 65,65
00566:  DATA 70,69
00568:  DATA 6E,67
0056A:  DATA 20,64
0056C:  DATA 61,74
0056E:  DATA 61,0A
00570:  DATA 00,00
00572:  DATA 20,20
00574:  DATA 20,20
00576:  DATA 70,72
00578:  DATA 65,73
0057A:  DATA 73,20
0057C:  DATA 62,3A
0057E:  DATA 20,45
00580:  DATA 50,53
00582:  DATA 20,50
00584:  DATA 6F,77
00586:  DATA 65,72
00588:  DATA 20,6F
0058A:  DATA 75,74
0058C:  DATA 70,75
0058E:  DATA 74,20
00590:  DATA 63,6F
00592:  DATA 6E,74
00594:  DATA 72,6F
00596:  DATA 6C,0A
00598:  DATA 00,00
0059A:  DATA 20,20
0059C:  DATA 20,20
0059E:  DATA 70,72
005A0:  DATA 65,73
005A2:  DATA 73,20
005A4:  DATA 63,3A
005A6:  DATA 20,48
005A8:  DATA 6F,75
005AA:  DATA 73,65
005AC:  DATA 20,6B
005AE:  DATA 65,65
005B0:  DATA 70,69
005B2:  DATA 6E,67
005B4:  DATA 20,64
005B6:  DATA 61,74
005B8:  DATA 61,20
005BA:  DATA 63,6F
005BC:  DATA 6C,6C
005BE:  DATA 65,63
005C0:  DATA 74,69
005C2:  DATA 6F,6E
005C4:  DATA 0A,00
005C6:  DATA 20,20
005C8:  DATA 20,20
005CA:  DATA 70,72
005CC:  DATA 65,73
005CE:  DATA 73,20
005D0:  DATA 64,3A
005D2:  DATA 20,43
005D4:  DATA 68,65
005D6:  DATA 63,6B
005D8:  DATA 20,46
005DA:  DATA 6C,61
005DC:  DATA 73,68
005DE:  DATA 20,4D
005E0:  DATA 65,6D
005E2:  DATA 6F,72
005E4:  DATA 69,65
005E6:  DATA 73,0A
005E8:  DATA 00,00
005EA:  DATA 20,20
005EC:  DATA 20,20
005EE:  DATA 70,72
005F0:  DATA 65,73
005F2:  DATA 73,20
005F4:  DATA 65,3A
005F6:  DATA 20,53
005F8:  DATA 65,65
005FA:  DATA 20,73
005FC:  DATA 61,74
005FE:  DATA 65,6C
00600:  DATA 6C,69
00602:  DATA 74,65
00604:  DATA 20,4C
00606:  DATA 6F,67
00608:  DATA 0A,00
0060A:  DATA 20,20
0060C:  DATA 20,20
0060E:  DATA 70,72
00610:  DATA 65,73
00612:  DATA 73,20
00614:  DATA 66,3A
00616:  DATA 20,53
00618:  DATA 65,74
0061A:  DATA 20,74
0061C:  DATA 69,6D
0061E:  DATA 65,20
00620:  DATA 6F,66
00622:  DATA 20,52
00624:  DATA 54,43
00626:  DATA 0A,00
00628:  DATA 20,20
0062A:  DATA 20,20
0062C:  DATA 70,72
0062E:  DATA 65,73
00630:  DATA 73,20
00632:  DATA 67,3A
00634:  DATA 20,53
00636:  DATA 61,74
00638:  DATA 65,6C
0063A:  DATA 6C,69
0063C:  DATA 74,65
0063E:  DATA 20,6C
00640:  DATA 6F,67
00642:  DATA 20,64
00644:  DATA 6F,77
00646:  DATA 6E,6C
00648:  DATA 69,6E
0064A:  DATA 6B,20
0064C:  DATA 63,6F
0064E:  DATA 6D,6D
00650:  DATA 61,6E
00652:  DATA 64,0A
00654:  DATA 00,00
00656:  DATA 20,20
00658:  DATA 20,20
0065A:  DATA 70,72
0065C:  DATA 65,73
0065E:  DATA 73,20
00660:  DATA 68,3A
00662:  DATA 20,49
00664:  DATA 48,43
00666:  DATA 20,4D
00668:  DATA 69,73
0066A:  DATA 73,69
0066C:  DATA 6F,6E
0066E:  DATA 20,73
00670:  DATA 74,61
00672:  DATA 72,74
00674:  DATA 0A,00
00676:  DATA 20,20
00678:  DATA 20,20
0067A:  DATA 70,72
0067C:  DATA 65,73
0067E:  DATA 73,20
00680:  DATA 69,3A
00682:  DATA 20,53
00684:  DATA 45,4C
00686:  DATA 20,63
00688:  DATA 75,72
0068A:  DATA 72,65
0068C:  DATA 6E,74
0068E:  DATA 20,4D
00690:  DATA 65,61
00692:  DATA 73,75
00694:  DATA 72,65
00696:  DATA 6D,65
00698:  DATA 6E,74
0069A:  DATA 0A,00
0069C:  DATA 20,20
0069E:  DATA 20,20
006A0:  DATA 70,72
006A2:  DATA 65,73
006A4:  DATA 73,20
006A6:  DATA 6A,3A
006A8:  DATA 20,48
006AA:  DATA 38,20
006AC:  DATA 43,4F
006AE:  DATA 4D,20
006B0:  DATA 52,65
006B2:  DATA 73,65
006B4:  DATA 74,0A
006B6:  DATA 00,00
006B8:  DATA 20,20
006BA:  DATA 20,20
006BC:  DATA 70,72
006BE:  DATA 65,73
006C0:  DATA 73,20
006C2:  DATA 6B,3A
006C4:  DATA 20,49
006C6:  DATA 4F,20
006C8:  DATA 63,6F
006CA:  DATA 6E,74
006CC:  DATA 72,6F
006CE:  DATA 6C,0A
006D0:  DATA 00,00
006D2:  DATA 20,20
006D4:  DATA 20,20
006D6:  DATA 70,72
006D8:  DATA 65,73
006DA:  DATA 73,20
006DC:  DATA 78,3A
006DE:  DATA 20,45
006E0:  DATA 78,69
006E2:  DATA 74,20
006E4:  DATA 4D,61
006E6:  DATA 69,6E
006E8:  DATA 20,4D
006EA:  DATA 65,6E
006EC:  DATA 75,0A
006EE:  DATA 00,00
006F0:  DATA 20,20
006F2:  DATA 20,20
006F4:  DATA 44,4F
006F6:  DATA 20,4E
006F8:  DATA 4F,54
006FA:  DATA 20,55
006FC:  DATA 53,45
006FE:  DATA 20,43
00700:  DATA 41,50
00702:  DATA 49,54
00704:  DATA 41,4C
00706:  DATA 20,43
00708:  DATA 48,41
0070A:  DATA 52,41
0070C:  DATA 43,54
0070E:  DATA 45,52
00710:  DATA 53,20
00712:  DATA 54,4F
00714:  DATA 20,57
00716:  DATA 52,49
00718:  DATA 54,45
0071A:  DATA 21,0A
0071C:  DATA 0A,00
0071E:  DATA 49,6E
00720:  DATA 76,61
00722:  DATA 6C,69
00724:  DATA 64,20
00726:  DATA 6F,70
00728:  DATA 74,69
0072A:  DATA 6F,6E
0072C:  DATA 2E,20
0072E:  DATA 50,6C
00730:  DATA 65,61
00732:  DATA 73,65
00734:  DATA 20,74
00736:  DATA 72,79
00738:  DATA 20,61
0073A:  DATA 67,61
0073C:  DATA 69,6E
0073E:  DATA 2E,0A
00740:  DATA 00,00
00742:  DATA 73,74
00744:  DATA 61,72
00746:  DATA 74,5F
00748:  DATA 77,72
0074A:  DATA 69,74
0074C:  DATA 69,6E
0074E:  DATA 67,0A
00750:  DATA 00,00
00752:  DATA 50,4F
00754:  DATA 57,45
00756:  DATA 52,20
00758:  DATA 4F,4E
0075A:  DATA 21,0A
0075C:  DATA 00,00
0075E:  DATA 50,4F
00760:  DATA 57,45
00762:  DATA 52,20
00764:  DATA 4F,4E
00766:  DATA 21,0A
00768:  DATA 00,00
0076A:  DATA 44,6F
0076C:  DATA 6E,65
0076E:  DATA 20,72
00770:  DATA 65,61
00772:  DATA 64,69
00774:  DATA 6E,67
00776:  DATA 20,63
00778:  DATA 68,69
0077A:  DATA 70,20
0077C:  DATA 49,44
0077E:  DATA 0A,00
00780:  DATA 42,79
00782:  DATA 74,65
00784:  DATA 20,73
00786:  DATA 61,76
00788:  DATA 65,64
0078A:  DATA 0A,00
0078C:  DATA 52,65
0078E:  DATA 61,64
00790:  DATA 69,6E
00792:  DATA 67,20
00794:  DATA 64,65
00796:  DATA 73,69
00798:  DATA 72,65
0079A:  DATA 64,20
0079C:  DATA 61,64
0079E:  DATA 64,72
007A0:  DATA 65,73
007A2:  DATA 73,0A
007A4:  DATA 00,00
007A6:  DATA 52,65
007A8:  DATA 61,64
007AA:  DATA 69,6E
007AC:  DATA 67,2E
007AE:  DATA 2E,2E
007B0:  DATA 20,0A
007B2:  DATA 00,00
007B4:  DATA 65,78
007B6:  DATA 69,74
007B8:  DATA 69,6E
007BA:  DATA 67,20
007BC:  DATA 6D,61
007BE:  DATA 69,6E
007C0:  DATA 20,6D
007C2:  DATA 65,6E
007C4:  DATA 75,20
007C6:  DATA 66,75
007C8:  DATA 6E,63
007CA:  DATA 74,69
007CC:  DATA 6F,6E
007CE:  DATA 00,00
*
00814:  TBLRD*+
00816:  MOVF   FF5,F
00818:  BZ    083A
0081A:  MOVFF  FF6,87
0081E:  MOVFF  FF7,88
00822:  MOVFF  FF8,89
00826:  MOVFF  FF5,8A
0082A:  BRA    07D0
0082C:  MOVFF  87,FF6
00830:  MOVFF  88,FF7
00834:  MOVFF  89,FF8
00838:  BRA    0814
0083A:  GOTO   11D4 (RETURN)
*
00880:  TBLRD*+
00882:  MOVF   FF5,F
00884:  BZ    08A6
00886:  MOVFF  FF6,9A
0088A:  MOVFF  FF7,9B
0088E:  MOVFF  FF8,9C
00892:  MOVFF  FF5,9E
00896:  RCALL  083E
00898:  MOVFF  9A,FF6
0089C:  MOVFF  9B,FF7
008A0:  MOVFF  9C,FF8
008A4:  BRA    0880
008A6:  RETURN 0
008A8:  MOVWF  00
008AA:  SWAPF  00,W
008AC:  ANDLW  0F
008AE:  MULLW  0A
008B0:  MOVF   00,W
008B2:  ANDLW  0F
008B4:  ADDWF  FF3,W
008B6:  RETURN 0
008B8:  RETURN 0
*
0095C:  TBLRD*+
0095E:  MOVFF  FF6,9B
00962:  MOVFF  FF7,9C
00966:  MOVFF  FF8,9D
0096A:  MOVFF  FF5,9E
0096E:  RCALL  083E
00970:  MOVFF  9B,FF6
00974:  MOVFF  9C,FF7
00978:  MOVFF  9D,FF8
0097C:  DECFSZ x9A,F
0097E:  BRA    095C
00980:  RETURN 0
00982:  BTFSC  x95.7
00984:  BRA    09A4
00986:  MOVLW  0F
00988:  MOVWF  00
0098A:  SWAPF  x94,W
0098C:  ANDWF  00,F
0098E:  MOVLW  0A
00990:  SUBWF  00,W
00992:  BC    099A
00994:  MOVLW  30
00996:  ADDWF  00,F
00998:  BRA    099E
0099A:  MOVF   x95,W
0099C:  ADDWF  00,F
0099E:  MOVFF  00,9E
009A2:  RCALL  083E
009A4:  MOVLW  0F
009A6:  ANDWF  x94,F
009A8:  MOVLW  0A
009AA:  SUBWF  x94,W
009AC:  BC    09B2
009AE:  MOVLW  30
009B0:  BRA    09B6
009B2:  BCF    x95.7
009B4:  MOVF   x95,W
009B6:  ADDWF  x94,F
009B8:  MOVFF  94,9E
009BC:  RCALL  083E
009BE:  RETURN 0
*
009DA:  MOVF   x9D,W
009DC:  CLRF   01
009DE:  SUBWF  x9C,W
009E0:  BC    09E8
009E2:  MOVFF  9C,00
009E6:  BRA    0A00
009E8:  CLRF   00
009EA:  MOVLW  08
009EC:  MOVWF  x9E
009EE:  RLCF   x9C,F
009F0:  RLCF   00,F
009F2:  MOVF   x9D,W
009F4:  SUBWF  00,W
009F6:  BTFSC  FD8.0
009F8:  MOVWF  00
009FA:  RLCF   01,F
009FC:  DECFSZ x9E,F
009FE:  BRA    09EE
00A00:  RETURN 0
00A02:  MOVLW  20
00A04:  BTFSS  x94.4
00A06:  MOVLW  30
00A08:  MOVWF  x95
00A0A:  MOVFF  93,00
00A0E:  BTFSS  x93.7
00A10:  BRA    0A22
00A12:  COMF   00,F
00A14:  INCF   00,F
00A16:  MOVFF  00,93
00A1A:  MOVLW  2D
00A1C:  MOVWF  x95
00A1E:  BSF    x94.7
00A20:  BSF    x94.0
00A22:  MOVF   01,W
00A24:  MOVFF  93,9C
00A28:  MOVLW  64
00A2A:  MOVWF  x9D
00A2C:  RCALL  09DA
00A2E:  MOVFF  00,93
00A32:  MOVLW  30
00A34:  ADDWF  01,W
00A36:  MOVWF  x96
00A38:  MOVFF  93,9C
00A3C:  MOVLW  0A
00A3E:  MOVWF  x9D
00A40:  RCALL  09DA
00A42:  MOVLW  30
00A44:  ADDWF  00,W
00A46:  MOVWF  x98
00A48:  MOVLW  30
00A4A:  ADDWF  01,W
00A4C:  MOVWF  x97
00A4E:  MOVFF  95,00
00A52:  MOVLW  30
00A54:  SUBWF  x96,W
00A56:  BZ    0A60
00A58:  BSF    x94.1
00A5A:  BTFSC  x94.7
00A5C:  BSF    x94.2
00A5E:  BRA    0A84
00A60:  MOVFF  95,96
00A64:  MOVLW  20
00A66:  MOVWF  x95
00A68:  MOVLW  30
00A6A:  SUBWF  x97,W
00A6C:  BZ    0A76
00A6E:  BSF    x94.0
00A70:  BTFSC  x94.7
00A72:  BSF    x94.1
00A74:  BRA    0A84
00A76:  BTFSS  FD8.2
00A78:  BSF    x94.0
00A7A:  BNZ   0A84
00A7C:  MOVFF  96,97
00A80:  MOVLW  20
00A82:  MOVWF  x96
00A84:  BTFSC  x94.2
00A86:  BRA    0A92
00A88:  BTFSC  x94.1
00A8A:  BRA    0A98
00A8C:  BTFSC  x94.0
00A8E:  BRA    0A9E
00A90:  BRA    0AA4
00A92:  MOVFF  95,9E
00A96:  RCALL  083E
00A98:  MOVFF  96,9E
00A9C:  RCALL  083E
00A9E:  MOVFF  97,9E
00AA2:  RCALL  083E
00AA4:  MOVFF  98,9E
00AA8:  RCALL  083E
00AAA:  GOTO   0BAA (RETURN)
*
00D42:  MOVF   01,W
00D44:  MOVFF  9A,9C
00D48:  MOVLW  64
00D4A:  MOVWF  x9D
00D4C:  RCALL  09DA
00D4E:  MOVFF  00,9A
00D52:  MOVF   01,W
00D54:  MOVLW  30
00D56:  BNZ   0D66
00D58:  BTFSS  x9B.1
00D5A:  BRA    0D74
00D5C:  BTFSC  x9B.3
00D5E:  BRA    0D74
00D60:  BTFSC  x9B.4
00D62:  MOVLW  20
00D64:  BRA    0D6C
00D66:  BCF    x9B.3
00D68:  BCF    x9B.4
00D6A:  BSF    x9B.0
00D6C:  ADDWF  01,F
00D6E:  MOVFF  01,9E
00D72:  RCALL  083E
00D74:  MOVFF  9A,9C
00D78:  MOVLW  0A
00D7A:  MOVWF  x9D
00D7C:  RCALL  09DA
00D7E:  MOVFF  00,9A
00D82:  MOVF   01,W
00D84:  MOVLW  30
00D86:  BNZ   0D94
00D88:  BTFSC  x9B.3
00D8A:  BRA    0D9C
00D8C:  BTFSS  x9B.0
00D8E:  BRA    0D9C
00D90:  BTFSC  x9B.4
00D92:  MOVLW  20
00D94:  ADDWF  01,F
00D96:  MOVFF  01,9E
00D9A:  RCALL  083E
00D9C:  MOVLW  30
00D9E:  ADDWF  x9A,F
00DA0:  MOVFF  9A,9E
00DA4:  RCALL  083E
00DA6:  RETURN 0
00DA8:  MOVWF  00
00DAA:  SWAPF  00,W
00DAC:  ADDWF  00,W
00DAE:  ANDLW  0F
00DB0:  BTFSC  FD8.1
00DB2:  ADDLW  16
00DB4:  DAW   
00DB6:  BTFSC  00.4
00DB8:  ADDLW  15
00DBA:  BTFSC  00.5
00DBC:  ADDLW  30
00DBE:  BTFSC  00.6
00DC0:  ADDLW  60
00DC2:  BTFSC  00.7
00DC4:  ADDLW  20
00DC6:  DAW   
00DC8:  RETURN 0
00DCA:  RETURN 0
.................... 
.................... #list
.................... 
.................... #device ADC=16
.................... #device ICD=TRUE
.................... 
.................... #use delay(CLOCK=16M, CRYSTAL=16M)
.................... 
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.................... #use rs232(baud=9600, parity=N, xmit=PIN_E5, rcv=PIN_E4, bits=8, stream=EPS) //EPS DATA ACQUISITION
*
007D0:  BCF    F96.5
007D2:  BCF    F8D.5
007D4:  MOVLW  08
007D6:  MOVWF  01
007D8:  BRA    07DA
007DA:  NOP   
007DC:  BSF    01.7
007DE:  BRA    07FC
007E0:  BCF    01.7
007E2:  RRCF   x8A,F
007E4:  BTFSC  FD8.0
007E6:  BSF    F8D.5
007E8:  BTFSS  FD8.0
007EA:  BCF    F8D.5
007EC:  BSF    01.6
007EE:  BRA    07FC
007F0:  BCF    01.6
007F2:  DECFSZ 01,F
007F4:  BRA    07E2
007F6:  BRA    07F8
007F8:  NOP   
007FA:  BSF    F8D.5
007FC:  MOVLW  84
007FE:  MOVWF  FE9
00800:  DECFSZ FE9,F
00802:  BRA    0800
00804:  BRA    0806
00806:  NOP   
00808:  BTFSC  01.7
0080A:  BRA    07E0
0080C:  BTFSC  01.6
0080E:  BRA    07F0
00810:  GOTO   082C (RETURN)
.................... #use rs232(baud=9600, parity=N, xmit=PIN_C6, rcv=PIN_C7, bits=8, stream=EXT) //MAIN RAB Rear access board 
*
0083E:  BCF    F94.6
00840:  BCF    F8B.6
00842:  MOVLW  08
00844:  MOVWF  01
00846:  BRA    0848
00848:  NOP   
0084A:  BSF    01.7
0084C:  BRA    086A
0084E:  BCF    01.7
00850:  RRCF   x9E,F
00852:  BTFSC  FD8.0
00854:  BSF    F8B.6
00856:  BTFSS  FD8.0
00858:  BCF    F8B.6
0085A:  BSF    01.6
0085C:  BRA    086A
0085E:  BCF    01.6
00860:  DECFSZ 01,F
00862:  BRA    0850
00864:  BRA    0866
00866:  NOP   
00868:  BSF    F8B.6
0086A:  MOVLW  84
0086C:  MOVWF  FE9
0086E:  DECFSZ FE9,F
00870:  BRA    086E
00872:  BRA    0874
00874:  NOP   
00876:  BTFSC  01.7
00878:  BRA    084E
0087A:  BTFSC  01.6
0087C:  BRA    085E
0087E:  RETURN 0
*
00C6C:  BSF    F94.7
00C6E:  BTFSC  F82.7
00C70:  BRA    0C6E
00C72:  MOVLW  08
00C74:  MOVWF  00
00C76:  CLRF   x89
00C78:  BSF    00.7
00C7A:  BRA    0C98
00C7C:  BCF    00.7
00C7E:  BRA    0C98
00C80:  BCF    FD8.0
00C82:  BTFSC  F82.7
00C84:  BSF    FD8.0
00C86:  RRCF   x89,F
00C88:  BSF    00.6
00C8A:  BRA    0C98
00C8C:  BCF    00.6
00C8E:  DECFSZ 00,F
00C90:  BRA    0C80
00C92:  MOVFF  89,01
00C96:  BRA    0CB0
00C98:  MOVLW  84
00C9A:  BTFSC  00.7
00C9C:  MOVLW  24
00C9E:  MOVWF  01
00CA0:  DECFSZ 01,F
00CA2:  BRA    0CA0
00CA4:  BRA    0CA6
00CA6:  BTFSC  00.7
00CA8:  BRA    0C7C
00CAA:  BTFSC  00.6
00CAC:  BRA    0C8C
00CAE:  BRA    0C80
00CB0:  RETURN 0
.................... #use rs232(baud=9600, parity=N, xmit=PIN_D2, rcv=PIN_D3, bits=8, stream=COM, FORCE_SW) //MAIN COM Communication, send CW data 
.................... #use rs232(baud=9600, parity=N, xmit=PIN_F7, rcv=PIN_F6, bits=8, stream=CAM, FORCE_SW) //MAIN CAM Communicationx
.................... #use spi(MASTER, CLK=PIN_E1, DI=PIN_E0, DO=PIN_E6,  BAUD=10000, BITS=8, STREAM=MAIN_FM, MODE=0) //MAIN flash memory port
*
008BA:  MOVF   x96,W
008BC:  SUBLW  08
008BE:  BZ    08C8
008C0:  MOVWF  x98
008C2:  RLCF   x95,F
008C4:  DECFSZ x98,F
008C6:  BRA    08C2
008C8:  BSF    F96.0
008CA:  BCF    F96.6
008CC:  BCF    F96.1
008CE:  BCF    F8D.1
008D0:  MOVFF  96,98
008D4:  BTFSS  x95.7
008D6:  BCF    F8D.6
008D8:  BTFSC  x95.7
008DA:  BSF    F8D.6
008DC:  RLCF   x95,F
008DE:  BSF    F8D.1
008E0:  MOVLW  41
008E2:  MOVWF  x99
008E4:  DECFSZ x99,F
008E6:  BRA    08E4
008E8:  RLCF   01,F
008EA:  BTFSS  F84.0
008EC:  BCF    01.0
008EE:  BTFSC  F84.0
008F0:  BSF    01.0
008F2:  BCF    F8D.1
008F4:  MOVLW  40
008F6:  MOVWF  x99
008F8:  DECFSZ x99,F
008FA:  BRA    08F8
008FC:  DECFSZ x98,F
008FE:  BRA    08D4
00900:  RETURN 0
.................... #use spi(MASTER, CLK=PIN_B2, DI=PIN_B5, DO=PIN_B4,  BAUD=10000, BITS=8, STREAM=COM_FM, MODE=0) //COM shared flash memory port
.................... #use spi(MASTER, CLK=PIN_A3, DI=PIN_A0, DO=PIN_A1,  BAUD=10000, BITS=8, STREAM=ADCS_FM, MODE=0) //ADCS shared flash memory port, Camera module (ovcam,mvcam)
.................... ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
....................     
.................... #define SPIPORT MAIN_FM
.................... #define SPIPORT2 COM_FM
.................... #define SPIPORT3 ADCS_FM    
....................     
.................... #define CS_PIN_1 PIN_E2 //OBC_FLASH_SELECT
.................... #define CS_PIN_2 PIN_B3 //COM_CHIP_SELECT
.................... #define CS_PIN_3 PIN_A2 //ADCS_CHIP_SELECT
.................... #define MX_PIN_1 PIN_G2 //OVCAM_MUX_SELECT
.................... #define MX_PIN_2 PIN_G3 //MVCAM_MUX_SELECT
.................... #define MX_PIN_3 PIN_A5 //ADCS_MUX_SELECT
.................... #define MX_PIN_4 PIN_C4 //COM_MUX_SELECT
.................... 
.................... 
.................... 
.................... #define READ_ID              0x9F
.................... #define READ_STATUS_REG      0x05 
.................... #define READ_DATA_BYTES      0x13  //0x03 for byte
.................... #define ENABLE_WRITE         0x06
.................... #define WRITE_PAGE           0x12  //0x02 for 3byte
.................... #define ERASE_SECTOR         0xDC  //0xD8 for 3byte
.................... #define ERASE_4KB_SUBSECTOR  0x21
.................... #define ERASE_32KB_SUBSECTOR 0x5C
.................... #define DIE_ERASE            0xC4
.................... #define FAST_READ            0x0B
.................... 
.................... 
.................... #define EN_SUP_3V3_1 PIN_B0
.................... #define EN_SUP_UNREG PIN_B1
.................... #define EN_SUP_3V3_DAQ PIN_D0
.................... #define EN_SUP_5V0 PIN_D1
....................     
.................... void WRITE_ENABLE_OF(){
....................  output_low(CS_PIN_1);
*
009C0:  BCF    F96.2
009C2:  BCF    F8D.2
....................  
....................  spi_xfer(SPIPORT,ENABLE_WRITE);                //Send 0x06
009C4:  MOVLW  06
009C6:  MOVWF  x95
009C8:  MOVLW  08
009CA:  MOVWF  x96
009CC:  MOVLW  01
009CE:  MOVWF  x97
009D0:  RCALL  08BA
....................  output_high(CS_PIN_1);  
009D2:  BCF    F96.2
009D4:  BSF    F8D.2
....................  return;
009D6:  GOTO   0B00 (RETURN)
.................... }
.................... 
.................... void WRITE_ENABLE_OF_COM(){
....................  output_low(CS_PIN_2);
....................  
....................  spi_xfer(SPIPORT,ENABLE_WRITE);                //Send 0x06
....................  output_high(CS_PIN_2);  
....................  return;
.................... }
.................... 
.................... void WRITE_DATA_NBYTES(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS: 0x%08lx\n", ADDRESS);  // Print address as hex
*
00AAE:  MOVLW  06
00AB0:  MOVWF  FF6
00AB2:  MOVLW  00
00AB4:  MOVWF  FF7
00AB6:  MOVLW  00
00AB8:  MOVWF  FF8
00ABA:  MOVLW  11
00ABC:  MOVWF  x9A
00ABE:  RCALL  095C
00AC0:  MOVFF  8A,94
00AC4:  MOVLW  57
00AC6:  MOVWF  x95
00AC8:  RCALL  0982
00ACA:  MOVFF  89,94
00ACE:  MOVLW  57
00AD0:  MOVWF  x95
00AD2:  RCALL  0982
00AD4:  MOVFF  88,94
00AD8:  MOVLW  57
00ADA:  MOVWF  x95
00ADC:  RCALL  0982
00ADE:  MOVFF  87,94
00AE2:  MOVLW  57
00AE4:  MOVWF  x95
00AE6:  RCALL  0982
00AE8:  MOVLW  0A
00AEA:  MOVWF  x9E
00AEC:  RCALL  083E
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
00AEE:  MOVFF  8A,8E
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
00AF2:  MOVFF  89,8F
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
00AF6:  MOVFF  88,90
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
00AFA:  MOVFF  87,91
....................     WRITE_ENABLE_OF();  // Enable write operation
00AFE:  BRA    09C0
.................... 
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_1);
00B00:  BCF    F96.2
00B02:  BCF    F8D.2
....................     delay_us(2);  // Small delay for stabilization
00B04:  MOVLW  02
00B06:  MOVWF  00
00B08:  DECFSZ 00,F
00B0A:  BRA    0B08
00B0C:  NOP   
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT, WRITE_PAGE);
00B0E:  MOVLW  12
00B10:  MOVWF  x95
00B12:  MOVLW  08
00B14:  MOVWF  x96
00B16:  MOVLW  01
00B18:  MOVWF  x97
00B1A:  RCALL  08BA
....................     spi_xfer(SPIPORT, adsress[0]);
00B1C:  MOVFF  8E,95
00B20:  MOVLW  08
00B22:  MOVWF  x96
00B24:  MOVLW  01
00B26:  MOVWF  x97
00B28:  RCALL  08BA
....................     spi_xfer(SPIPORT, adsress[1]);
00B2A:  MOVFF  8F,95
00B2E:  MOVLW  08
00B30:  MOVWF  x96
00B32:  MOVLW  01
00B34:  MOVWF  x97
00B36:  RCALL  08BA
....................     spi_xfer(SPIPORT, adsress[2]);
00B38:  MOVFF  90,95
00B3C:  MOVLW  08
00B3E:  MOVWF  x96
00B40:  MOVLW  01
00B42:  MOVWF  x97
00B44:  RCALL  08BA
....................     spi_xfer(SPIPORT, adsress[3]);
00B46:  MOVFF  91,95
00B4A:  MOVLW  08
00B4C:  MOVWF  x96
00B4E:  MOVLW  01
00B50:  MOVWF  x97
00B52:  RCALL  08BA
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
00B54:  CLRF   x92
00B56:  MOVF   x8D,W
00B58:  SUBWF  x92,W
00B5A:  BC    0B96
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
00B5C:  MOVF   x92,W
00B5E:  ADDWF  x8B,W
00B60:  MOVWF  FE9
00B62:  MOVLW  00
00B64:  ADDWFC x8C,W
00B66:  MOVWF  FEA
00B68:  MOVFF  FEF,95
00B6C:  MOVLW  08
00B6E:  MOVWF  x96
00B70:  MOVLW  01
00B72:  MOVWF  x97
00B74:  RCALL  08BA
....................         fprintf(EXT,"%02X ", data[i]);    // Print each byte as hex (optional)
00B76:  MOVF   x92,W
00B78:  ADDWF  x8B,W
00B7A:  MOVWF  FE9
00B7C:  MOVLW  00
00B7E:  ADDWFC x8C,W
00B80:  MOVWF  FEA
00B82:  MOVFF  FEF,94
00B86:  MOVLW  37
00B88:  MOVWF  x95
00B8A:  RCALL  0982
00B8C:  MOVLW  20
00B8E:  MOVWF  x9E
00B90:  RCALL  083E
00B92:  INCF   x92,F
00B94:  BRA    0B56
....................     }
....................     
....................     output_high(CS_PIN_1);  // Deselect SPI device
00B96:  BCF    F96.2
00B98:  BSF    F8D.2
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN!\n", data_number);
00B9A:  MOVLW  0A
00B9C:  MOVWF  x9E
00B9E:  RCALL  083E
00BA0:  MOVFF  8D,93
00BA4:  MOVLW  18
00BA6:  MOVWF  x94
00BA8:  BRA    0A02
00BAA:  MOVLW  21
00BAC:  MOVWF  FF6
00BAE:  MOVLW  00
00BB0:  MOVWF  FF7
00BB2:  MOVLW  00
00BB4:  MOVWF  FF8
00BB6:  MOVLW  10
00BB8:  MOVWF  x9A
00BBA:  RCALL  095C
00BBC:  GOTO   12AC (RETURN)
.................... 
.................... }
.................... 
.................... void WRITE_DATA_NBYTES_COM(unsigned int32 ADDRESS, unsigned int8 data[], unsigned char data_number) {
....................     fprintf(EXT,"WRITE ADDRESS: 0x%08lx\n", ADDRESS);  // Print address as hex
....................     unsigned int8 adsress[4];
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
....................     WRITE_ENABLE_OF_COM();  // Enable write operation
.................... 
....................     // Lower CS to select the SPI device
....................     output_low(CS_PIN_2);
....................     delay_us(2);  // Small delay for stabilization
....................     // Send WRITE command and address
....................     spi_xfer(SPIPORT, WRITE_PAGE);
....................     spi_xfer(SPIPORT, adsress[0]);
....................     spi_xfer(SPIPORT, adsress[1]);
....................     spi_xfer(SPIPORT, adsress[2]);
....................     spi_xfer(SPIPORT, adsress[3]);
....................     // Write data bytes
....................     for (int i = 0; i < data_number; i++) {
....................         spi_xfer(SPIPORT, data[i]);  // Send data byte
....................         fprintf(EXT,"%02X ", data[i]);    // Print each byte as hex (optional)
....................     }
....................     
....................     output_high(CS_PIN_2);  // Deselect SPI device5
....................     
....................     fprintf(EXT,"\n%d BYTES WRITTEN!\n", data_number);
.................... 
.................... }
.................... 
....................  
.................... void READ_DATA_NBYTES(unsigned int32 ADDRESS, unsigned char *Data_return, unsigned short data_number) {
....................     unsigned int8 adsress[4];
....................    
....................     // Byte extraction for a 32-bit address
....................     adsress[0]  = (unsigned int8)((ADDRESS >> 24) & 0xFF);
00BC0:  MOVFF  8A,8E
....................     adsress[1]  = (unsigned int8)((ADDRESS >> 16) & 0xFF);
00BC4:  MOVFF  89,8F
....................     adsress[2]  = (unsigned int8)((ADDRESS >> 8) & 0xFF);
00BC8:  MOVFF  88,90
....................     adsress[3]  = (unsigned int8)(ADDRESS & 0xFF);
00BCC:  MOVFF  87,91
.................... 
....................     output_low(CS_PIN_1);  // Select SPI device
00BD0:  BCF    F96.2
00BD2:  BCF    F8D.2
.................... 
....................     // Send READ DATA COMMAND (0x13 or appropriate for your flash chip)
....................     spi_xfer(SPIPORT, READ_DATA_BYTES);
00BD4:  MOVLW  13
00BD6:  MOVWF  x95
00BD8:  MOVLW  08
00BDA:  MOVWF  x96
00BDC:  MOVLW  01
00BDE:  MOVWF  x97
00BE0:  RCALL  08BA
....................     // Send address bytes
....................     spi_xfer(SPIPORT, adsress[0]);
00BE2:  MOVFF  8E,95
00BE6:  MOVLW  08
00BE8:  MOVWF  x96
00BEA:  MOVLW  01
00BEC:  MOVWF  x97
00BEE:  RCALL  08BA
....................     spi_xfer(SPIPORT, adsress[1]);
00BF0:  MOVFF  8F,95
00BF4:  MOVLW  08
00BF6:  MOVWF  x96
00BF8:  MOVLW  01
00BFA:  MOVWF  x97
00BFC:  RCALL  08BA
....................     spi_xfer(SPIPORT, adsress[2]);
00BFE:  MOVFF  90,95
00C02:  MOVLW  08
00C04:  MOVWF  x96
00C06:  MOVLW  01
00C08:  MOVWF  x97
00C0A:  RCALL  08BA
....................     spi_xfer(SPIPORT, adsress[3]);
00C0C:  MOVFF  91,95
00C10:  MOVLW  08
00C12:  MOVWF  x96
00C14:  MOVLW  01
00C16:  MOVWF  x97
00C18:  RCALL  08BA
....................     // Read the requested number of bytes
....................     for (int i = 0; i < data_number; i++) {
00C1A:  CLRF   x92
00C1C:  MOVF   x8D,W
00C1E:  SUBWF  x92,W
00C20:  BC    0C5E
....................         Data_return[i] = spi_xfer(SPIPORT, 0x00);  // Send dummy byte to receive data
00C22:  MOVF   x92,W
00C24:  ADDWF  x8B,W
00C26:  MOVWF  FE9
00C28:  MOVLW  00
00C2A:  ADDWFC x8C,W
00C2C:  MOVWF  FEA
00C2E:  CLRF   x95
00C30:  MOVLW  08
00C32:  MOVWF  x96
00C34:  MOVLW  01
00C36:  MOVWF  x97
00C38:  RCALL  08BA
00C3A:  MOVFF  01,FEF
....................         fprintf(EXT,"%02X ", Data_return[i]);           // Print each byte as hex
00C3E:  MOVF   x92,W
00C40:  ADDWF  x8B,W
00C42:  MOVWF  FE9
00C44:  MOVLW  00
00C46:  ADDWFC x8C,W
00C48:  MOVWF  FEA
00C4A:  MOVFF  FEF,94
00C4E:  MOVLW  37
00C50:  MOVWF  x95
00C52:  RCALL  0982
00C54:  MOVLW  20
00C56:  MOVWF  x9E
00C58:  RCALL  083E
00C5A:  INCF   x92,F
00C5C:  BRA    0C1C
....................     }
.................... 
....................     output_high(CS_PIN_1);  // Deselect SPI device after reading
00C5E:  BCF    F96.2
00C60:  BSF    F8D.2
....................     fprintf(EXT,"\n");
00C62:  MOVLW  0A
00C64:  MOVWF  x9E
00C66:  RCALL  083E
00C68:  GOTO   12F2 (RETURN)
.................... }
.................... 
.................... 
.................... int8 READ_CHIP_ID_OF()
.................... {
....................  output_low(CS_PIN_1);           //lower the CS PIN
*
00902:  BCF    F96.2
00904:  BCF    F8D.2
....................  
....................  ////////////////////////////////////////////////////////////////
....................  int8 chip_id;
....................  spi_xfer(SPIPORT,READ_ID);    //READ ID COMAND   (0x9F)
00906:  MOVLW  9F
00908:  MOVWF  x95
0090A:  MOVLW  08
0090C:  MOVWF  x96
0090E:  MOVLW  01
00910:  MOVWF  x97
00912:  RCALL  08BA
....................  chip_id = spi_xfer(SPIPORT);
00914:  MOVLW  01
00916:  MOVWF  x95
00918:  MOVLW  08
0091A:  MOVWF  x96
0091C:  MOVLW  01
0091E:  MOVWF  x97
00920:  RCALL  08BA
00922:  MOVFF  01,87
....................  ////////////////////////////////////////////////////////////////
....................  
....................  output_high(CS_PIN_1);         //take CS PIN higher back
00926:  BCF    F96.2
00928:  BSF    F8D.2
....................  
....................  return chip_id;
0092A:  MOVFF  87,01
0092E:  GOTO   124C (RETURN)
.................... }
.................... 
.................... 
.................... //#define SHUTDOWN_COUNT_ADDRESS  0x00000500  // Address where shutdown count is stored
.................... //
.................... //
.................... //int8 update_shutdown_count(void) {
.................... //    fprintf(EXT,"Shutdown count started\n");
.................... //
.................... //    unsigned int8 shutdown_count[1];  
.................... //    READ_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
.................... //    delay_ms(10);
.................... //
.................... //    // Check if the shutdown count is uninitialized
.................... //    if (shutdown_count[0] == 0xFF) {
.................... //        shutdown_count[0] = 0;  // Initialize to 0 if uninitialized
.................... //        fprintf(EXT,"Shutdown count uninitialized, setting to 0\n");
.................... //    }
.................... //
.................... //    shutdown_count[0] += 1;  // Increment the shutdown count
.................... //    WRITE_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
.................... //    delay_ms(10);
.................... //
.................... //    // Print the updated shutdown count
.................... //    fprintf(EXT,"Shutdown count: %u\n", shutdown_count[0]);
.................... //    return shutdown_count[0];
.................... //}
.................... 
.................... 
.................... void set_clock(rtc_time_t &date_time)
.................... {
.................... 
....................    date_time.tm_year=00;
*
00E80:  CLRF   x88
....................    date_time.tm_mon=00;
00E82:  CLRF   x8B
....................    date_time.tm_mday=00;
00E84:  CLRF   x8A
....................    date_time.tm_wday=00;
00E86:  CLRF   x8D
....................    date_time.tm_hour=00;
00E88:  CLRF   x8C
....................    date_time.tm_min=00;
00E8A:  CLRF   x8F
....................    date_time.tm_sec=0; 
00E8C:  CLRF   x8E
00E8E:  MOVLB  F
.................... 
.................... }
.................... //hak thuah spilt on that thang enough 
.................... // Main menu functions
.................... void handle_flash_memories() {
....................     char flash_option;
....................     fprintf(EXT, "pressed option d: Check Flash Memories\n\n");
*
00CB2:  MOVLW  5E
00CB4:  MOVWF  FF6
00CB6:  MOVLW  00
00CB8:  MOVWF  FF7
00CBA:  MOVLW  00
00CBC:  MOVWF  FF8
00CBE:  RCALL  0880
....................     fprintf(EXT, "Please choose which flash memory to work on (a, b, c):\n");
00CC0:  MOVLW  88
00CC2:  MOVWF  FF6
00CC4:  MOVLW  00
00CC6:  MOVWF  FF7
00CC8:  MOVLW  00
00CCA:  MOVWF  FF8
00CCC:  RCALL  0880
....................     fprintf(EXT, "press a: MAIN flash memory\n");
00CCE:  MOVLW  C0
00CD0:  MOVWF  FF6
00CD2:  MOVLW  00
00CD4:  MOVWF  FF7
00CD6:  MOVLW  00
00CD8:  MOVWF  FF8
00CDA:  RCALL  0880
....................     fprintf(EXT, "press b: COM shared flash memory\n");
00CDC:  MOVLW  DC
00CDE:  MOVWF  FF6
00CE0:  MOVLW  00
00CE2:  MOVWF  FF7
00CE4:  MOVLW  00
00CE6:  MOVWF  FF8
00CE8:  RCALL  0880
....................     fprintf(EXT, "press c: ADCS shared flash memory\n");
00CEA:  MOVLW  FE
00CEC:  MOVWF  FF6
00CEE:  MOVLW  00
00CF0:  MOVWF  FF7
00CF2:  MOVLW  00
00CF4:  MOVWF  FF8
00CF6:  RCALL  0880
.................... 
....................     flash_option = fgetc(EXT);
00CF8:  RCALL  0C6C
00CFA:  MOVFF  01,88
.................... 
....................     switch (flash_option) {
00CFE:  MOVF   x88,W
00D00:  XORLW  61
00D02:  BZ    0D0E
00D04:  XORLW  03
00D06:  BZ    0D10
00D08:  XORLW  01
00D0A:  BZ    0D20
00D0C:  BRA    0D30
....................         case 'a':
....................            // READ_DATA_NBYTES();
....................             break;
00D0E:  BRA    0D3E
....................         case 'b':
....................             fprintf(EXT, "COM shared flash memory chosen\n");
00D10:  MOVLW  22
00D12:  MOVWF  FF6
00D14:  MOVLW  01
00D16:  MOVWF  FF7
00D18:  MOVLW  00
00D1A:  MOVWF  FF8
00D1C:  RCALL  0880
....................             // Implement COM shared flash memory handling
....................             break;
00D1E:  BRA    0D3E
....................         case 'c':
....................             fprintf(EXT, "ADCS shared flash memory chosen\n");
00D20:  MOVLW  42
00D22:  MOVWF  FF6
00D24:  MOVLW  01
00D26:  MOVWF  FF7
00D28:  MOVLW  00
00D2A:  MOVWF  FF8
00D2C:  RCALL  0880
....................             // Implement ADCS shared flash memory handling
....................             break;
00D2E:  BRA    0D3E
....................         default:
....................             fprintf(EXT, "Invalid flash memory option. Please try again.\n");
00D30:  MOVLW  64
00D32:  MOVWF  FF6
00D34:  MOVLW  01
00D36:  MOVWF  FF7
00D38:  MOVLW  00
00D3A:  MOVWF  FF8
00D3C:  RCALL  0880
....................             break;
....................     }
00D3E:  GOTO   1110 (RETURN)
.................... }
.................... 
.................... void handle_main_flash_memory() {
....................     char main_flash_option;
....................     unsigned int32 address;
....................     unsigned char data[32];
....................     unsigned char data_length;
.................... 
....................     fprintf(EXT, "MAIN flash memory chosen\n");
....................     fprintf(EXT, "press a: Read ID of the chip\n");
....................     fprintf(EXT, "press b: Write data set in specified address\n");
....................     fprintf(EXT, "press c: Read data set in specified address\n");
....................     fprintf(EXT, "press d: Return to MAIN MENU\n");
.................... 
....................     main_flash_option = fgetc(EXT);
.................... 
....................     switch (main_flash_option) {
....................         case 'a':
....................             fprintf(EXT, "Started reading chip ID of MAIN flash memory\n");
....................             READ_CHIP_ID_OF();  // Replace with actual function
....................             break;
....................         case 'b':
....................             fprintf(EXT, "Write data set in specified address\n");
....................             fprintf(EXT, "Enter address (32-bit hexadecimal): ");
....................             scanf("%x", &address);
....................             fprintf(EXT, "Enter data length (1 to 32): ");
.................... //            scanf("%d", &data_length);
....................             fprintf(EXT, "Enter data bytes (space-separated hexadecimal values): ");
....................             for (unsigned char i = 0; i < data_length; i++) {
....................                 scanf("%x", &data[i]);
....................             }
....................             WRITE_DATA_NBYTES(address, data, data_length);
....................             fprintf(EXT, "Data written to specified address.\n");
....................             break;
....................         case 'c':
....................             fprintf(EXT, "Read data set in specified address\n");
....................             fprintf(EXT, "Enter your specified address: ");
....................             scanf("%x", &address);
....................             fprintf(EXT, "Enter your specified address length : ");
.................... //            scanf("%d", &data_length);
.................... //            READ_DATA_NBYTES(address,data_length);  // Replace with actual function
....................             break;
....................         case 'd':
....................             return;
....................         default:
....................             fprintf(EXT, "Invalid MAIN flash memory option. Please try again.\n");
....................             break;
....................     }
.................... }
.................... 
.................... void handle_set_time() {
....................     rtc_time_t write_clock, read_clock;
....................     rtc_read(&read_clock);
*
00DCC:  MOVLB  F
00DCE:  BSF    x5F.0
00DD0:  BSF    x5F.1
00DD2:  CLRF   FEA
00DD4:  MOVLW  91
00DD6:  MOVWF  FE9
00DD8:  MOVLW  04
00DDA:  MOVWF  01
00DDC:  MOVF   x5C,W
00DDE:  MOVLB  0
00DE0:  RCALL  08A8
00DE2:  MOVWF  FEE
00DE4:  MOVLB  F
00DE6:  MOVF   x5D,W
00DE8:  MOVLB  0
00DEA:  RCALL  08A8
00DEC:  MOVWF  FEE
00DEE:  DECFSZ 01,F
00DF0:  BRA    0DF4
00DF2:  BRA    0DF8
00DF4:  MOVLB  F
00DF6:  BRA    0DDC
....................     fprintf(EXT, "Now time is\n");
00DF8:  MOVLW  DC
00DFA:  MOVWF  FF6
00DFC:  MOVLW  03
00DFE:  MOVWF  FF7
00E00:  MOVLW  00
00E02:  MOVWF  FF8
00E04:  RCALL  0880
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
00E06:  MOVLW  0D
00E08:  MOVWF  x9E
00E0A:  RCALL  083E
00E0C:  MOVFF  94,9A
00E10:  MOVLW  01
00E12:  MOVWF  x9B
00E14:  RCALL  0D42
00E16:  MOVLW  2F
00E18:  MOVWF  x9E
00E1A:  RCALL  083E
00E1C:  MOVFF  93,9A
00E20:  MOVLW  01
00E22:  MOVWF  x9B
00E24:  RCALL  0D42
00E26:  MOVLW  F4
00E28:  MOVWF  FF6
00E2A:  MOVLW  03
00E2C:  MOVWF  FF7
00E2E:  MOVLW  00
00E30:  MOVWF  FF8
00E32:  MOVLW  03
00E34:  MOVWF  x9A
00E36:  RCALL  095C
00E38:  MOVFF  91,9A
00E3C:  MOVLW  01
00E3E:  MOVWF  x9B
00E40:  RCALL  0D42
00E42:  MOVLW  20
00E44:  MOVWF  x9E
00E46:  RCALL  083E
00E48:  MOVFF  95,9A
00E4C:  MOVLW  01
00E4E:  MOVWF  x9B
00E50:  RCALL  0D42
00E52:  MOVLW  3A
00E54:  MOVWF  x9E
00E56:  RCALL  083E
00E58:  MOVFF  98,9A
00E5C:  MOVLW  01
00E5E:  MOVWF  x9B
00E60:  RCALL  0D42
00E62:  MOVLW  3A
00E64:  MOVWF  x9E
00E66:  RCALL  083E
00E68:  MOVFF  97,9A
00E6C:  MOVLW  01
00E6E:  MOVWF  x9B
00E70:  RCALL  0D42
....................     fprintf(EXT, "Time changing function activated\n");
00E72:  MOVLW  0C
00E74:  MOVWF  FF6
00E76:  MOVLW  04
00E78:  MOVWF  FF7
00E7A:  MOVLW  00
00E7C:  MOVWF  FF8
00E7E:  RCALL  0880
....................     set_clock(write_clock);
....................     rtc_write(&write_clock);
*
00E90:  MOVLB  F
00E92:  MOVLW  55
00E94:  MOVWF  F7E
00E96:  MOVLW  AA
00E98:  MOVWF  F7E
00E9A:  BSF    x5F.5
00E9C:  BSF    x5F.0
00E9E:  BSF    x5F.1
00EA0:  CLRF   FEA
00EA2:  MOVLW  88
00EA4:  MOVWF  FE9
00EA6:  MOVLW  04
00EA8:  MOVWF  01
00EAA:  MOVF   FEE,W
00EAC:  MOVLB  0
00EAE:  RCALL  0DA8
00EB0:  MOVLB  F
00EB2:  MOVWF  x5C
00EB4:  MOVF   FEE,W
00EB6:  MOVLB  0
00EB8:  RCALL  0DA8
00EBA:  MOVLB  F
00EBC:  MOVWF  x5D
00EBE:  DECFSZ 01,F
00EC0:  BRA    0EAA
00EC2:  BCF    x5F.5
....................     fprintf(EXT, "Time successfully changed. Current time is:\n");
00EC4:  MOVLW  2E
00EC6:  MOVWF  FF6
00EC8:  MOVLW  04
00ECA:  MOVWF  FF7
00ECC:  MOVLW  00
00ECE:  MOVWF  FF8
00ED0:  MOVLB  0
00ED2:  RCALL  0880
....................     rtc_read(&read_clock);
00ED4:  MOVLB  F
00ED6:  BSF    x5F.0
00ED8:  BSF    x5F.1
00EDA:  CLRF   FEA
00EDC:  MOVLW  91
00EDE:  MOVWF  FE9
00EE0:  MOVLW  04
00EE2:  MOVWF  01
00EE4:  MOVF   x5C,W
00EE6:  MOVLB  0
00EE8:  RCALL  08A8
00EEA:  MOVWF  FEE
00EEC:  MOVLB  F
00EEE:  MOVF   x5D,W
00EF0:  MOVLB  0
00EF2:  RCALL  08A8
00EF4:  MOVWF  FEE
00EF6:  DECFSZ 01,F
00EF8:  BRA    0EFC
00EFA:  BRA    0F00
00EFC:  MOVLB  F
00EFE:  BRA    0EE4
....................     fprintf(EXT, "\r%02u/%02u/20%02u %02u:%02u:%02u", read_clock.tm_mon, read_clock.tm_mday, read_clock.tm_year, read_clock.tm_hour, read_clock.tm_min, read_clock.tm_sec);
00F00:  MOVLW  0D
00F02:  MOVWF  x9E
00F04:  RCALL  083E
00F06:  MOVFF  94,9A
00F0A:  MOVLW  01
00F0C:  MOVWF  x9B
00F0E:  RCALL  0D42
00F10:  MOVLW  2F
00F12:  MOVWF  x9E
00F14:  RCALL  083E
00F16:  MOVFF  93,9A
00F1A:  MOVLW  01
00F1C:  MOVWF  x9B
00F1E:  RCALL  0D42
00F20:  MOVLW  66
00F22:  MOVWF  FF6
00F24:  MOVLW  04
00F26:  MOVWF  FF7
00F28:  MOVLW  00
00F2A:  MOVWF  FF8
00F2C:  MOVLW  03
00F2E:  MOVWF  x9A
00F30:  RCALL  095C
00F32:  MOVFF  91,9A
00F36:  MOVLW  01
00F38:  MOVWF  x9B
00F3A:  RCALL  0D42
00F3C:  MOVLW  20
00F3E:  MOVWF  x9E
00F40:  RCALL  083E
00F42:  MOVFF  95,9A
00F46:  MOVLW  01
00F48:  MOVWF  x9B
00F4A:  RCALL  0D42
00F4C:  MOVLW  3A
00F4E:  MOVWF  x9E
00F50:  RCALL  083E
00F52:  MOVFF  98,9A
00F56:  MOVLW  01
00F58:  MOVWF  x9B
00F5A:  RCALL  0D42
00F5C:  MOVLW  3A
00F5E:  MOVWF  x9E
00F60:  RCALL  083E
00F62:  MOVFF  97,9A
00F66:  MOVLW  01
00F68:  MOVWF  x9B
00F6A:  RCALL  0D42
00F6C:  GOTO   1110 (RETURN)
.................... }
.................... 
.................... void handle_io_control() {
....................     char io_option;
.................... 
....................     fprintf(EXT, "IO control chosen\n");
00F70:  MOVLW  7E
00F72:  MOVWF  FF6
00F74:  MOVLW  04
00F76:  MOVWF  FF7
00F78:  MOVLW  00
00F7A:  MOVWF  FF8
00F7C:  RCALL  0880
....................     fprintf(EXT, "    press a: Toggle EN_SUP_3V3_1\n");
00F7E:  MOVLW  92
00F80:  MOVWF  FF6
00F82:  MOVLW  04
00F84:  MOVWF  FF7
00F86:  MOVLW  00
00F88:  MOVWF  FF8
00F8A:  RCALL  0880
....................     fprintf(EXT, "    press b: Toggle EN_SUP_UNREG\n");
00F8C:  MOVLW  B4
00F8E:  MOVWF  FF6
00F90:  MOVLW  04
00F92:  MOVWF  FF7
00F94:  MOVLW  00
00F96:  MOVWF  FF8
00F98:  RCALL  0880
....................     // Add other options as needed
....................     fprintf(EXT, "    press x: Return to MAIN MENU\n");
00F9A:  MOVLW  D6
00F9C:  MOVWF  FF6
00F9E:  MOVLW  04
00FA0:  MOVWF  FF7
00FA2:  MOVLW  00
00FA4:  MOVWF  FF8
00FA6:  RCALL  0880
.................... 
....................     io_option = fgetc(EXT);
00FA8:  RCALL  0C6C
00FAA:  MOVFF  01,88
.................... 
....................     switch (io_option) {
00FAE:  MOVF   x88,W
00FB0:  XORLW  61
00FB2:  BZ    0FBE
00FB4:  XORLW  03
00FB6:  BZ    0FC4
00FB8:  XORLW  1A
00FBA:  BZ    0FCA
00FBC:  BRA    0FCC
....................         case 'a':
....................             output_toggle(EN_SUP_3V3_1); // Implement pin toggling function
00FBE:  BCF    F93.0
00FC0:  BTG    F8A.0
....................             break;
00FC2:  BRA    0FDA
....................         case 'b':
....................             output_toggle(EN_SUP_UNREG);
00FC4:  BCF    F93.1
00FC6:  BTG    F8A.1
....................             break;
00FC8:  BRA    0FDA
....................         // Add more cases for other IO control options
....................         case 'x':
....................             return;
00FCA:  BRA    0FDA
....................         default:
....................             fprintf(EXT, "Invalid IO option. Please try again.\n");
00FCC:  MOVLW  F8
00FCE:  MOVWF  FF6
00FD0:  MOVLW  04
00FD2:  MOVWF  FF7
00FD4:  MOVLW  00
00FD6:  MOVWF  FF8
00FD8:  RCALL  0880
....................             break;
....................     }
00FDA:  GOTO   1110 (RETURN)
.................... }
.................... 
.................... void main_menu(void) {
....................     char option;
.................... //    char flash_option;           // Variable to capture flash memory option
.................... //    char main_flash_option;      // Variable to capture MAIN flash memory option
.................... //    char com_flash_option;       // Variable to capture COM flash memory option
.................... //    char adcs_flash_option;      // Variable to capture ADCS flash memory option
.................... 
.................... //    unsigned int32 address;
.................... //    unsigned char data[32]; // Maximum data length
.................... //    unsigned char data_length;
.................... 
....................     while (1) {
....................         // Display Main Menu
....................         fprintf(EXT, "\n-----------------Main Menu-----------------\n");
00FDE:  MOVLW  1E
00FE0:  MOVWF  FF6
00FE2:  MOVLW  05
00FE4:  MOVWF  FF7
00FE6:  MOVLW  00
00FE8:  MOVWF  FF8
00FEA:  RCALL  0880
....................         fprintf(EXT, "    press a: Get House keeping data\n");
00FEC:  MOVLW  4C
00FEE:  MOVWF  FF6
00FF0:  MOVLW  05
00FF2:  MOVWF  FF7
00FF4:  MOVLW  00
00FF6:  MOVWF  FF8
00FF8:  RCALL  0880
....................         fprintf(EXT, "    press b: EPS Power output control\n");
00FFA:  MOVLW  72
00FFC:  MOVWF  FF6
00FFE:  MOVLW  05
01000:  MOVWF  FF7
01002:  MOVLW  00
01004:  MOVWF  FF8
01006:  RCALL  0880
....................         fprintf(EXT, "    press c: House keeping data collection\n");
01008:  MOVLW  9A
0100A:  MOVWF  FF6
0100C:  MOVLW  05
0100E:  MOVWF  FF7
01010:  MOVLW  00
01012:  MOVWF  FF8
01014:  RCALL  0880
....................         fprintf(EXT, "    press d: Check Flash Memories\n");
01016:  MOVLW  C6
01018:  MOVWF  FF6
0101A:  MOVLW  05
0101C:  MOVWF  FF7
0101E:  MOVLW  00
01020:  MOVWF  FF8
01022:  RCALL  0880
....................         fprintf(EXT, "    press e: See satellite Log\n");
01024:  MOVLW  EA
01026:  MOVWF  FF6
01028:  MOVLW  05
0102A:  MOVWF  FF7
0102C:  MOVLW  00
0102E:  MOVWF  FF8
01030:  RCALL  0880
....................         fprintf(EXT, "    press f: Set time of RTC\n");
01032:  MOVLW  0A
01034:  MOVWF  FF6
01036:  MOVLW  06
01038:  MOVWF  FF7
0103A:  MOVLW  00
0103C:  MOVWF  FF8
0103E:  RCALL  0880
....................         fprintf(EXT, "    press g: Satellite log downlink command\n");
01040:  MOVLW  28
01042:  MOVWF  FF6
01044:  MOVLW  06
01046:  MOVWF  FF7
01048:  MOVLW  00
0104A:  MOVWF  FF8
0104C:  RCALL  0880
....................         fprintf(EXT, "    press h: IHC Mission start\n");
0104E:  MOVLW  56
01050:  MOVWF  FF6
01052:  MOVLW  06
01054:  MOVWF  FF7
01056:  MOVLW  00
01058:  MOVWF  FF8
0105A:  RCALL  0880
....................         fprintf(EXT, "    press i: SEL current Measurement\n");
0105C:  MOVLW  76
0105E:  MOVWF  FF6
01060:  MOVLW  06
01062:  MOVWF  FF7
01064:  MOVLW  00
01066:  MOVWF  FF8
01068:  RCALL  0880
....................         fprintf(EXT, "    press j: H8 COM Reset\n");
0106A:  MOVLW  9C
0106C:  MOVWF  FF6
0106E:  MOVLW  06
01070:  MOVWF  FF7
01072:  MOVLW  00
01074:  MOVWF  FF8
01076:  RCALL  0880
....................         fprintf(EXT, "    press k: IO control\n");
01078:  MOVLW  B8
0107A:  MOVWF  FF6
0107C:  MOVLW  06
0107E:  MOVWF  FF7
01080:  MOVLW  00
01082:  MOVWF  FF8
01084:  CALL   0880
....................         fprintf(EXT, "    press x: Exit Main Menu\n");
01088:  MOVLW  D2
0108A:  MOVWF  FF6
0108C:  MOVLW  06
0108E:  MOVWF  FF7
01090:  MOVLW  00
01092:  MOVWF  FF8
01094:  CALL   0880
....................         fprintf(EXT, "    DO NOT USE CAPITAL CHARACTERS TO WRITE!\n\n");
01098:  MOVLW  F0
0109A:  MOVWF  FF6
0109C:  MOVLW  06
0109E:  MOVWF  FF7
010A0:  MOVLW  00
010A2:  MOVWF  FF8
010A4:  CALL   0880
.................... 
....................         // Read the user's choice
....................         option = fgetc(EXT);
010A8:  RCALL  0C6C
010AA:  MOVFF  01,87
.................... 
....................         // Main menu switch
....................         switch (option) {
010AE:  MOVF   x87,W
010B0:  XORLW  61
010B2:  BZ    10E2
010B4:  XORLW  03
010B6:  BZ    10E4
010B8:  XORLW  01
010BA:  BZ    10E6
010BC:  XORLW  07
010BE:  BZ    10E8
010C0:  XORLW  01
010C2:  BZ    10EC
010C4:  XORLW  03
010C6:  BZ    10EE
010C8:  XORLW  01
010CA:  BZ    10F2
010CC:  XORLW  0F
010CE:  BZ    10F4
010D0:  XORLW  01
010D2:  BZ    10F6
010D4:  XORLW  03
010D6:  BZ    10F8
010D8:  XORLW  01
010DA:  BZ    10FA
010DC:  XORLW  13
010DE:  BZ    10FE
010E0:  BRA    1100
....................             case 'a':
....................                 // Call a function to get housekeeping data
....................                 // get_housekeeping_data();
....................                 break;
010E2:  BRA    1110
....................             case 'b':
....................                 // Call a function to control EPS power output
....................                 // control_eps_power();
....................                 break;
010E4:  BRA    1110
....................             case 'c':
....................                 // Call a function to collect housekeeping data
....................                 // collect_housekeeping_data();
....................                 break;
010E6:  BRA    1110
....................             case 'd':
....................                 handle_flash_memories();
010E8:  BRA    0CB2
....................                 break;
010EA:  BRA    1110
....................             case 'e':
....................                 // Call a function to see satellite log
....................                 // see_satellite_log();
....................                 break;
010EC:  BRA    1110
....................             case 'f':
....................                 handle_set_time();
010EE:  BRA    0DCC
....................                 break;
010F0:  BRA    1110
....................             case 'g':
....................                 // Call a function for satellite log downlink command
....................                 // satellite_log_downlink_command();
....................                 break;
010F2:  BRA    1110
....................             case 'h':
....................                 // Call a function for IHC mission start
....................                 // ihc_mission_start();
....................                 break;
010F4:  BRA    1110
....................             case 'i':
....................                 // Call a function for SEL current measurement
....................                 // sel_current_measurement();
....................                 break;
010F6:  BRA    1110
....................             case 'j':
....................                 // Call a function for H8 COM reset
....................                 // h8_com_reset();
....................                 break;
010F8:  BRA    1110
....................             case 'k':
....................                 handle_io_control();
010FA:  BRA    0F70
....................                 break;
010FC:  BRA    1110
....................             case 'x':
....................                 return;
010FE:  BRA    1112
....................             default:
....................                 fprintf(EXT, "Invalid option. Please try again.\n");
01100:  MOVLW  1E
01102:  MOVWF  FF6
01104:  MOVLW  07
01106:  MOVWF  FF7
01108:  MOVLW  00
0110A:  MOVWF  FF8
0110C:  CALL   0880
....................                 break;
....................         }
01110:  BRA    0FDE
....................     }
01112:  GOTO   1322 (RETURN)
.................... }
.................... 
.................... 
.................... // Implement the helper functions as required, e.g., READ_DATA_FROM_ADDRESS, WRITE_DATA_NBYTES, etc.
.................... 
.................... 
.................... 
.................... #ifdef	__cplusplus
.................... }
.................... #endif
.................... 
.................... #endif	/* SPI_H */
.................... 
.................... 
.................... 
.................... 
.................... /*
....................  * 
....................  */
.................... 
.................... 
.................... #fuses NOWDT, STVREN, NOXINST, FRC, SOSC, PR, NOCLOCKOUT, HS
.................... #use delay(clock=16MHz, crystal)
.................... #use delay(crystal=16MHz)
*
00932:  CLRF   FEA
00934:  MOVLW  88
00936:  MOVWF  FE9
00938:  MOVF   FEF,W
0093A:  BZ    0958
0093C:  MOVLW  05
0093E:  MOVWF  01
00940:  CLRF   00
00942:  DECFSZ 00,F
00944:  BRA    0942
00946:  DECFSZ 01,F
00948:  BRA    0940
0094A:  MOVLW  2E
0094C:  MOVWF  00
0094E:  DECFSZ 00,F
00950:  BRA    094E
00952:  BRA    0954
00954:  DECFSZ FEF,F
00956:  BRA    093C
00958:  GOTO   1282 (RETURN)
.................... //int8 setup_oscillator(OSC_PRIMARY|OSC_SOSC_ENABLED);
.................... char bichig[21] = "test data update with";
.................... char read_data[80];
.................... 
.................... void main() {
*
01116:  CLRF   FF8
01118:  BCF    FD0.7
0111A:  CLRF   F9B
0111C:  CLRF   F64
0111E:  CLRF   F65
01120:  CLRF   F66
01122:  MOVLW  02
01124:  MOVWF  FD3
01126:  BCF    F96.5
01128:  BSF    F8D.5
0112A:  BCF    F94.6
0112C:  BSF    F8B.6
0112E:  BCF    F95.2
01130:  BSF    F8C.2
01132:  BCF    F97.7
01134:  BSF    F8E.7
01136:  BSF    F96.0
01138:  BCF    F96.6
0113A:  BCF    F96.1
0113C:  BCF    F8D.1
0113E:  BSF    F93.5
01140:  BCF    F93.4
01142:  BCF    F93.2
01144:  BCF    F8A.2
01146:  BSF    F92.0
01148:  BCF    F92.1
0114A:  BCF    F92.3
0114C:  BCF    F89.3
0114E:  CLRF   05
01150:  CLRF   04
01152:  BRA    1186
01154:  DATA 15,00
01156:  DATA 06,74
01158:  DATA 65,73
0115A:  DATA 74,20
0115C:  DATA 64,61
0115E:  DATA 74,61
01160:  DATA 20,75
01162:  DATA 70,64
01164:  DATA 61,74
01166:  DATA 65,20
01168:  DATA 77,69
0116A:  DATA 74,68
0116C:  DATA 03,0E
0116E:  DATA 45,00
01170:  DATA 00,00
01172:  DATA 08,4E
01174:  DATA CE,00
01176:  DATA 02,0E
01178:  DATA D9,00
0117A:  DATA 00,02
0117C:  DATA 0F,37
0117E:  DATA 00,00
01180:  DATA 01,0F
01182:  DATA 53,00
01184:  DATA 00,00
01186:  MOVLW  00
01188:  MOVWF  FF8
0118A:  MOVLW  11
0118C:  MOVWF  FF7
0118E:  MOVLW  54
01190:  MOVWF  FF6
01192:  TBLRD*+
01194:  MOVF   FF5,W
01196:  MOVWF  00
01198:  XORLW  00
0119A:  BZ    11C2
0119C:  TBLRD*+
0119E:  MOVF   FF5,W
011A0:  MOVWF  01
011A2:  BTFSC  FE8.7
011A4:  BRA    11B0
011A6:  ANDLW  3F
011A8:  MOVWF  FEA
011AA:  TBLRD*+
011AC:  MOVFF  FF5,FE9
011B0:  BTFSC  01.6
011B2:  TBLRD*+
011B4:  BTFSS  01.6
011B6:  TBLRD*+
011B8:  MOVFF  FF5,FEE
011BC:  DCFSNZ 00,F
011BE:  BRA    1192
011C0:  BRA    11B4
011C2:  CLRF   FF8
....................     fprintf(EPS, "start_writing\n");
011C4:  MOVLW  42
011C6:  MOVWF  FF6
011C8:  MOVLW  07
011CA:  MOVWF  FF7
011CC:  MOVLW  00
011CE:  MOVWF  FF8
011D0:  GOTO   0814
....................     fprintf(EXT, "POWER ON!\n");
011D4:  MOVLW  52
011D6:  MOVWF  FF6
011D8:  MOVLW  07
011DA:  MOVWF  FF7
011DC:  MOVLW  00
011DE:  MOVWF  FF8
011E0:  CALL   0880
....................     //--------------------------RTC-------------------------
....................     setup_lcd(LCD_DISABLED);
011E4:  MOVLB  E
011E6:  CLRF   xD6
011E8:  CLRF   xD7
011EA:  CLRF   xDA
011EC:  CLRF   xD8
011EE:  CLRF   xD9
011F0:  MOVLB  F
....................     rtc_time_t write_clock, read_clock;
....................     setup_rtc(RTC_ENABLE | RTC_CLOCK_SOSC | RTC_CLOCK_INT, 0);
011F2:  MOVLB  F
011F4:  MOVLW  55
011F6:  MOVWF  F7E
011F8:  MOVLW  AA
011FA:  MOVWF  F7E
011FC:  BSF    x5F.5
011FE:  CLRF   x5E
01200:  MOVLW  04
01202:  MOVWF  x57
01204:  MOVLW  80
01206:  MOVWF  x5F
01208:  BCF    x5F.5
....................     RTC_CLOCK_INT;
....................     rtc_read(&read_clock);
0120A:  BSF    x5F.0
0120C:  BSF    x5F.1
0120E:  CLRF   FEA
01210:  MOVLW  74
01212:  MOVWF  FE9
01214:  MOVLW  04
01216:  MOVWF  01
01218:  MOVF   x5C,W
0121A:  MOVLB  0
0121C:  CALL   08A8
01220:  MOVWF  FEE
01222:  MOVLB  F
01224:  MOVF   x5D,W
01226:  MOVLB  0
01228:  CALL   08A8
0122C:  MOVWF  FEE
0122E:  DECFSZ 01,F
01230:  BRA    1234
01232:  BRA    1238
01234:  MOVLB  F
01236:  BRA    1218
.................... 
....................     //------------------------Start_Indicator-----------------------
....................     fprintf(EXT, "POWER ON!\n");
01238:  MOVLW  5E
0123A:  MOVWF  FF6
0123C:  MOVLW  07
0123E:  MOVWF  FF7
01240:  MOVLW  00
01242:  MOVWF  FF8
01244:  CALL   0880
....................     //------------------------restart_indicator-----------------------
....................     // #define SHUTDOWN_COUNT_ADDRESS  0x00000500
....................     //  update_shutdown_count();
....................     //   #define SHUTDOWN_COUNT_ADDRESS  0x00000500  // Address where shutdown count is stored
....................     //     fprintf(EXT, "Shutdown count started\n");
....................     //    unsigned int8 shutdown_count[1];  
....................     //    READ_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
....................     //    delay_ms(10);
....................     //
....................     //    // Check if the shutdown count is uninitialized
....................     //    if (shutdown_count[0] == 0xFF) {
....................     //        shutdown_count[0] = 0;  // Initialize to 0 if uninitialized
....................     //         fprintf(EXT, "Shutdown count uninitialized, setting to 0\n");
....................     //    }
....................     //
....................     //    shutdown_count[0] += 1;  // Increment the shutdown count
....................     //    WRITE_DATA_NBYTES(SHUTDOWN_COUNT_ADDRESS, shutdown_count, 1);
....................     //    delay_ms(10);
....................     //
....................     //    // Print the updated shutdown count
....................     //     fprintf(EXT, "Shutdown count: %u\n", shutdown_count[0]);
....................     //    fprintf(EXT, "Reading chip ID\n");
....................     unsigned char chip_id[8];
....................     READ_CHIP_ID_OF();
01248:  GOTO   0902
....................     for (int i = 0; i < 8; i++) {
0124C:  CLRF   x85
0124E:  MOVF   x85,W
01250:  SUBLW  07
01252:  BNC   126E
....................         fprintf(EXT, "%c", chip_id[i]);
01254:  CLRF   03
01256:  MOVF   x85,W
01258:  ADDLW  7D
0125A:  MOVWF  FE9
0125C:  MOVLW  00
0125E:  ADDWFC 03,W
01260:  MOVWF  FEA
01262:  MOVFF  FEF,9E
01266:  CALL   083E
0126A:  INCF   x85,F
0126C:  BRA    124E
....................     }
....................     fprintf(EXT, "\n");
0126E:  MOVLW  0A
01270:  MOVWF  x9E
01272:  CALL   083E
....................     delay_ms(1000);
01276:  MOVLW  04
01278:  MOVWF  x87
0127A:  MOVLW  FA
0127C:  MOVWF  x88
0127E:  GOTO   0932
01282:  DECFSZ x87,F
01284:  BRA    127A
....................     fprintf(EXT, "Done reading chip ID\n");
01286:  MOVLW  6A
01288:  MOVWF  FF6
0128A:  MOVLW  07
0128C:  MOVWF  FF7
0128E:  MOVLW  00
01290:  MOVWF  FF8
01292:  CALL   0880
....................     //  fprintf(EXT, "Starting to write data\n");
....................     //WRITE_DATA_NBYTES(0x00000160,bichig,29);
....................     //   WRITE_DATA_NBYTES(0x00000250,bichig,40);
....................     WRITE_DATA_NBYTES(0x00000300, bichig, 20);
01296:  CLRF   x8A
01298:  CLRF   x89
0129A:  MOVLW  03
0129C:  MOVWF  x88
0129E:  CLRF   x87
012A0:  CLRF   x8C
012A2:  MOVLW  06
012A4:  MOVWF  x8B
012A6:  MOVLW  14
012A8:  MOVWF  x8D
012AA:  BRA    0AAE
....................     fprintf(EXT, "Byte saved\n");
012AC:  MOVLW  80
012AE:  MOVWF  FF6
012B0:  MOVLW  07
012B2:  MOVWF  FF7
012B4:  MOVLW  00
012B6:  MOVWF  FF8
012B8:  CALL   0880
....................     fprintf(EXT, "Reading desired address\n");
012BC:  MOVLW  8C
012BE:  MOVWF  FF6
012C0:  MOVLW  07
012C2:  MOVWF  FF7
012C4:  MOVLW  00
012C6:  MOVWF  FF8
012C8:  CALL   0880
....................     fprintf(EXT, "Reading... \n");
012CC:  MOVLW  A6
012CE:  MOVWF  FF6
012D0:  MOVLW  07
012D2:  MOVWF  FF7
012D4:  MOVLW  00
012D6:  MOVWF  FF8
012D8:  CALL   0880
....................     READ_DATA_NBYTES(0x00000300, read_data, 20);
012DC:  CLRF   x8A
012DE:  CLRF   x89
012E0:  MOVLW  03
012E2:  MOVWF  x88
012E4:  CLRF   x87
012E6:  CLRF   x8C
012E8:  MOVLW  1B
012EA:  MOVWF  x8B
012EC:  MOVLW  14
012EE:  MOVWF  x8D
012F0:  BRA    0BC0
....................     for (int i = 0; i < 16; i++) {
012F2:  CLRF   x86
012F4:  MOVF   x86,W
012F6:  SUBLW  0F
012F8:  BNC   1314
....................         fprintf(EXT, "%c", read_data[i]);
012FA:  CLRF   03
012FC:  MOVF   x86,W
012FE:  ADDLW  1B
01300:  MOVWF  FE9
01302:  MOVLW  00
01304:  ADDWFC 03,W
01306:  MOVWF  FEA
01308:  MOVFF  FEF,9E
0130C:  CALL   083E
01310:  INCF   x86,F
01312:  BRA    12F4
....................     }
....................     fprintf(EXT, "\n");
01314:  MOVLW  0A
01316:  MOVWF  x9E
01318:  CALL   083E
....................     while (1) {
....................         if (kbhit(EXT)) {
0131C:  BTFSC  F82.7
0131E:  BRA    1332
....................             main_menu();
01320:  BRA    0FDE
....................             fprintf(EXT, "exiting main menu function");
01322:  MOVLW  B4
01324:  MOVWF  FF6
01326:  MOVLW  07
01328:  MOVWF  FF7
0132A:  MOVLW  00
0132C:  MOVWF  FF8
0132E:  CALL   0880
....................         }
01332:  BRA    131C
....................     }
.................... }
.................... 
01334:  BRA    1334
.................... 

Configuration Fuses:
   Word  1: F700   NOSTVREN NOXINST DEBUG BROWNOUT_SW BORV18 NOPROTECT
   Word  2: FF82   PR SOSC_DIG NOCLOCKOUT IESO NOPLL
   Word  3: F032   HS
   Word  4: F7FF   WPFP WPDIS WPEND NOWPCFG
   Word  5: FF03   T5G_IS_T5G CINA_DEFAULT IOL1WAY LS48MHZ MSSP2MSK7 MSSPMSK7
   Word  6: FCFF   WDTWIN_25% WDTCLK_FRC WDT32768 NOWDT WINDIS WPRES128
   Word  7: F01D   NOVREGSLEEP VBATBOR DSBOR DS_SW
   Word  8: F3F8   DSWDT_25DAYS DSWDT_ DSWDT DSWDTOSC_INT

   Some fuses have been forced to be compatible with the ICD debugger.
